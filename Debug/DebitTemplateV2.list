
DebitTemplateV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08011900  08011900  00021900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121e4  080121e4  00030a30  2**0
                  CONTENTS
  4 .ARM          00000008  080121e4  080121e4  000221e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121ec  080121ec  00030a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080121ec  080121ec  000221ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121f4  080121f4  000221f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a30  20000000  080121f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000a30  08012c28  00030a30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08012c28  00030bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155b5  00000000  00000000  00030a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afd  00000000  00000000  00046015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00048b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00049ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024050  00000000  00000000  0004ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012795  00000000  00000000  0006ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4828  00000000  00000000  00081515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155d3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bec  00000000  00000000  00155d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0015c97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a30 	.word	0x20000a30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080118e8 	.word	0x080118e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a34 	.word	0x20000a34
 80001cc:	080118e8 	.word	0x080118e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 ff86 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f001 ff76 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001100:	2110      	movs	r1, #16
 8001102:	4821      	ldr	r0, [pc, #132]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 8001104:	f7ff ffd2 	bl	80010ac <GPIO_SetBits>
 8001108:	e003      	b.n	8001112 <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800110a:	2110      	movs	r1, #16
 800110c:	481e      	ldr	r0, [pc, #120]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 800110e:	f7ff ffdd 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800111c:	2120      	movs	r1, #32
 800111e:	481a      	ldr	r0, [pc, #104]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 8001120:	f7ff ffc4 	bl	80010ac <GPIO_SetBits>
 8001124:	e003      	b.n	800112e <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001126:	2120      	movs	r1, #32
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 800112a:	f7ff ffcf 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 800113c:	f7ff ffb6 	bl	80010ac <GPIO_SetBits>
 8001140:	e003      	b.n	800114a <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 8001146:	f7ff ffc1 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x80) {
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da04      	bge.n	800115c <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 8001156:	f7ff ffa9 	bl	80010ac <GPIO_SetBits>
 800115a:	e003      	b.n	8001164 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 8001160:	f7ff ffb4 	bl	80010cc <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001164:	2201      	movs	r2, #1
 8001166:	2102      	movs	r1, #2
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 800116a:	f001 ff31 	bl	8002fd0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800116e:	2002      	movs	r0, #2
 8001170:	f001 fca2 	bl	8002ab8 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001174:	2200      	movs	r2, #0
 8001176:	2102      	movs	r1, #2
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <hd44780_wr_hi_nibble+0x9c>)
 800117a:	f001 ff29 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400

0800118c <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80011a0:	2110      	movs	r1, #16
 80011a2:	4821      	ldr	r0, [pc, #132]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011a4:	f7ff ff82 	bl	80010ac <GPIO_SetBits>
 80011a8:	e003      	b.n	80011b2 <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80011aa:	2110      	movs	r1, #16
 80011ac:	481e      	ldr	r0, [pc, #120]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011ae:	f7ff ff8d 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x02) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80011bc:	2120      	movs	r1, #32
 80011be:	481a      	ldr	r0, [pc, #104]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011c0:	f7ff ff74 	bl	80010ac <GPIO_SetBits>
 80011c4:	e003      	b.n	80011ce <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80011c6:	2120      	movs	r1, #32
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011ca:	f7ff ff7f 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011dc:	f7ff ff66 	bl	80010ac <GPIO_SetBits>
 80011e0:	e003      	b.n	80011ea <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011e6:	f7ff ff71 	bl	80010cc <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 80011f8:	f7ff ff58 	bl	80010ac <GPIO_SetBits>
 80011fc:	e003      	b.n	8001206 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 8001202:	f7ff ff63 	bl	80010cc <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001206:	2201      	movs	r2, #1
 8001208:	2102      	movs	r1, #2
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 800120c:	f001 fee0 	bl	8002fd0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8001210:	2002      	movs	r0, #2
 8001212:	f001 fc51 	bl	8002ab8 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <hd44780_wr_lo_nibble+0x9c>)
 800121c:	f001 fed8 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	48000400 	.word	0x48000400

0800122c <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff57 	bl	80010ec <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffa3 	bl	800118c <hd44780_wr_lo_nibble>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <hd44780_wr_cmd+0x24>)
 8001260:	f001 feb6 	bl	8002fd0 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffe0 	bl	800122c <hd44780_write>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	48000400 	.word	0x48000400

08001278 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 8001282:	2201      	movs	r2, #1
 8001284:	2101      	movs	r1, #1
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <hd44780_wr_data+0x24>)
 8001288:	f001 fea2 	bl	8002fd0 <HAL_GPIO_WritePin>
	hd44780_write(data);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffcc 	bl	800122c <hd44780_write>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	48000400 	.word	0x48000400

080012a0 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HD44780_Init+0xbc>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HD44780_Init+0xbc>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HD44780_Init+0xbc>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 80012be:	23f0      	movs	r3, #240	; 0xf0
 80012c0:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <HD44780_Init+0xc0>)
 80012d4:	f001 fcfa 	bl	8002ccc <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80012d8:	230b      	movs	r3, #11
 80012da:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <HD44780_Init+0xc0>)
 80012ee:	f001 fced 	bl	8002ccc <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <HD44780_Init+0xc0>)
 80012f8:	f001 fe6a 	bl	8002fd0 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80012fc:	2200      	movs	r2, #0
 80012fe:	2101      	movs	r1, #1
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <HD44780_Init+0xc0>)
 8001302:	f001 fe65 	bl	8002fd0 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <HD44780_Init+0xc0>)
 800130c:	f001 fe60 	bl	8002fd0 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8001310:	2010      	movs	r0, #16
 8001312:	f001 fbd1 	bl	8002ab8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8001316:	2030      	movs	r0, #48	; 0x30
 8001318:	f7ff fee8 	bl	80010ec <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 800131c:	2005      	movs	r0, #5
 800131e:	f001 fbcb 	bl	8002ab8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8001322:	2030      	movs	r0, #48	; 0x30
 8001324:	f7ff fee2 	bl	80010ec <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fbc5 	bl	8002ab8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800132e:	2030      	movs	r0, #48	; 0x30
 8001330:	f7ff fedc 	bl	80010ec <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001334:	2020      	movs	r0, #32
 8001336:	f7ff fed9 	bl	80010ec <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 800133a:	2028      	movs	r0, #40	; 0x28
 800133c:	f7ff ff88 	bl	8001250 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8001340:	200c      	movs	r0, #12
 8001342:	f7ff ff85 	bl	8001250 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ff82 	bl	8001250 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 800134c:	2006      	movs	r0, #6
 800134e:	f7ff ff7f 	bl	8001250 <hd44780_wr_cmd>

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	48000400 	.word	0x48000400

08001364 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff81 	bl	8001278 <hd44780_wr_data>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d901      	bls.n	800139e <HD44780_GotoXY+0x1e>
		x = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d901      	bls.n	80013a8 <HD44780_GotoXY+0x28>
		y = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d816      	bhi.n	80013dc <HD44780_GotoXY+0x5c>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HD44780_GotoXY+0x34>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013cb 	.word	0x080013cb
 80013bc:	080013d1 	.word	0x080013d1
 80013c0:	080013d7 	.word	0x080013d7
	case 0:
		copy_y = 0x80;
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	73fb      	strb	r3, [r7, #15]
		break;
 80013c8:	e008      	b.n	80013dc <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	73fb      	strb	r3, [r7, #15]
		break;
 80013ce:	e005      	b.n	80013dc <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80013d0:	2394      	movs	r3, #148	; 0x94
 80013d2:	73fb      	strb	r3, [r7, #15]
		break;
 80013d4:	e002      	b.n	80013dc <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80013d6:	23d4      	movs	r3, #212	; 0xd4
 80013d8:	73fb      	strb	r3, [r7, #15]
		break;
 80013da:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4413      	add	r3, r2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff33 	bl	8001250 <hd44780_wr_cmd>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop

080013f4 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffab 	bl	8001364 <HD44780_PutChar>
		i++;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ef      	bne.n	8001400 <HD44780_PutStr+0xc>
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ff0e 	bl	8001250 <hd44780_wr_cmd>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	4613      	mov	r3, r2
 8001448:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
	switch(pin)
 800144e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d85a      	bhi.n	800150c <deBounceInit+0xd4>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <deBounceInit+0x24>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	0800149d 	.word	0x0800149d
 8001460:	080014a3 	.word	0x080014a3
 8001464:	080014a9 	.word	0x080014a9
 8001468:	080014af 	.word	0x080014af
 800146c:	080014b5 	.word	0x080014b5
 8001470:	080014bb 	.word	0x080014bb
 8001474:	080014c1 	.word	0x080014c1
 8001478:	080014c7 	.word	0x080014c7
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014d5 	.word	0x080014d5
 8001484:	080014dd 	.word	0x080014dd
 8001488:	080014e5 	.word	0x080014e5
 800148c:	080014ed 	.word	0x080014ed
 8001490:	080014f5 	.word	0x080014f5
 8001494:	080014fd 	.word	0x080014fd
 8001498:	08001505 	.word	0x08001505
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800149c:	2301      	movs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e038      	b.n	8001514 <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80014a2:	2302      	movs	r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e035      	b.n	8001514 <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80014a8:	2304      	movs	r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e032      	b.n	8001514 <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 80014ae:	2308      	movs	r3, #8
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e02f      	b.n	8001514 <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 80014b4:	2310      	movs	r3, #16
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e02c      	b.n	8001514 <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 80014ba:	2320      	movs	r3, #32
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e029      	b.n	8001514 <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e026      	b.n	8001514 <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e023      	b.n	8001514 <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 80014cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e01f      	b.n	8001514 <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e01b      	b.n	8001514 <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e017      	b.n	8001514 <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80014e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e013      	b.n	8001514 <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e00f      	b.n	8001514 <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80014f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e00b      	b.n	8001514 <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80014fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e007      	b.n	8001514 <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e003      	b.n	8001514 <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <deBounceInit+0x15c>)
 800150e:	f005 fb89 	bl	8006c24 <printf>
			break;
 8001512:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001518:	2302      	movs	r3, #2
 800151a:	617b      	str	r3, [r7, #20]
	switch (mode)
 800151c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <deBounceInit+0xf2>
 8001524:	2b01      	cmp	r3, #1
 8001526:	d003      	beq.n	8001530 <deBounceInit+0xf8>
 8001528:	e005      	b.n	8001536 <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 800152a:	2302      	movs	r3, #2
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e002      	b.n	8001536 <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	bf00      	nop
	}
	switch (port)
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	2b43      	cmp	r3, #67	; 0x43
 800153a:	d015      	beq.n	8001568 <deBounceInit+0x130>
 800153c:	2b43      	cmp	r3, #67	; 0x43
 800153e:	dc1a      	bgt.n	8001576 <deBounceInit+0x13e>
 8001540:	2b41      	cmp	r3, #65	; 0x41
 8001542:	d002      	beq.n	800154a <deBounceInit+0x112>
 8001544:	2b42      	cmp	r3, #66	; 0x42
 8001546:	d008      	beq.n	800155a <deBounceInit+0x122>
 8001548:	e015      	b.n	8001576 <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f001 fbba 	bl	8002ccc <HAL_GPIO_Init>
 8001558:	e011      	b.n	800157e <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <deBounceInit+0x160>)
 8001562:	f001 fbb3 	bl	8002ccc <HAL_GPIO_Init>
 8001566:	e00a      	b.n	800157e <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <deBounceInit+0x164>)
 8001570:	f001 fbac 	bl	8002ccc <HAL_GPIO_Init>
 8001574:	e003      	b.n	800157e <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <deBounceInit+0x168>)
 8001578:	f005 fb54 	bl	8006c24 <printf>
			break;
 800157c:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 fba0 	bl	8002ccc <HAL_GPIO_Init>
}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	08011900 	.word	0x08011900
 8001598:	48000400 	.word	0x48000400
 800159c:	48000800 	.word	0x48000800
 80015a0:	08011920 	.word	0x08011920

080015a4 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	460b      	mov	r3, r1
 80015b0:	717b      	strb	r3, [r7, #5]
 80015b2:	4613      	mov	r3, r2
 80015b4:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 80015c2:	f001 fa6d 	bl	8002aa0 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 80015ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	d85a      	bhi.n	800168c <deBounceReadPin+0xe8>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <deBounceReadPin+0x38>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	0800161d 	.word	0x0800161d
 80015e0:	08001623 	.word	0x08001623
 80015e4:	08001629 	.word	0x08001629
 80015e8:	0800162f 	.word	0x0800162f
 80015ec:	08001635 	.word	0x08001635
 80015f0:	0800163b 	.word	0x0800163b
 80015f4:	08001641 	.word	0x08001641
 80015f8:	08001647 	.word	0x08001647
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	08001655 	.word	0x08001655
 8001604:	0800165d 	.word	0x0800165d
 8001608:	08001665 	.word	0x08001665
 800160c:	0800166d 	.word	0x0800166d
 8001610:	08001675 	.word	0x08001675
 8001614:	0800167d 	.word	0x0800167d
 8001618:	08001685 	.word	0x08001685
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800161c:	2301      	movs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e038      	b.n	8001694 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001622:	2302      	movs	r3, #2
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e035      	b.n	8001694 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001628:	2304      	movs	r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e032      	b.n	8001694 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800162e:	2308      	movs	r3, #8
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e02f      	b.n	8001694 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001634:	2310      	movs	r3, #16
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e02c      	b.n	8001694 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800163a:	2320      	movs	r3, #32
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e029      	b.n	8001694 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e026      	b.n	8001694 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e023      	b.n	8001694 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e01f      	b.n	8001694 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e01b      	b.n	8001694 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800165c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e017      	b.n	8001694 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e013      	b.n	8001694 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e00f      	b.n	8001694 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e00b      	b.n	8001694 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 800167c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e007      	b.n	8001694 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e003      	b.n	8001694 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 800168c:	4847      	ldr	r0, [pc, #284]	; (80017ac <deBounceReadPin+0x208>)
 800168e:	f005 fac9 	bl	8006c24 <printf>
				break;
 8001692:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	2b43      	cmp	r3, #67	; 0x43
 800169e:	d01b      	beq.n	80016d8 <deBounceReadPin+0x134>
 80016a0:	2b43      	cmp	r3, #67	; 0x43
 80016a2:	dc23      	bgt.n	80016ec <deBounceReadPin+0x148>
 80016a4:	2b41      	cmp	r3, #65	; 0x41
 80016a6:	d002      	beq.n	80016ae <deBounceReadPin+0x10a>
 80016a8:	2b42      	cmp	r3, #66	; 0x42
 80016aa:	d00b      	beq.n	80016c4 <deBounceReadPin+0x120>
 80016ac:	e01e      	b.n	80016ec <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f001 fc72 	bl	8002fa0 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016c2:	e017      	b.n	80016f4 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	4839      	ldr	r0, [pc, #228]	; (80017b0 <deBounceReadPin+0x20c>)
 80016cc:	f001 fc68 	bl	8002fa0 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016d6:	e00d      	b.n	80016f4 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	4835      	ldr	r0, [pc, #212]	; (80017b4 <deBounceReadPin+0x210>)
 80016e0:	f001 fc5e 	bl	8002fa0 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016ea:	e003      	b.n	80016f4 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80016ec:	4832      	ldr	r0, [pc, #200]	; (80017b8 <deBounceReadPin+0x214>)
 80016ee:	f005 fa99 	bl	8006c24 <printf>
			break;
 80016f2:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80016f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001702:	e043      	b.n	800178c <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800170a:	e03f      	b.n	800178c <deBounceReadPin+0x1e8>
	{

		switch (port)
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	2b43      	cmp	r3, #67	; 0x43
 8001710:	d01b      	beq.n	800174a <deBounceReadPin+0x1a6>
 8001712:	2b43      	cmp	r3, #67	; 0x43
 8001714:	dc23      	bgt.n	800175e <deBounceReadPin+0x1ba>
 8001716:	2b41      	cmp	r3, #65	; 0x41
 8001718:	d002      	beq.n	8001720 <deBounceReadPin+0x17c>
 800171a:	2b42      	cmp	r3, #66	; 0x42
 800171c:	d00b      	beq.n	8001736 <deBounceReadPin+0x192>
 800171e:	e01e      	b.n	800175e <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f001 fc39 	bl	8002fa0 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001734:	e017      	b.n	8001766 <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <deBounceReadPin+0x20c>)
 800173e:	f001 fc2f 	bl	8002fa0 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001748:	e00d      	b.n	8001766 <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	4818      	ldr	r0, [pc, #96]	; (80017b4 <deBounceReadPin+0x210>)
 8001752:	f001 fc25 	bl	8002fa0 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800175c:	e003      	b.n	8001766 <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <deBounceReadPin+0x218>)
 8001760:	f005 fa60 	bl	8006c24 <printf>
				break;
 8001764:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 8001766:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800176a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800176e:	429a      	cmp	r2, r3
 8001770:	d00c      	beq.n	800178c <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001772:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001784:	f001 f98c 	bl	8002aa0 <HAL_GetTick>
 8001788:	4603      	mov	r3, r0
 800178a:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800178c:	f001 f988 	bl	8002aa0 <HAL_GetTick>
 8001790:	4601      	mov	r1, r0
 8001792:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	4413      	add	r3, r2
 800179a:	4299      	cmp	r1, r3
 800179c:	d3b6      	bcc.n	800170c <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 800179e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08011938 	.word	0x08011938
 80017b0:	48000400 	.word	0x48000400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	0801195c 	.word	0x0801195c
 80017bc:	08011980 	.word	0x08011980

080017c0 <changeSpeakerFrequency>:
//				 : passed and the duty cycle of the PAM to
//				 : 50% (1/2 of the period)
// PARAMETERS    : int32 freq - frequency of the output
// RETURNS       : nothing
static void changeSpeakerFrequency(TIM_HandleTypeDef *htim,
		uint32_t newFrequency) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09c      	sub	sp, #112	; 0x70
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]

	//HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);

	// calculate the new period based off of frequency input
	uint32_t newPeriod = 1000000000 / (newFrequency * 250);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	22fa      	movs	r2, #250	; 0xfa
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4a58      	ldr	r2, [pc, #352]	; (8001934 <changeSpeakerFrequency+0x174>)
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	66fb      	str	r3, [r7, #108]	; 0x6c

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	222c      	movs	r2, #44	; 0x2c
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f005 f9f3 	bl	8006bfc <memset>

	htim->Instance = TIM1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <changeSpeakerFrequency+0x178>)
 800181a:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
	htim->Init.Period = newPeriod;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800182c:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
	htim->Init.RepetitionCounter = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htim) != HAL_OK) {
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f002 ffc3 	bl	80047cc <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <changeSpeakerFrequency+0x90>
		Error_Handler();
 800184c:	f000 fe74 	bl	8002538 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK) {
 8001856:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f003 f97d 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <changeSpeakerFrequency+0xac>
		Error_Handler();
 8001868:	f000 fe66 	bl	8002538 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(htim) != HAL_OK) {
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f003 f80e 	bl	800488e <HAL_TIM_PWM_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <changeSpeakerFrequency+0xbc>
		Error_Handler();
 8001878:	f000 fe5e 	bl	8002538 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)
 8001888:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f003 fea2 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <changeSpeakerFrequency+0xde>
			!= HAL_OK) {
		Error_Handler();
 800189a:	f000 fe4d 	bl	8002538 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = htim1.Init.Period/2;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <changeSpeakerFrequency+0x17c>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80018be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c2:	2200      	movs	r2, #0
 80018c4:	4619      	mov	r1, r3
 80018c6:	481d      	ldr	r0, [pc, #116]	; (800193c <changeSpeakerFrequency+0x17c>)
 80018c8:	f003 f838 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <changeSpeakerFrequency+0x116>
			!= HAL_OK) {
		Error_Handler();
 80018d2:	f000 fe31 	bl	8002538 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ee:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig)
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f003 fec9 	bl	80056a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <changeSpeakerFrequency+0x15c>
			!= HAL_OK) {
		Error_Handler();
 8001918:	f000 fe0e 	bl	8002538 <Error_Handler>
	}
	HAL_TIM_MspPostInit(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fe73 	bl	8002608 <HAL_TIM_MspPostInit>

	// must restart the timer once changes are complete
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 8001922:	2100      	movs	r1, #0
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f003 fd5b 	bl	80053e0 <HAL_TIMEx_PWMN_Start>
}
 800192a:	bf00      	nop
 800192c:	3770      	adds	r7, #112	; 0x70
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	3b9aca00 	.word	0x3b9aca00
 8001938:	40012c00 	.word	0x40012c00
 800193c:	20000ad4 	.word	0x20000ad4

08001940 <playAudio>:
// DESCRIPTION   : Turns on the PWM for the pulseTime in ms
//                 provided and then turns off PWM
// PARAMETERS    : address of Timer Handle var (e.g.: &htim1)
//                 pulseTime in ms
// RETURNS       : nothing
void playAudio(uint32_t frequency, uint32_t duration){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim1, frequency);
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <playAudio+0x40>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <playAudio+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60d3      	str	r3, [r2, #12]
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001958:	2100      	movs	r1, #0
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <playAudio+0x40>)
 800195c:	f003 fd40 	bl	80053e0 <HAL_TIMEx_PWMN_Start>
	changeSpeakerFrequency(&htim1, frequency);
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <playAudio+0x40>)
 8001964:	f7ff ff2c 	bl	80017c0 <changeSpeakerFrequency>
	HAL_Delay(duration);
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f001 f8a5 	bl	8002ab8 <HAL_Delay>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800196e:	2100      	movs	r1, #0
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <playAudio+0x40>)
 8001972:	f003 fdd3 	bl	800551c <HAL_TIMEx_PWMN_Stop>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000ad4 	.word	0x20000ad4

08001984 <pushButtonInit>:
//
//                   Note: Don't use PA2 as it is connected to VCP TX and you'll
//                   lose printf output ability.
//   PARAMETERS    : None
//   RETURNS       : nothing
void pushButtonInit(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8001988:	2300      	movs	r3, #0
 800198a:	2201      	movs	r2, #1
 800198c:	2141      	movs	r1, #65	; 0x41
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd52 	bl	8001438 <deBounceInit>
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8001994:	2301      	movs	r3, #1
 8001996:	2201      	movs	r2, #1
 8001998:	2141      	movs	r1, #65	; 0x41
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fd4c 	bl	8001438 <deBounceInit>
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
 80019a0:	2304      	movs	r3, #4
 80019a2:	2201      	movs	r2, #1
 80019a4:	2141      	movs	r1, #65	; 0x41
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd46 	bl	8001438 <deBounceInit>
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 80019ac:	2303      	movs	r3, #3
 80019ae:	2201      	movs	r2, #1
 80019b0:	2141      	movs	r1, #65	; 0x41
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fd40 	bl	8001438 <deBounceInit>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <displayWelcome>:
// FUNCTION      : displayWelcome()
// DESCRIPTION   : clears the LCD display and displays
//                 Welcome on line 1 of the display
// PARAMETERS    : None
// RETURNS       : nothing
void displayWelcome(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
	char stringBuffer[16] = { 0 };
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
	HD44780_ClrScr();
 80019d0:	f7ff fd2b 	bl	800142a <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "Welcome ");
 80019d4:	463b      	mov	r3, r7
 80019d6:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <displayWelcome+0x34>)
 80019d8:	2110      	movs	r1, #16
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 f9a4 	bl	8006d28 <snprintf>
	HD44780_PutStr(stringBuffer);
 80019e0:	463b      	mov	r3, r7
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fd06 	bl	80013f4 <HD44780_PutStr>
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	080119b4 	.word	0x080119b4

080019f4 <displayAmount>:
// FUNCTION      : displayAmount()
// DESCRIPTION   : clears the LCD display and displays
//                 the $amount received on line 1 of the display
// PARAMETERS    : float - amount to display
// RETURNS       : nothing
void displayAmount(float amount) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	ed87 0a01 	vstr	s0, [r7, #4]
	char stringBuffer[16] = { 0 };
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
	HD44780_ClrScr();
 8001a0e:	f7ff fd0c 	bl	800142a <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "$%.2f", amount);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fda8 	bl	8000568 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f107 0008 	add.w	r0, r7, #8
 8001a20:	e9cd 2300 	strd	r2, r3, [sp]
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <displayAmount+0x4c>)
 8001a26:	2110      	movs	r1, #16
 8001a28:	f005 f97e 	bl	8006d28 <snprintf>
	HD44780_PutStr(stringBuffer);
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fcdf 	bl	80013f4 <HD44780_PutStr>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	080119c0 	.word	0x080119c0

08001a44 <checkIfAmountRecd>:

// FUNCTION      : checkIfAmountRecd()
// DESCRIPTION   :
// PARAMETERS    : none
// RETURNS       : float, the amount in $ to be debited
float checkIfAmountRecd() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	float debitAmount = 0;
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
	printf("waiting for debitAmount to be received on serial port\r\n");
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <checkIfAmountRecd+0x44>)
 8001a52:	f005 f93f 	bl	8006cd4 <puts>
	int16_t result = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	80fb      	strh	r3, [r7, #6]
	result = scanf("%f", &debitAmount);
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <checkIfAmountRecd+0x48>)
 8001a60:	f005 f950 	bl	8006d04 <scanf>
 8001a64:	4603      	mov	r3, r0
 8001a66:	80fb      	strh	r3, [r7, #6]
	if (result == 0)		//then somehow non-float chars were entered
 8001a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <checkIfAmountRecd+0x32>
	{						//and nothing was assigned to %f
		fpurge(STDIN_FILENO); //clear the last erroneous char(s) from the input stream
 8001a70:	2000      	movs	r0, #0
 8001a72:	f004 fc2d 	bl	80062d0 <fpurge>
	}
	return debitAmount;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	ee07 3a90 	vmov	s15, r3
}
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	080119c8 	.word	0x080119c8
 8001a8c:	08011a00 	.word	0x08011a00

08001a90 <checkOkOrCancel>:
//                 button has been pressed.
// PARAMETERS    : none
// RETURNS       : int8_t, 3 if cancel pressed, 4 if ok
//                 ok pressed. 0 returned if neither
//                 has pressed.
enum pushButton checkOkOrCancel(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0) {
 8001a94:	2303      	movs	r3, #3
 8001a96:	220a      	movs	r2, #10
 8001a98:	2141      	movs	r1, #65	; 0x41
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd82 	bl	80015a4 <deBounceReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <checkOkOrCancel+0x1a>
		//then the cancel pushbutton has been pressed
		return cancel;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e00b      	b.n	8001ac2 <checkOkOrCancel+0x32>
	} else if (deBounceReadPin(okPbPin, 'A', 10) == 0) {
 8001aaa:	2304      	movs	r3, #4
 8001aac:	220a      	movs	r2, #10
 8001aae:	2141      	movs	r1, #65	; 0x41
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd77 	bl	80015a4 <deBounceReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <checkOkOrCancel+0x30>
		//then ok pressed
		return ok;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <checkOkOrCancel+0x32>
	}
	return none; //as ok or cancel was not pressed.
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <displayOkCancel>:

// FUNCTION      : displayOkOrCancel()
// DESCRIPTION   : displays "OK or Cancel?" on line 2 of LCD
// PARAMETERS    : none
// RETURNS       : nothing.
void displayOkCancel(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
	char stringBuffer[16] = { 0 };
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
	HD44780_GotoXY(0, 1); //move to second line first position
 8001adc:	2101      	movs	r1, #1
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fc4e 	bl	8001380 <HD44780_GotoXY>
	snprintf(stringBuffer, 16, "OK or Cancel?");
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <displayOkCancel+0x38>)
 8001ae8:	2110      	movs	r1, #16
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 f91c 	bl	8006d28 <snprintf>
	HD44780_PutStr(stringBuffer);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fc7e 	bl	80013f4 <HD44780_PutStr>
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08011a04 	.word	0x08011a04

08001b04 <chequingOrSavings>:
// DESCRIPTION   : Checks weather chequing or Savings
//                 is pressed.
// PARAMETERS    : none
// RETURNS       : Returns 0 if chequing is pressed.
//                 Returns 1 if savings is pressed.
enum pushButton chequingOrSavings(void){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	if(deBounceReadPin(chequingPbPin, 'A', 10) == 0){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	2141      	movs	r1, #65	; 0x41
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fd48 	bl	80015a4 <deBounceReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <chequingOrSavings+0x1a>
		return chequing;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00b      	b.n	8001b36 <chequingOrSavings+0x32>
	}else if(deBounceReadPin(savingsPbPin, 'A', 10) == 0){
 8001b1e:	2301      	movs	r3, #1
 8001b20:	220a      	movs	r2, #10
 8001b22:	2141      	movs	r1, #65	; 0x41
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd3d 	bl	80015a4 <deBounceReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <chequingOrSavings+0x30>
		return savings;
 8001b30:	2302      	movs	r3, #2
 8001b32:	e000      	b.n	8001b36 <chequingOrSavings+0x32>
	}
	return none;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <displaySavingOrChequing>:
// DESCRIPTION   : displays "Chequing" or "Savings"?
//                 "Chequing" on first line of LCD
//                 "Saving" on second line of LCD
// PARAMETERS    : none
// RETURNS       : nothing.
void displaySavingOrChequing(void){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
	char string1[16] = {0};
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
	char string2[16] = {0};
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
	HD44780_ClrScr();
 8001b60:	f7ff fc63 	bl	800142a <HD44780_ClrScr>
	snprintf(string1, 16, "Chequing or");
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <displaySavingOrChequing+0x6c>)
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 f8db 	bl	8006d28 <snprintf>
	HD44780_GotoXY(0, 0);
 8001b72:	2100      	movs	r1, #0
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fc03 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr(string1);
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fc38 	bl	80013f4 <HD44780_PutStr>
	snprintf(string2, 16, "Savings?");
 8001b84:	463b      	mov	r3, r7
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <displaySavingOrChequing+0x70>)
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 f8cc 	bl	8006d28 <snprintf>
	HD44780_GotoXY(0, 1);
 8001b90:	2101      	movs	r1, #1
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fbf4 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr(string2);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fc2a 	bl	80013f4 <HD44780_PutStr>
}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08011a14 	.word	0x08011a14
 8001bac:	08011a20 	.word	0x08011a20

08001bb0 <displayTransactionCancel>:
//                 on 1st and 2nd line of LCD respectively.
//                 Calls the function displayWelcome() after
//				   a delay of 1500ms.
// PARAMETERS    : none
// RETURNS       : nothing.
void displayTransactionCancel(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
	char string1[16] = {0};
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
	char string2[16] = {0};
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
	HD44780_ClrScr();
 8001bd4:	f7ff fc29 	bl	800142a <HD44780_ClrScr>
	snprintf(string1, 16, "Transaction");
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <displayTransactionCancel+0x84>)
 8001bde:	2110      	movs	r1, #16
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 f8a1 	bl	8006d28 <snprintf>
	HD44780_GotoXY(0, 0);
 8001be6:	2100      	movs	r1, #0
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff fbc9 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr(string1);
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbfe 	bl	80013f4 <HD44780_PutStr>
	snprintf(string2, 16, "Cancelled");
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <displayTransactionCancel+0x88>)
 8001bfc:	2110      	movs	r1, #16
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 f892 	bl	8006d28 <snprintf>
	HD44780_GotoXY(0, 1);
 8001c04:	2101      	movs	r1, #1
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fbba 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr(string2);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fbf0 	bl	80013f4 <HD44780_PutStr>
	playAudio(600, 500);
 8001c14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c18:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c1c:	f7ff fe90 	bl	8001940 <playAudio>
	HAL_Delay(1500);
 8001c20:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c24:	f000 ff48 	bl	8002ab8 <HAL_Delay>
	displayWelcome();
 8001c28:	f7ff fec8 	bl	80019bc <displayWelcome>

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	08011a2c 	.word	0x08011a2c
 8001c38:	08011a38 	.word	0x08011a38

08001c3c <displayEnterPIN>:
// FUNCTION      : displayEnterPIN()
// DESCRIPTION   : displays "ENTER PIN" to ask the
//                 user to enter the PIN.
// PARAMETERS    : none
// RETURNS       : nothing.
void displayEnterPIN(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
	char string1[16] = { 0 };
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
	HD44780_ClrScr();
 8001c50:	f7ff fbeb 	bl	800142a <HD44780_ClrScr>
	snprintf(string1, 16, "Enter PIN");
 8001c54:	463b      	mov	r3, r7
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <displayEnterPIN+0x3c>)
 8001c58:	2110      	movs	r1, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 f864 	bl	8006d28 <snprintf>
	HD44780_GotoXY(0, 0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fb8c 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr(string1);
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fbc2 	bl	80013f4 <HD44780_PutStr>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08011a44 	.word	0x08011a44

08001c7c <enterPIN>:
// DESCRIPTION   : Checks if the debit PIN entered by the
//                 user matches the saved password.
// PARAMETERS    : none
// RETURNS       : Returns 1 if the password matches.
//               : Returns 0 if the password doesn't match.
int enterPIN(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
	char password[] = "1234";
 8001c82:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <enterPIN+0x60>)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c8c:	6018      	str	r0, [r3, #0]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	7019      	strb	r1, [r3, #0]
	char inputPassword[5] = {'\0'};
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	713b      	strb	r3, [r7, #4]
	printf("Enter PIN\r\n");
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <enterPIN+0x64>)
 8001c9c:	f005 f81a 	bl	8006cd4 <puts>
	scanf("%s", inputPassword);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <enterPIN+0x68>)
 8001ca6:	f005 f82d 	bl	8006d04 <scanf>
	printf("Password:\r\n");
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <enterPIN+0x6c>)
 8001cac:	f005 f812 	bl	8006cd4 <puts>
	puts(inputPassword);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f005 f80e 	bl	8006cd4 <puts>
	if(strcmp(password, inputPassword) == 0){
 8001cb8:	463a      	mov	r2, r7
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fa85 	bl	80001d0 <strcmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <enterPIN+0x54>
		return 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <enterPIN+0x56>
	}
	else
		return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08011a6c 	.word	0x08011a6c
 8001ce0:	08011a50 	.word	0x08011a50
 8001ce4:	08011a5c 	.word	0x08011a5c
 8001ce8:	08011a60 	.word	0x08011a60

08001cec <bankOK>:
//                 debit machine when transaction is APPROVED.
//                 Shows that the machine is connected to the bank
//                 and returns confirmation as an approval.
// PARAMETERS    : none
// RETURNS       : nothing.
void bankOK(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	HD44780_ClrScr();
 8001cf0:	f7ff fb9b 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("waiting..");
 8001cf4:	480e      	ldr	r0, [pc, #56]	; (8001d30 <bankOK+0x44>)
 8001cf6:	f7ff fb7d 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(500);
 8001cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cfe:	f000 fedb 	bl	8002ab8 <HAL_Delay>
	HD44780_ClrScr();
 8001d02:	f7ff fb92 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("connected..");
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <bankOK+0x48>)
 8001d08:	f7ff fb74 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(500);
 8001d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d10:	f000 fed2 	bl	8002ab8 <HAL_Delay>
	HD44780_ClrScr();
 8001d14:	f7ff fb89 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("APPROVED");
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <bankOK+0x4c>)
 8001d1a:	f7ff fb6b 	bl	80013f4 <HD44780_PutStr>
	playAudio(400, 500);
 8001d1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d26:	f7ff fe0b 	bl	8001940 <playAudio>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08011a74 	.word	0x08011a74
 8001d34:	08011a80 	.word	0x08011a80
 8001d38:	08011a8c 	.word	0x08011a8c

08001d3c <bankNotOK>:
//                 server and returns DECLINED if balance is low.
//                 After 1000ms function displayTransactionCancel()
//                 is called.
// PARAMETERS    : none
// RETURNS       : nothing.
void bankNotOK(void){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	HD44780_ClrScr();
 8001d40:	f7ff fb73 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("waiting..");
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <bankNotOK+0x50>)
 8001d46:	f7ff fb55 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(500);
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f000 feb3 	bl	8002ab8 <HAL_Delay>
	HD44780_ClrScr();
 8001d52:	f7ff fb6a 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("connected..");
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <bankNotOK+0x54>)
 8001d58:	f7ff fb4c 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(500);
 8001d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d60:	f000 feaa 	bl	8002ab8 <HAL_Delay>
	HD44780_ClrScr();
 8001d64:	f7ff fb61 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("DECLINED");
 8001d68:	480a      	ldr	r0, [pc, #40]	; (8001d94 <bankNotOK+0x58>)
 8001d6a:	f7ff fb43 	bl	80013f4 <HD44780_PutStr>
	playAudio(600, 500);
 8001d6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d72:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001d76:	f7ff fde3 	bl	8001940 <playAudio>
	HAL_Delay(1000);
 8001d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d7e:	f000 fe9b 	bl	8002ab8 <HAL_Delay>
	displayTransactionCancel();
 8001d82:	f7ff ff15 	bl	8001bb0 <displayTransactionCancel>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08011a74 	.word	0x08011a74
 8001d90:	08011a80 	.word	0x08011a80
 8001d94:	08011a98 	.word	0x08011a98

08001d98 <displayPrintReciept>:
// FUNCTION      : displayPrintReciept()
// DESCRIPTION   : displays "Print Receipt?" on line 1 of LCD
//                 displays "YES   NO" on line 2 of LCD
// PARAMETERS    : none
// RETURNS       : nothing.
void displayPrintReciept(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HD44780_ClrScr();
 8001d9c:	f7ff fb45 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("Print Receipt?");
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <displayPrintReciept+0x20>)
 8001da2:	f7ff fb27 	bl	80013f4 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fae9 	bl	8001380 <HD44780_GotoXY>
	HD44780_PutStr("YES   NO");
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <displayPrintReciept+0x24>)
 8001db0:	f7ff fb20 	bl	80013f4 <HD44780_PutStr>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08011aa4 	.word	0x08011aa4
 8001dbc:	08011ab4 	.word	0x08011ab4

08001dc0 <displayPrintingReciept>:
// DESCRIPTION   : displays "Printing..."
//                 After 2000ms displays "Thank You"
//                 After 700ms function displayWelcome()
// PARAMETERS    : none
// RETURNS       : nothing.
void displayPrintingReciept(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HD44780_ClrScr();
 8001dc4:	f7ff fb31 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("Printing...");
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <displayPrintingReciept+0x30>)
 8001dca:	f7ff fb13 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(2000);
 8001dce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dd2:	f000 fe71 	bl	8002ab8 <HAL_Delay>
	HD44780_ClrScr();
 8001dd6:	f7ff fb28 	bl	800142a <HD44780_ClrScr>
	HD44780_PutStr("Thank You");
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <displayPrintingReciept+0x34>)
 8001ddc:	f7ff fb0a 	bl	80013f4 <HD44780_PutStr>
	HAL_Delay(700);
 8001de0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001de4:	f000 fe68 	bl	8002ab8 <HAL_Delay>
	displayWelcome();
 8001de8:	f7ff fde8 	bl	80019bc <displayWelcome>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	08011ac0 	.word	0x08011ac0
 8001df4:	08011acc 	.word	0x08011acc

08001df8 <printTransactionRecord>:
// DESCRIPTION   : Print transaction record in a linked list along
//                 with date and time of transaction and amount.
// PARAMETERS    : node* head - points to the node of linked list
// RETURNS       : nothing.
// Reference     : https://www.geeksforgeeks.org/time-h-header-file-in-c-with-examples/
void printTransactionRecord(struct node* head){
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	time_t t;
	time(&t);
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 f9b1 	bl	800816c <time>
	while(head){
 8001e0a:	e013      	b.n	8001e34 <printTransactionRecord+0x3c>
		printf("DEBIT/TRANSACTION/%s/$%.2f\r\n",ctime(&t), head->debitAmount);
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fa0a 	bl	800622a <ctime>
 8001e16:	4604      	mov	r4, r0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fba3 	bl	8000568 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4621      	mov	r1, r4
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <printTransactionRecord+0x4c>)
 8001e2a:	f004 fefb 	bl	8006c24 <printf>
		head = head->next;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	607b      	str	r3, [r7, #4]
	while(head){
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e8      	bne.n	8001e0c <printTransactionRecord+0x14>
	}
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	08011ad8 	.word	0x08011ad8

08001e48 <recordTransactionEndOfList>:
// DESCRIPTION   : Record each transaction at the end of a linked list
// PARAMETERS    : node** head
//                 amountValue
// RETURNS       : nothing.
// Reference     : https://qnaplus.com/insert-element-singly-linked-list/
void recordTransactionEndOfList(struct node** head, float amountValue){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	ed87 0a00 	vstr	s0, [r7]
	    struct node* new_node = NULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
	    struct node* last = NULL;       //Last node of the list points to NULL
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

	    new_node = (struct node*)malloc(sizeof(struct node));  //Creating new node
 8001e5c:	2008      	movs	r0, #8
 8001e5e:	f004 fc7b 	bl	8006758 <malloc>
 8001e62:	4603      	mov	r3, r0
 8001e64:	60bb      	str	r3, [r7, #8]

	    if (new_node == NULL)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <recordTransactionEndOfList+0x2a>
	    {
	        printf("Failed to insert element. Out of memory");
 8001e6c:	4810      	ldr	r0, [pc, #64]	; (8001eb0 <recordTransactionEndOfList+0x68>)
 8001e6e:	f004 fed9 	bl	8006c24 <printf>
	    }

	    new_node->debitAmount = amountValue;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]
	    new_node->next = NULL;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]

	    if (*head == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <recordTransactionEndOfList+0x46>
	    {
	        *head = new_node;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	601a      	str	r2, [r3, #0]
	        return;
 8001e8c:	e00d      	b.n	8001eaa <recordTransactionEndOfList+0x62>
	    }

	    last = *head;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]
	    while (last->next) last = last->next;
 8001e94:	e002      	b.n	8001e9c <recordTransactionEndOfList+0x54>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f8      	bne.n	8001e96 <recordTransactionEndOfList+0x4e>

	    last->next = new_node;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	605a      	str	r2, [r3, #4]
}
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	08011af8 	.word	0x08011af8

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f000 fd88 	bl	80029ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f94f 	bl	8002160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec2:	f000 faef 	bl	80024a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ec6:	f000 fabd 	bl	8002444 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001eca:	f000 fa2d 	bl	8002328 <MX_TIM1_Init>
  MX_RTC_Init();
 8001ece:	f000 f9cf 	bl	8002270 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	printf("Debit Card State Machine\r\n");
 8001ed2:	4898      	ldr	r0, [pc, #608]	; (8002134 <main+0x280>)
 8001ed4:	f004 fefe 	bl	8006cd4 <puts>
	HD44780_Init();
 8001ed8:	f7ff f9e2 	bl	80012a0 <HD44780_Init>
	/* setup Port A bits 0,1,2 and 3, i.e.: PA0-PA3 for input */
	pushButtonInit();
 8001edc:	f7ff fd52 	bl	8001984 <pushButtonInit>
	displayWelcome();
 8001ee0:	f7ff fd6c 	bl	80019bc <displayWelcome>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float amount = 0;             				//used to hold the transaction amount
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
		static int8_t transactionState = 1;			//Transaction States
		static float getAmount = 0;					//
		static float accountBalanceSavings = 2000;	//Holds Balance in Savings in account
		static float accountBalanceChequing = 1000; //Holds Balance in Chequing account
		struct node* head = NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
		//int32_t pulseDuration = 0;
		enum pushButton pbPressed = none;  //will hold pushbutton defined above depending on
 8001eee:	2300      	movs	r3, #0
 8001ef0:	72fb      	strb	r3, [r7, #11]
		 5   Send transaction data to bank. Waiting for OK back
		     from Bank If OK from Bank received. Record transaction.
		 6   Ask user to print receipt and if Cancel Pressed.
		 	 Display "Transaction Cancelled" back to state 1
		 */
		switch (transactionState) {
 8001ef2:	4b91      	ldr	r3, [pc, #580]	; (8002138 <main+0x284>)
 8001ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	f200 810f 	bhi.w	800211e <main+0x26a>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <main+0x54>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f21 	.word	0x08001f21
 8001f0c:	08001f53 	.word	0x08001f53
 8001f10:	08001f95 	.word	0x08001f95
 8001f14:	08001fef 	.word	0x08001fef
 8001f18:	0800200d 	.word	0x0800200d
 8001f1c:	080020ed 	.word	0x080020ed
		case 1: 					//checking if an amount has been received
			amount = checkIfAmountRecd();
 8001f20:	f7ff fd90 	bl	8001a44 <checkIfAmountRecd>
 8001f24:	ed87 0a03 	vstr	s0, [r7, #12]
			if (amount != 0)        //returns a 0 if an transaction amount has
 8001f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	f000 80f5 	beq.w	8002122 <main+0x26e>
			{ 						//NOT been received on the serial port.
				displayAmount(amount); //but if we're we've received a debitAmount
 8001f38:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f3c:	f7ff fd5a 	bl	80019f4 <displayAmount>
				getAmount = amount;
 8001f40:	4a7e      	ldr	r2, [pc, #504]	; (800213c <main+0x288>)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6013      	str	r3, [r2, #0]
				displayOkCancel();	//so display it and the prompt ok or cancel
 8001f46:	f7ff fdbf 	bl	8001ac8 <displayOkCancel>
				transactionState = 2;//and do that before we move on to state 2
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <main+0x284>)
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f50:	e0e7      	b.n	8002122 <main+0x26e>
		case 2: 						//amount has been received waiting for
			pbPressed = checkOkOrCancel();
 8001f52:	f7ff fd9d 	bl	8001a90 <checkOkOrCancel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	72fb      	strb	r3, [r7, #11]

			if (pbPressed != none) {
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80e2 	beq.w	8002126 <main+0x272>
				if (pbPressed == cancel) {
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d108      	bne.n	8001f7a <main+0xc6>
					//then cancel was pressed.
					printf("Cancel Pressed\r\n");
 8001f68:	4875      	ldr	r0, [pc, #468]	; (8002140 <main+0x28c>)
 8001f6a:	f004 feb3 	bl	8006cd4 <puts>
					transactionState = 1;
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <main+0x284>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
					displayTransactionCancel();
 8001f74:	f7ff fe1c 	bl	8001bb0 <displayTransactionCancel>
					printf("OK Pressed\r\n");
					transactionState = 3;
					displaySavingOrChequing();
				}
			}
			break;
 8001f78:	e0d5      	b.n	8002126 <main+0x272>
				} else if (pbPressed == ok) {
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	f040 80d2 	bne.w	8002126 <main+0x272>
					printf("OK Pressed\r\n");
 8001f82:	4870      	ldr	r0, [pc, #448]	; (8002144 <main+0x290>)
 8001f84:	f004 fea6 	bl	8006cd4 <puts>
					transactionState = 3;
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <main+0x284>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
					displaySavingOrChequing();
 8001f8e:	f7ff fdd5 	bl	8001b3c <displaySavingOrChequing>
			break;
 8001f92:	e0c8      	b.n	8002126 <main+0x272>

		case 3:
			pbPressed = chequingOrSavings();
 8001f94:	f7ff fdb6 	bl	8001b04 <chequingOrSavings>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	72fb      	strb	r3, [r7, #11]
			if(pbPressed != none){
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80c3 	beq.w	800212a <main+0x276>
				if(pbPressed == cancel){
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d108      	bne.n	8001fbc <main+0x108>
					printf("Cancel Pressed\r\n");
 8001faa:	4865      	ldr	r0, [pc, #404]	; (8002140 <main+0x28c>)
 8001fac:	f004 fe92 	bl	8006cd4 <puts>
					transactionState = 1;
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <main+0x284>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
					//If cancel Transaction Cancelled on LCD
					displayTransactionCancel();
 8001fb6:	f7ff fdfb 	bl	8001bb0 <displayTransactionCancel>
					printf("Savings Pressed\r\n");
					transactionState = 4;
					displayEnterPIN();
				}
			}
			break;
 8001fba:	e0b6      	b.n	800212a <main+0x276>
				else if(pbPressed == chequing){
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d108      	bne.n	8001fd4 <main+0x120>
					printf("Chequing Pressed\r\n");
 8001fc2:	4861      	ldr	r0, [pc, #388]	; (8002148 <main+0x294>)
 8001fc4:	f004 fe86 	bl	8006cd4 <puts>
					transactionState = 4;
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <main+0x284>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	701a      	strb	r2, [r3, #0]
					displayEnterPIN();
 8001fce:	f7ff fe35 	bl	8001c3c <displayEnterPIN>
			break;
 8001fd2:	e0aa      	b.n	800212a <main+0x276>
				else if(pbPressed == savings){
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	f040 80a7 	bne.w	800212a <main+0x276>
					printf("Savings Pressed\r\n");
 8001fdc:	485b      	ldr	r0, [pc, #364]	; (800214c <main+0x298>)
 8001fde:	f004 fe79 	bl	8006cd4 <puts>
					transactionState = 4;
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <main+0x284>)
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	701a      	strb	r2, [r3, #0]
					displayEnterPIN();
 8001fe8:	f7ff fe28 	bl	8001c3c <displayEnterPIN>
			break;
 8001fec:	e09d      	b.n	800212a <main+0x276>

			/*Enter PIN via serial port and
			  check if PIN is correct
			  If PIN is incorrect state control
			  goes to transactionState 1 */
			if(enterPIN()){
 8001fee:	f7ff fe45 	bl	8001c7c <enterPIN>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <main+0x14c>
				transactionState = 5;
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <main+0x284>)
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	701a      	strb	r2, [r3, #0]
			else
			{
				bankNotOK();
				transactionState = 1;
			}
			break;
 8001ffe:	e097      	b.n	8002130 <main+0x27c>
				bankNotOK();
 8002000:	f7ff fe9c 	bl	8001d3c <bankNotOK>
				transactionState = 1;
 8002004:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <main+0x284>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
			break;
 800200a:	e091      	b.n	8002130 <main+0x27c>
			  Deducts and displays savings acc balance
			  Calls the func recordTransactionEndOfList() to
			  insert data at the end of list
			  Calls the func printTransactionRecord() to
			  display the linked list */
			if(accountBalanceSavings > getAmount){
 800200c:	4b50      	ldr	r3, [pc, #320]	; (8002150 <main+0x29c>)
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <main+0x288>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	dd29      	ble.n	8002076 <main+0x1c2>
				bankOK();
 8002022:	f7ff fe63 	bl	8001cec <bankOK>
				displayPrintReciept();
 8002026:	f7ff feb7 	bl	8001d98 <displayPrintReciept>
				accountBalanceSavings -= getAmount;
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <main+0x29c>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <main+0x288>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	4b45      	ldr	r3, [pc, #276]	; (8002150 <main+0x29c>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
				printf("Savings Account: %.2f\r\n",accountBalanceSavings);
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <main+0x29c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa8f 	bl	8000568 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4841      	ldr	r0, [pc, #260]	; (8002154 <main+0x2a0>)
 8002050:	f004 fde8 	bl	8006c24 <printf>
				recordTransactionEndOfList(&head, getAmount);
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <main+0x288>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fef1 	bl	8001e48 <recordTransactionEndOfList>
				printTransactionRecord(head);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fec5 	bl	8001df8 <printTransactionRecord>
				transactionState = 6;
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <main+0x284>)
 8002070:	2206      	movs	r2, #6
 8002072:	701a      	strb	r2, [r3, #0]
			}
			else{
				transactionState = 1;
				bankNotOK();
			}
			break;
 8002074:	e05c      	b.n	8002130 <main+0x27c>
			else if(accountBalanceChequing > getAmount){
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <main+0x2a4>)
 8002078:	ed93 7a00 	vldr	s14, [r3]
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <main+0x288>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	dd29      	ble.n	80020e0 <main+0x22c>
				bankOK();
 800208c:	f7ff fe2e 	bl	8001cec <bankOK>
				displayPrintReciept();
 8002090:	f7ff fe82 	bl	8001d98 <displayPrintReciept>
				accountBalanceChequing -= getAmount;
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <main+0x2a4>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <main+0x288>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <main+0x2a4>)
 80020a6:	edc3 7a00 	vstr	s15, [r3]
				printf("Chequing Account: %.2f\r\n",accountBalanceChequing);
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <main+0x2a4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa5a 	bl	8000568 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4828      	ldr	r0, [pc, #160]	; (800215c <main+0x2a8>)
 80020ba:	f004 fdb3 	bl	8006c24 <printf>
				recordTransactionEndOfList(&head, getAmount);
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <main+0x288>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff febc 	bl	8001e48 <recordTransactionEndOfList>
				printTransactionRecord(head);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe90 	bl	8001df8 <printTransactionRecord>
				transactionState = 6;
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <main+0x284>)
 80020da:	2206      	movs	r2, #6
 80020dc:	701a      	strb	r2, [r3, #0]
			break;
 80020de:	e027      	b.n	8002130 <main+0x27c>
				transactionState = 1;
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <main+0x284>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
				bankNotOK();
 80020e6:	f7ff fe29 	bl	8001d3c <bankNotOK>
			break;
 80020ea:	e021      	b.n	8002130 <main+0x27c>
		case 6:
			/*If ok pressed, receipt is printed
			  If cancel pressed, flow of control goes back
			  to transactionState 1 and displays welcome again.
			 */
			pbPressed = checkOkOrCancel();
 80020ec:	f7ff fcd0 	bl	8001a90 <checkOkOrCancel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	72fb      	strb	r3, [r7, #11]
			if(pbPressed != none){
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <main+0x27a>
				if(pbPressed == ok){
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d105      	bne.n	800210c <main+0x258>
					transactionState = 1;
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <main+0x284>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
					displayPrintingReciept();
 8002106:	f7ff fe5b 	bl	8001dc0 <displayPrintingReciept>
				}else if(pbPressed == cancel){
					displayWelcome();
					transactionState = 1;
				}
			}
			break;
 800210a:	e010      	b.n	800212e <main+0x27a>
				}else if(pbPressed == cancel){
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d10d      	bne.n	800212e <main+0x27a>
					displayWelcome();
 8002112:	f7ff fc53 	bl	80019bc <displayWelcome>
					transactionState = 1;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <main+0x284>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
			break;
 800211c:	e007      	b.n	800212e <main+0x27a>
		default:
			break;
 800211e:	bf00      	nop
 8002120:	e6e0      	b.n	8001ee4 <main+0x30>
			break;
 8002122:	bf00      	nop
 8002124:	e6de      	b.n	8001ee4 <main+0x30>
			break;
 8002126:	bf00      	nop
 8002128:	e6dc      	b.n	8001ee4 <main+0x30>
			break;
 800212a:	bf00      	nop
 800212c:	e6da      	b.n	8001ee4 <main+0x30>
			break;
 800212e:	bf00      	nop
	while (1) {
 8002130:	e6d8      	b.n	8001ee4 <main+0x30>
 8002132:	bf00      	nop
 8002134:	08011b20 	.word	0x08011b20
 8002138:	20000000 	.word	0x20000000
 800213c:	20000a4c 	.word	0x20000a4c
 8002140:	08011b3c 	.word	0x08011b3c
 8002144:	08011b4c 	.word	0x08011b4c
 8002148:	08011b58 	.word	0x08011b58
 800214c:	08011b6c 	.word	0x08011b6c
 8002150:	20000004 	.word	0x20000004
 8002154:	08011b80 	.word	0x08011b80
 8002158:	20000008 	.word	0x20000008
 800215c:	08011b98 	.word	0x08011b98

08002160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0ac      	sub	sp, #176	; 0xb0
 8002164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002166:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800216a:	2244      	movs	r2, #68	; 0x44
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fd44 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2254      	movs	r2, #84	; 0x54
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fd36 	bl	8006bfc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002190:	f000 ff36 	bl	8003000 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002194:	4b35      	ldr	r3, [pc, #212]	; (800226c <SystemClock_Config+0x10c>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <SystemClock_Config+0x10c>)
 800219c:	f023 0318 	bic.w	r3, r3, #24
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80021a4:	231c      	movs	r3, #28
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021a8:	2301      	movs	r3, #1
 80021aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021be:	2360      	movs	r3, #96	; 0x60
 80021c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80021d6:	2310      	movs	r3, #16
 80021d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021dc:	2307      	movs	r3, #7
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 ff78 	bl	80030e8 <HAL_RCC_OscConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80021fe:	f000 f99b 	bl	8002538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002202:	230f      	movs	r3, #15
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002206:	2303      	movs	r3, #3
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fb83 	bl	8003928 <HAL_RCC_ClockConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002228:	f000 f986 	bl	8002538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 800222c:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8002230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fd78 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800224a:	f000 f975 	bl	8002538 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800224e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002252:	f000 fef3 	bl	800303c <HAL_PWREx_ControlVoltageScaling>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800225c:	f000 f96c 	bl	8002538 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002260:	f001 ff5c 	bl	800411c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002264:	bf00      	nop
 8002266:	37b0      	adds	r7, #176	; 0xb0
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000

08002270 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <MX_RTC_Init+0xb0>)
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <MX_RTC_Init+0xb4>)
 800228c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <MX_RTC_Init+0xb0>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <MX_RTC_Init+0xb0>)
 8002296:	227f      	movs	r2, #127	; 0x7f
 8002298:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_RTC_Init+0xb0>)
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <MX_RTC_Init+0xb0>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <MX_RTC_Init+0xb0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <MX_RTC_Init+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <MX_RTC_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022b8:	4819      	ldr	r0, [pc, #100]	; (8002320 <MX_RTC_Init+0xb0>)
 80022ba:	f002 f831 	bl	8004320 <HAL_RTC_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80022c4:	f000 f938 	bl	8002538 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2201      	movs	r2, #1
 80022e0:	4619      	mov	r1, r3
 80022e2:	480f      	ldr	r0, [pc, #60]	; (8002320 <MX_RTC_Init+0xb0>)
 80022e4:	f002 f897 	bl	8004416 <HAL_RTC_SetTime>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80022ee:	f000 f923 	bl	8002538 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022f2:	2301      	movs	r3, #1
 80022f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022f6:	2301      	movs	r3, #1
 80022f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80022fe:	2300      	movs	r3, #0
 8002300:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002302:	463b      	mov	r3, r7
 8002304:	2201      	movs	r2, #1
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_RTC_Init+0xb0>)
 800230a:	f002 f921 	bl	8004550 <HAL_RTC_SetDate>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002314:	f000 f910 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000ab0 	.word	0x20000ab0
 8002324:	40002800 	.word	0x40002800

08002328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b096      	sub	sp, #88	; 0x58
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	615a      	str	r2, [r3, #20]
 800234c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	222c      	movs	r2, #44	; 0x2c
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f004 fc51 	bl	8006bfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <MX_TIM1_Init+0x114>)
 800235c:	4a38      	ldr	r2, [pc, #224]	; (8002440 <MX_TIM1_Init+0x118>)
 800235e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <MX_TIM1_Init+0x114>)
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <MX_TIM1_Init+0x114>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800236c:	4b33      	ldr	r3, [pc, #204]	; (800243c <MX_TIM1_Init+0x114>)
 800236e:	2264      	movs	r2, #100	; 0x64
 8002370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <MX_TIM1_Init+0x114>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <MX_TIM1_Init+0x114>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <MX_TIM1_Init+0x114>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002384:	482d      	ldr	r0, [pc, #180]	; (800243c <MX_TIM1_Init+0x114>)
 8002386:	f002 fa82 	bl	800488e <HAL_TIM_PWM_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002390:	f000 f8d2 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023a4:	4619      	mov	r1, r3
 80023a6:	4825      	ldr	r0, [pc, #148]	; (800243c <MX_TIM1_Init+0x114>)
 80023a8:	f003 f916 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80023b2:	f000 f8c1 	bl	8002538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b6:	2360      	movs	r3, #96	; 0x60
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d6:	2200      	movs	r2, #0
 80023d8:	4619      	mov	r1, r3
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <MX_TIM1_Init+0x114>)
 80023dc:	f002 faae 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80023e6:	f000 f8a7 	bl	8002538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002402:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800240c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <MX_TIM1_Init+0x114>)
 8002420:	f003 f940 	bl	80056a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800242a:	f000 f885 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_TIM1_Init+0x114>)
 8002430:	f000 f8ea 	bl	8002608 <HAL_TIM_MspPostInit>

}
 8002434:	bf00      	nop
 8002436:	3758      	adds	r7, #88	; 0x58
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000ad4 	.word	0x20000ad4
 8002440:	40012c00 	.word	0x40012c00

08002444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_USART2_UART_Init+0x58>)
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <MX_USART2_UART_Init+0x5c>)
 800244c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_USART2_UART_Init+0x58>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART2_UART_Init+0x58>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART2_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002488:	f003 f9a9 	bl	80057de <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002492:	f000 f851 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000b20 	.word	0x20000b20
 80024a0:	40004400 	.word	0x40004400

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_GPIO_Init+0x8c>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8002502:	2200      	movs	r2, #0
 8002504:	21fb      	movs	r1, #251	; 0xfb
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <MX_GPIO_Init+0x90>)
 8002508:	f000 fd62 	bl	8002fd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 800250c:	23fb      	movs	r3, #251	; 0xfb
 800250e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_GPIO_Init+0x90>)
 8002524:	f000 fbd2 	bl	8002ccc <HAL_GPIO_Init>

}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	48000400 	.word	0x48000400

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x44>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_MspInit+0x44>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6613      	str	r3, [r2, #96]	; 0x60
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_MspInit+0x44>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_MspInit+0x44>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_MspInit+0x44>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_MspInit+0x44>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_RTC_MspInit+0x30>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d107      	bne.n	80025b2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_RTC_MspInit+0x34>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_RTC_MspInit+0x34>)
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40002800 	.word	0x40002800
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_TIM_PWM_MspInit+0x38>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10b      	bne.n	80025f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e4:	6613      	str	r3, [r2, #96]	; 0x60
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_TIM_MspPostInit+0x64>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d11c      	bne.n	8002664 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_TIM_MspPostInit+0x68>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_TIM_MspPostInit+0x68>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_TIM_MspPostInit+0x68>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002660:	f000 fb34 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_UART_MspInit+0xa0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d13a      	bne.n	800270c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_UART_MspInit+0xa4>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_UART_MspInit+0xa4>)
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_UART_MspInit+0xa4>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_UART_MspInit+0xa4>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_UART_MspInit+0xa4>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_UART_MspInit+0xa4>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80026c6:	2304      	movs	r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d6:	2307      	movs	r3, #7
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e4:	f000 faf2 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80026e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80026fa:	2303      	movs	r3, #3
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002708:	f000 fae0 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40004400 	.word	0x40004400
 8002718:	40021000 	.word	0x40021000

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 f982 	bl	8002a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	return 1;
 800277c:	2301      	movs	r3, #1
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_kill>:

int _kill(int pid, int sig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002792:	f003 fd51 	bl	8006238 <__errno>
 8002796:	4603      	mov	r3, r0
 8002798:	2216      	movs	r2, #22
 800279a:	601a      	str	r2, [r3, #0]
	return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_exit>:

void _exit (int status)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe7 	bl	8002788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ba:	e7fe      	b.n	80027ba <_exit+0x12>

080027bc <_read>:
}

int _read (int file, char *ptr, int len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 80027c8:	2301      	movs	r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <_read+0x38>)
 80027d8:	f003 f8e3 	bl	80059a2 <HAL_UART_Receive>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	607b      	str	r3, [r7, #4]

	return len;
 80027e8:	687b      	ldr	r3, [r7, #4]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000b20 	.word	0x20000b20

080027f8 <_write>:

int _write(int file, char *ptr, int len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	b29a      	uxth	r2, r3
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4809      	ldr	r0, [pc, #36]	; (8002838 <_write+0x40>)
 8002814:	f003 f831 	bl	800587a <HAL_UART_Transmit>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d002      	beq.n	8002828 <_write+0x30>
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d101      	bne.n	800282c <_write+0x34>
	{
		Error_Handler();
 8002828:	f7ff fe86 	bl	8002538 <Error_Handler>
	}

	return len;
 800282c:	687b      	ldr	r3, [r7, #4]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000b20 	.word	0x20000b20

0800283c <_close>:



int _close(int file)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002864:	605a      	str	r2, [r3, #4]
	return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_isatty>:

int _isatty(int file)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
	return 0;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f003 fcb0 	bl	8006238 <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20010000 	.word	0x20010000
 8002904:	00000400 	.word	0x00000400
 8002908:	20000a54 	.word	0x20000a54
 800290c:	20000bb8 	.word	0x20000bb8

08002910 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <SystemInit+0x64>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <SystemInit+0x64>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <SystemInit+0x68>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <SystemInit+0x68>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <SystemInit+0x68>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <SystemInit+0x68>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <SystemInit+0x68>)
 800293c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002940:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002944:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <SystemInit+0x68>)
 8002948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800294c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <SystemInit+0x68>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <SystemInit+0x68>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <SystemInit+0x68>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SystemInit+0x64>)
 8002962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002966:	609a      	str	r2, [r3, #8]
#endif
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	40021000 	.word	0x40021000

0800297c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002980:	f7ff ffc6 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002984:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002986:	e003      	b.n	8002990 <LoopCopyDataInit>

08002988 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800298a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800298c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800298e:	3104      	adds	r1, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002990:	480a      	ldr	r0, [pc, #40]	; (80029bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002994:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002996:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002998:	d3f6      	bcc.n	8002988 <CopyDataInit>
	ldr	r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800299c:	e002      	b.n	80029a4 <LoopFillZerobss>

0800299e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800299e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029a0:	f842 3b04 	str.w	r3, [r2], #4

080029a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <LoopForever+0x16>)
	cmp	r2, r3
 80029a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029a8:	d3f9      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029aa:	f003 fdad 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ae:	f7ff fa81 	bl	8001eb4 <main>

080029b2 <LoopForever>:

LoopForever:
    b LoopForever
 80029b2:	e7fe      	b.n	80029b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029b4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80029b8:	080121f8 	.word	0x080121f8
	ldr	r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029c0:	20000a30 	.word	0x20000a30
	ldr	r2, =_sbss
 80029c4:	20000a30 	.word	0x20000a30
	ldr	r3, = _ebss
 80029c8:	20000bb8 	.word	0x20000bb8

080029cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_IRQHandler>

080029ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f943 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f80e 	bl	8002a00 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	e001      	b.n	80029f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f0:	f7ff fdaa 	bl	8002548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f4:	79fb      	ldrb	r3, [r7, #7]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_InitTick+0x6c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_InitTick+0x70>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_InitTick+0x6c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f941 	bl	8002cb2 <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d809      	bhi.n	8002a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 f919 	bl	8002c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_InitTick+0x74>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e007      	b.n	8002a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e004      	b.n	8002a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e001      	b.n	8002a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000018 	.word	0x20000018
 8002a70:	20000010 	.word	0x20000010
 8002a74:	20000014 	.word	0x20000014

08002a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x24>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_IncTick+0x24>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000018 	.word	0x20000018
 8002a9c:	20000ba4 	.word	0x20000ba4

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000ba4 	.word	0x20000ba4

08002ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff ffee 	bl	8002aa0 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
  {
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000018 	.word	0x20000018

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff47 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff5c 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff8e 	bl	8002bb8 <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffb0 	bl	8002c20 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	e148      	b.n	8002f6e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 813a 	beq.w	8002f68 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00b      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d007      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d08:	2b11      	cmp	r3, #17
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d130      	bne.n	8002d76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0201 	and.w	r2, r3, #1
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0xea>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b12      	cmp	r3, #18
 8002db4:	d123      	bne.n	8002dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	6939      	ldr	r1, [r7, #16]
 8002dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8094 	beq.w	8002f68 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <HAL_GPIO_Init+0x2c0>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x2c0>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <HAL_GPIO_Init+0x2c0>)
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e58:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_GPIO_Init+0x2c4>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e82:	d00d      	beq.n	8002ea0 <HAL_GPIO_Init+0x1d4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a43      	ldr	r2, [pc, #268]	; (8002f94 <HAL_GPIO_Init+0x2c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <HAL_GPIO_Init+0x1d0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a42      	ldr	r2, [pc, #264]	; (8002f98 <HAL_GPIO_Init+0x2cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_GPIO_Init+0x1cc>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e004      	b.n	8002ea2 <HAL_GPIO_Init+0x1d6>
 8002e98:	2307      	movs	r3, #7
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x1d6>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_GPIO_Init+0x1d6>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4093      	lsls	r3, r2
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eb2:	4937      	ldr	r1, [pc, #220]	; (8002f90 <HAL_GPIO_Init+0x2c4>)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee4:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f0e:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f aeaf 	bne.w	8002cdc <HAL_GPIO_Init+0x10>
  }
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	48000400 	.word	0x48000400
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e001      	b.n	8002fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_PWREx_GetVoltageRange+0x18>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40007000 	.word	0x40007000

0800303c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	d130      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d038      	beq.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2232      	movs	r2, #50	; 0x32
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9b      	lsrs	r3, r3, #18
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003080:	e002      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3b01      	subs	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d102      	bne.n	800309c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f2      	bne.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d110      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e00f      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d007      	beq.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40007000 	.word	0x40007000
 80030e0:	20000010 	.word	0x20000010
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f000 bc11 	b.w	800391e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80e4 	beq.w	80032e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_RCC_OscConfig+0x4c>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	f040 808b 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8087 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003134:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x64>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e3e8      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x7e>
 800315c:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	e005      	b.n	8003172 <HAL_RCC_OscConfig+0x8a>
 8003166:	4b86      	ldr	r3, [pc, #536]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	4293      	cmp	r3, r2
 8003174:	d223      	bcs.n	80031be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd7a 	bl	8003c74 <RCC_SetFlashLatencyFromMSIRange>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e3c9      	b.n	800391e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318a:	4b7d      	ldr	r3, [pc, #500]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b7a      	ldr	r3, [pc, #488]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4977      	ldr	r1, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e025      	b.n	800320a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	496a      	ldr	r1, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4965      	ldr	r1, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd3a 	bl	8003c74 <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e389      	b.n	800391e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320a:	f000 fc6f 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	495a      	ldr	r1, [pc, #360]	; (8003384 <HAL_RCC_OscConfig+0x29c>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_OscConfig+0x2a0>)
 8003228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x2a4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fbe6 	bl	8002a00 <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d052      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	e36d      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d032      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4c      	ldr	r2, [pc, #304]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003256:	f7ff fc23 	bl	8002aa0 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325e:	f7ff fc1f 	bl	8002aa0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e356      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327c:	4b40      	ldr	r3, [pc, #256]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	493a      	ldr	r1, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	4935      	ldr	r1, [pc, #212]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e01a      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032bc:	f7ff fbf0 	bl	8002aa0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c4:	f7ff fbec 	bl	8002aa0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e323      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1dc>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d073      	beq.n	80033da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x21c>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d10e      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d063      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e300      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x24c>
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0x288>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x270>
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x288>
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7ff fb92 	bl	8002aa0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337e:	e010      	b.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
 8003380:	40021000 	.word	0x40021000
 8003384:	08011bb4 	.word	0x08011bb4
 8003388:	20000010 	.word	0x20000010
 800338c:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff fb86 	bl	8002aa0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e2bd      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	4baf      	ldr	r3, [pc, #700]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x2a8>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7ff fb76 	bl	8002aa0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7ff fb72 	bl	8002aa0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2a9      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	4ba5      	ldr	r3, [pc, #660]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2d0>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d060      	beq.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x310>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d116      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x328>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e286      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b93      	ldr	r3, [pc, #588]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4990      	ldr	r1, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003424:	e040      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d023      	beq.n	8003476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342e:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8b      	ldr	r2, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7ff fb31 	bl	8002aa0 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7ff fb2d 	bl	8002aa0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e264      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	4b82      	ldr	r3, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	497c      	ldr	r1, [pc, #496]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e018      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b7a      	ldr	r3, [pc, #488]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a79      	ldr	r2, [pc, #484]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800347c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7ff fb0d 	bl	8002aa0 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7ff fb09 	bl	8002aa0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e240      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349c:	4b70      	ldr	r3, [pc, #448]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03c      	beq.n	800352e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7ff fae8 	bl	8002aa0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7ff fae4 	bl	8002aa0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e21b      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3ec>
 80034f4:	e01b      	b.n	800352e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7ff facb 	bl	8002aa0 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7ff fac7 	bl	8002aa0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1fe      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ef      	bne.n	800350e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a6 	beq.w	8003688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b44      	ldr	r3, [pc, #272]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a43      	ldr	r2, [pc, #268]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003580:	f7ff fa8e 	bl	8002aa0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7ff fa8a 	bl	8002aa0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1c1      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4d8>
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035be:	e024      	b.n	800360a <HAL_RCC_OscConfig+0x522>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d110      	bne.n	80035ea <HAL_RCC_OscConfig+0x502>
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e8:	e00f      	b.n	800360a <HAL_RCC_OscConfig+0x522>
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7ff fa45 	bl	8002aa0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7ff fa41 	bl	8002aa0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e176      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ed      	beq.n	800361a <HAL_RCC_OscConfig+0x532>
 800363e:	e01a      	b.n	8003676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7ff fa2e 	bl	8002aa0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003646:	e00f      	b.n	8003668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7ff fa2a 	bl	8002aa0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d906      	bls.n	8003668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e15f      	b.n	800391e <HAL_RCC_OscConfig+0x836>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003668:	4baa      	ldr	r3, [pc, #680]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e8      	bne.n	8003648 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4ba5      	ldr	r3, [pc, #660]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4aa4      	ldr	r2, [pc, #656]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03c      	beq.n	800370e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369c:	4b9d      	ldr	r3, [pc, #628]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a2:	4a9c      	ldr	r2, [pc, #624]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7ff f9f8 	bl	8002aa0 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7ff f9f4 	bl	8002aa0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e12b      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	4b93      	ldr	r3, [pc, #588]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80036c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <HAL_RCC_OscConfig+0x5cc>
 80036d4:	e01b      	b.n	800370e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d6:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80036d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036dc:	4a8d      	ldr	r2, [pc, #564]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7ff f9db 	bl	8002aa0 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ee:	f7ff f9d7 	bl	8002aa0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e10e      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	4b84      	ldr	r3, [pc, #528]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8102 	beq.w	800391c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b02      	cmp	r3, #2
 800371e:	f040 80c5 	bne.w	80038ac <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003722:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	429a      	cmp	r2, r3
 8003734:	d12c      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	3b01      	subs	r3, #1
 8003742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d123      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d11b      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d113      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d109      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d067      	beq.n	8003860 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d062      	beq.n	800385c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0bb      	b.n	800391e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037a6:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b2:	f7ff f975 	bl	8002aa0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7ff f971 	bl	8002aa0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0a8      	b.n	800391e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	4b51      	ldr	r3, [pc, #324]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_RCC_OscConfig+0x830>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037e8:	3a01      	subs	r2, #1
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003806:	0852      	lsrs	r2, r2, #1
 8003808:	3a01      	subs	r2, #1
 800380a:	0652      	lsls	r2, r2, #25
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003812:	06d2      	lsls	r2, r2, #27
 8003814:	430a      	orrs	r2, r1
 8003816:	493f      	ldr	r1, [pc, #252]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a39      	ldr	r2, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003834:	f7ff f934 	bl	8002aa0 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7ff f930 	bl	8002aa0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e067      	b.n	800391e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385a:	e05f      	b.n	800391c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e05e      	b.n	800391e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d157      	bne.n	800391c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 800387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003884:	f7ff f90c 	bl	8002aa0 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7ff f908 	bl	8002aa0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e03f      	b.n	800391e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x7a4>
 80038aa:	e037      	b.n	800391c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d02d      	beq.n	800390e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038bc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a11      	ldr	r2, [pc, #68]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038d0:	f023 0303 	bic.w	r3, r3, #3
 80038d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 80038dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7ff f8db 	bl	8002aa0 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7ff f8d7 	bl	8002aa0 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e00e      	b.n	800391e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCC_OscConfig+0x82c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x806>
 800390c:	e006      	b.n	800391c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e005      	b.n	800391e <HAL_RCC_OscConfig+0x836>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0c8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d910      	bls.n	800396c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4961      	ldr	r1, [pc, #388]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b0      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04c      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003980:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e09e      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d115      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e092      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e086      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e07e      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d0:	4b42      	ldr	r3, [pc, #264]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 0203 	bic.w	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	493f      	ldr	r1, [pc, #252]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e2:	f7ff f85d 	bl	8002aa0 <HAL_GetTick>
 80039e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ea:	f7ff f859 	bl	8002aa0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e066      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 020c 	and.w	r2, r3, #12
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d1eb      	bne.n	80039ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1e:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	492c      	ldr	r1, [pc, #176]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d210      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e036      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4918      	ldr	r1, [pc, #96]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4910      	ldr	r1, [pc, #64]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a9e:	f000 f825 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCC_ClockConfig+0x1b4>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490c      	ldr	r1, [pc, #48]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe ff9c 	bl	8002a00 <HAL_InitTick>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	72fb      	strb	r3, [r7, #11]

  return status;
 8003acc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08011bb4 	.word	0x08011bb4
 8003ae4:	20000010 	.word	0x20000010
 8003ae8:	20000014 	.word	0x20000014

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b04:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d121      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d11e      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b20:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e005      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e004      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d134      	bne.n	8003be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d003      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0xac>
 8003b90:	e005      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b94:	617b      	str	r3, [r7, #20]
      break;
 8003b96:	e005      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b9a:	617b      	str	r3, [r7, #20]
      break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	617b      	str	r3, [r7, #20]
      break;
 8003ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	fb02 f203 	mul.w	r2, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0e5b      	lsrs	r3, r3, #25
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003be4:	69bb      	ldr	r3, [r7, #24]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	08011bcc 	.word	0x08011bcc
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	007a1200 	.word	0x007a1200

08003c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000010 	.word	0x20000010

08003c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c20:	f7ff fff0 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08011bc4 	.word	0x08011bc4

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c4c:	f7ff ffda 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0adb      	lsrs	r3, r3, #11
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08011bc4 	.word	0x08011bc4

08003c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c8c:	f7ff f9c8 	bl	8003020 <HAL_PWREx_GetVoltageRange>
 8003c90:	6178      	str	r0, [r7, #20]
 8003c92:	e014      	b.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca0:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cac:	f7ff f9b8 	bl	8003020 <HAL_PWREx_GetVoltageRange>
 8003cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d10b      	bne.n	8003cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	d919      	bls.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2ba0      	cmp	r3, #160	; 0xa0
 8003cd0:	d902      	bls.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e013      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	e010      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d902      	bls.n	8003cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e00a      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d102      	bne.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e004      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d101      	bne.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 0207 	bic.w	r2, r3, #7
 8003d08:	4909      	ldr	r1, [pc, #36]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40022000 	.word	0x40022000

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d58:	d01a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d5e:	d814      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d68:	d10f      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d6a:	4bac      	ldr	r3, [pc, #688]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4aab      	ldr	r2, [pc, #684]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d76:	e00c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f9dc 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d98:	4ba0      	ldr	r3, [pc, #640]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	499d      	ldr	r1, [pc, #628]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8099 	beq.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dc6:	4b95      	ldr	r3, [pc, #596]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	4a8e      	ldr	r2, [pc, #568]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	; 0x58
 8003de8:	4b8c      	ldr	r3, [pc, #560]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df4:	2301      	movs	r3, #1
 8003df6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df8:	4b89      	ldr	r3, [pc, #548]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a88      	ldr	r2, [pc, #544]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e04:	f7fe fe4c 	bl	8002aa0 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0a:	e009      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0c:	f7fe fe48 	bl	8002aa0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d902      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e1e:	e005      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e20:	4b7f      	ldr	r3, [pc, #508]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ef      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d155      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e32:	4b7a      	ldr	r3, [pc, #488]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d019      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5a:	4b70      	ldr	r3, [pc, #448]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e7a:	4a68      	ldr	r2, [pc, #416]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d016      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fe08 	bl	8002aa0 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	e00b      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe fe04 	bl	8002aa0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d902      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	74fb      	strb	r3, [r7, #19]
            break;
 8003eaa:	e006      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ec      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec0:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	4953      	ldr	r1, [pc, #332]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed6:	e004      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	74bb      	strb	r3, [r7, #18]
 8003edc:	e001      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee2:	7c7b      	ldrb	r3, [r7, #17]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	4a4b      	ldr	r2, [pc, #300]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4943      	ldr	r1, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 020c 	bic.w	r2, r3, #12
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	493a      	ldr	r1, [pc, #232]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f44:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	4932      	ldr	r1, [pc, #200]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	4929      	ldr	r1, [pc, #164]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4921      	ldr	r1, [pc, #132]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003faa:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4918      	ldr	r1, [pc, #96]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4910      	ldr	r1, [pc, #64]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d02c      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	4907      	ldr	r1, [pc, #28]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d10a      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004018:	60d3      	str	r3, [r2, #12]
 800401a:	e015      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f881 	bl	800413c <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d028      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004054:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	492d      	ldr	r1, [pc, #180]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004072:	d106      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a27      	ldr	r2, [pc, #156]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407e:	60d3      	str	r3, [r2, #12]
 8004080:	e011      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800408a:	d10c      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f852 	bl	800413c <RCCEx_PLLSAI1_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01c      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b2:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	4915      	ldr	r1, [pc, #84]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f82f 	bl	800413c <RCCEx_PLLSAI1_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4904      	ldr	r1, [pc, #16]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800410e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000

0800411c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a04      	ldr	r2, [pc, #16]	; (8004138 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414a:	4b74      	ldr	r3, [pc, #464]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004156:	4b71      	ldr	r3, [pc, #452]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
       ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800416e:	4b6b      	ldr	r3, [pc, #428]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
       ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d047      	beq.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	e044      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d018      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0x86>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d825      	bhi.n	80041e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d002      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x62>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d009      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0x74>
 800419c:	e020      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11d      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ae:	e01a      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b0:	4b5a      	ldr	r3, [pc, #360]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e013      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c2:	4b56      	ldr	r3, [pc, #344]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ce:	4b53      	ldr	r3, [pc, #332]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041de:	e006      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e004      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	430b      	orrs	r3, r1
 800420c:	4943      	ldr	r1, [pc, #268]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d17c      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004218:	4b40      	ldr	r3, [pc, #256]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3f      	ldr	r2, [pc, #252]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800421e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fe fc3c 	bl	8002aa0 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800422a:	e009      	b.n	8004240 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800422c:	f7fe fc38 	bl	8002aa0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	73fb      	strb	r3, [r7, #15]
        break;
 800423e:	e005      	b.n	800424c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d15f      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d110      	bne.n	800427a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	06d2      	lsls	r2, r2, #27
 8004270:	430a      	orrs	r2, r1
 8004272:	492a      	ldr	r1, [pc, #168]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
 8004278:	e027      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d112      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6912      	ldr	r2, [r2, #16]
 8004296:	0852      	lsrs	r2, r2, #1
 8004298:	3a01      	subs	r2, #1
 800429a:	0552      	lsls	r2, r2, #21
 800429c:	430a      	orrs	r2, r1
 800429e:	491f      	ldr	r1, [pc, #124]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	610b      	str	r3, [r1, #16]
 80042a4:	e011      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6892      	ldr	r2, [r2, #8]
 80042b6:	0211      	lsls	r1, r2, #8
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6952      	ldr	r2, [r2, #20]
 80042bc:	0852      	lsrs	r2, r2, #1
 80042be:	3a01      	subs	r2, #1
 80042c0:	0652      	lsls	r2, r2, #25
 80042c2:	430a      	orrs	r2, r1
 80042c4:	4915      	ldr	r1, [pc, #84]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe fbe3 	bl	8002aa0 <HAL_GetTick>
 80042da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042dc:	e009      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042de:	f7fe fbdf 	bl	8002aa0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	73fb      	strb	r3, [r7, #15]
          break;
 80042f0:	e005      	b.n	80042fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ef      	beq.n	80042de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d06c      	beq.n	800440c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe f922 	bl	8002590 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	22ca      	movs	r2, #202	; 0xca
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2253      	movs	r2, #83	; 0x53
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f9a0 	bl	80046aa <RTC_EnterInitMode>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d14b      	bne.n	800440c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004386:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68d2      	ldr	r2, [r2, #12]
 80043ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6919      	ldr	r1, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	041a      	lsls	r2, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f9a3 	bl	8004710 <RTC_ExitInitMode>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11b      	bne.n	800440c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0203 	bic.w	r2, r2, #3
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	22ff      	movs	r2, #255	; 0xff
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004416:	b590      	push	{r4, r7, lr}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_RTC_SetTime+0x1a>
 800442c:	2302      	movs	r3, #2
 800442e:	e08b      	b.n	8004548 <HAL_RTC_SetTime+0x132>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	22ca      	movs	r2, #202	; 0xca
 8004446:	625a      	str	r2, [r3, #36]	; 0x24
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2253      	movs	r2, #83	; 0x53
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f92a 	bl	80046aa <RTC_EnterInitMode>
 8004456:	4603      	mov	r3, r0
 8004458:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d163      	bne.n	8004528 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d126      	bne.n	80044b4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f984 	bl	800478c <RTC_ByteToBcd2>
 8004484:	4603      	mov	r3, r0
 8004486:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f97d 	bl	800478c <RTC_ByteToBcd2>
 8004492:	4603      	mov	r3, r0
 8004494:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004496:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	789b      	ldrb	r3, [r3, #2]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f975 	bl	800478c <RTC_ByteToBcd2>
 80044a2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044a4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	78db      	ldrb	r3, [r3, #3]
 80044ac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e018      	b.n	80044e6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2200      	movs	r2, #0
 80044c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044d4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044da:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	78db      	ldrb	r3, [r3, #3]
 80044e0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f8f6 	bl	8004710 <RTC_ExitInitMode>
 8004524:	4603      	mov	r3, r0
 8004526:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004546:	7cfb      	ldrb	r3, [r7, #19]
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}

08004550 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_RTC_SetDate+0x1a>
 8004566:	2302      	movs	r3, #2
 8004568:	e075      	b.n	8004656 <HAL_RTC_SetDate+0x106>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10e      	bne.n	800459e <HAL_RTC_SetDate+0x4e>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	b2db      	uxtb	r3, r3
 8004596:	330a      	adds	r3, #10
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d11c      	bne.n	80045de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	78db      	ldrb	r3, [r3, #3]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f8ef 	bl	800478c <RTC_ByteToBcd2>
 80045ae:	4603      	mov	r3, r0
 80045b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8e8 	bl	800478c <RTC_ByteToBcd2>
 80045bc:	4603      	mov	r3, r0
 80045be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	789b      	ldrb	r3, [r3, #2]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f8e0 	bl	800478c <RTC_ByteToBcd2>
 80045cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e00e      	b.n	80045fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	78db      	ldrb	r3, [r3, #3]
 80045e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80045f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	22ca      	movs	r2, #202	; 0xca
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2253      	movs	r2, #83	; 0x53
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f84c 	bl	80046aa <RTC_EnterInitMode>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10c      	bne.n	8004636 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800462a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f86f 	bl	8004710 <RTC_ExitInitMode>
 8004632:	4603      	mov	r3, r0
 8004634:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd90      	pop	{r4, r7, pc}

0800465e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004674:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004676:	f7fe fa13 	bl	8002aa0 <HAL_GetTick>
 800467a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800467c:	e009      	b.n	8004692 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800467e:	f7fe fa0f 	bl	8002aa0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800468c:	d901      	bls.n	8004692 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e007      	b.n	80046a2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d120      	bne.n	8004706 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046ce:	f7fe f9e7 	bl	8002aa0 <HAL_GetTick>
 80046d2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80046d4:	e00d      	b.n	80046f2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046d6:	f7fe f9e3 	bl	8002aa0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e4:	d905      	bls.n	80046f2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <RTC_EnterInitMode+0x5c>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d1e7      	bne.n	80046d6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <RTC_ExitInitMode+0x78>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <RTC_ExitInitMode+0x78>)
 8004722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004726:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004728:	4b17      	ldr	r3, [pc, #92]	; (8004788 <RTC_ExitInitMode+0x78>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10c      	bne.n	800474e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff92 	bl	800465e <HAL_RTC_WaitForSynchro>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01e      	beq.n	800477e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2203      	movs	r2, #3
 8004744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e017      	b.n	800477e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <RTC_ExitInitMode+0x78>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <RTC_ExitInitMode+0x78>)
 8004754:	f023 0320 	bic.w	r3, r3, #32
 8004758:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff7f 	bl	800465e <HAL_RTC_WaitForSynchro>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <RTC_ExitInitMode+0x78>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <RTC_ExitInitMode+0x78>)
 8004778:	f043 0320 	orr.w	r3, r3, #32
 800477c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40002800 	.word	0x40002800

0800478c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800479e:	e005      	b.n	80047ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	3b0a      	subs	r3, #10
 80047aa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80047ac:	7afb      	ldrb	r3, [r7, #11]
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	d8f6      	bhi.n	80047a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	7afb      	ldrb	r3, [r7, #11]
 80047bc:	4313      	orrs	r3, r2
 80047be:	b2db      	uxtb	r3, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e049      	b.n	8004872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f841 	bl	800487a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fa6c 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e049      	b.n	8004934 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fd fe87 	bl	80025c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fa0b 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004952:	2302      	movs	r3, #2
 8004954:	e0fd      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b14      	cmp	r3, #20
 8004962:	f200 80f0 	bhi.w	8004b46 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	080049c1 	.word	0x080049c1
 8004970:	08004b47 	.word	0x08004b47
 8004974:	08004b47 	.word	0x08004b47
 8004978:	08004b47 	.word	0x08004b47
 800497c:	08004a01 	.word	0x08004a01
 8004980:	08004b47 	.word	0x08004b47
 8004984:	08004b47 	.word	0x08004b47
 8004988:	08004b47 	.word	0x08004b47
 800498c:	08004a43 	.word	0x08004a43
 8004990:	08004b47 	.word	0x08004b47
 8004994:	08004b47 	.word	0x08004b47
 8004998:	08004b47 	.word	0x08004b47
 800499c:	08004a83 	.word	0x08004a83
 80049a0:	08004b47 	.word	0x08004b47
 80049a4:	08004b47 	.word	0x08004b47
 80049a8:	08004b47 	.word	0x08004b47
 80049ac:	08004ac5 	.word	0x08004ac5
 80049b0:	08004b47 	.word	0x08004b47
 80049b4:	08004b47 	.word	0x08004b47
 80049b8:	08004b47 	.word	0x08004b47
 80049bc:	08004b05 	.word	0x08004b05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f9f2 	bl	8004db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0204 	bic.w	r2, r2, #4
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
      break;
 80049fe:	e0a3      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa4e 	bl	8004ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]
      break;
 8004a40:	e082      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 faa7 	bl	8004f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0208 	orr.w	r2, r2, #8
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	61da      	str	r2, [r3, #28]
      break;
 8004a80:	e062      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 faff 	bl	800508c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	61da      	str	r2, [r3, #28]
      break;
 8004ac2:	e041      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fb3c 	bl	8005148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b02:	e021      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb74 	bl	80051f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b44:	e000      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004b46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_ConfigClockSource+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0b5      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x184>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d03e      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0xd4>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	f200 8087 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	f000 8085 	beq.w	8004ccc <HAL_TIM_ConfigClockSource+0x170>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d87f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d01a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xa6>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d87b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d050      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d877      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d03c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xfa>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d873      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d058      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x13a>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d86f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d064      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d86b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d060      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d867      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d05a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c00:	e062      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f000 fbc5 	bl	80053a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	609a      	str	r2, [r3, #8]
      break;
 8004c2e:	e04e      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f000 fbae 	bl	80053a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	609a      	str	r2, [r3, #8]
      break;
 8004c54:	e03b      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fb22 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2150      	movs	r1, #80	; 0x50
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb7b 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e02b      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fb41 	bl	800530a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2160      	movs	r1, #96	; 0x60
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb6b 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004c94:	e01b      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fb02 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fb5b 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e00b      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 fb52 	bl	800536a <TIM_ITRx_SetConfig>
        break;
 8004cc6:	e002      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <TIM_Base_SetConfig+0xbc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x20>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <TIM_Base_SetConfig+0xbc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <TIM_Base_SetConfig+0x52>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d007      	beq.n	8004d3a <TIM_Base_SetConfig+0x52>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <TIM_Base_SetConfig+0xc0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0x52>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <TIM_Base_SetConfig+0xc4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <TIM_Base_SetConfig+0xbc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_Base_SetConfig+0xa0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <TIM_Base_SetConfig+0xc0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0xa0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <TIM_Base_SetConfig+0xc4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40014400 	.word	0x40014400

08004db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0302 	bic.w	r3, r3, #2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <TIM_OC1_SetConfig+0xec>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_OC1_SetConfig+0x70>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a23      	ldr	r2, [pc, #140]	; (8004ea0 <TIM_OC1_SetConfig+0xf0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC1_SetConfig+0x70>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <TIM_OC1_SetConfig+0xf4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0308 	bic.w	r3, r3, #8
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <TIM_OC1_SetConfig+0xec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_OC1_SetConfig+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <TIM_OC1_SetConfig+0xf0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_OC1_SetConfig+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <TIM_OC1_SetConfig+0xf4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d111      	bne.n	8004e76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	40014400 	.word	0x40014400

08004ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0210 	bic.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <TIM_OC2_SetConfig+0xe8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10d      	bne.n	8004f28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <TIM_OC2_SetConfig+0xe8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC2_SetConfig+0x98>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <TIM_OC2_SetConfig+0xec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0x98>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <TIM_OC2_SetConfig+0xf0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400

08004f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a21      	ldr	r2, [pc, #132]	; (8005080 <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10d      	bne.n	800501a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <TIM_OC3_SetConfig+0xe4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_OC3_SetConfig+0x96>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a17      	ldr	r2, [pc, #92]	; (8005084 <TIM_OC3_SetConfig+0xe8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC3_SetConfig+0x96>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <TIM_OC3_SetConfig+0xec>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d113      	bne.n	800505a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400

0800508c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a14      	ldr	r2, [pc, #80]	; (800513c <TIM_OC4_SetConfig+0xb0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC4_SetConfig+0x74>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <TIM_OC4_SetConfig+0xb4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC4_SetConfig+0x74>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <TIM_OC4_SetConfig+0xb8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d109      	bne.n	8005114 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400

08005148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800518c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <TIM_OC5_SetConfig+0xa4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC5_SetConfig+0x6a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <TIM_OC5_SetConfig+0xa8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC5_SetConfig+0x6a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <TIM_OC5_SetConfig+0xac>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d109      	bne.n	80051c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400

080051f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800523e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	051b      	lsls	r3, r3, #20
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC6_SetConfig+0xa8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_OC6_SetConfig+0x6c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <TIM_OC6_SetConfig+0xac>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC6_SetConfig+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <TIM_OC6_SetConfig+0xb0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d109      	bne.n	8005278 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	029b      	lsls	r3, r3, #10
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0210 	bic.w	r2, r3, #16
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	f043 0307 	orr.w	r3, r3, #7
 800538c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_TIMEx_PWMN_Start+0x24>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e022      	b.n	800544a <HAL_TIMEx_PWMN_Start+0x6a>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b04      	cmp	r3, #4
 8005408:	d109      	bne.n	800541e <HAL_TIMEx_PWMN_Start+0x3e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e015      	b.n	800544a <HAL_TIMEx_PWMN_Start+0x6a>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d109      	bne.n	8005438 <HAL_TIMEx_PWMN_Start+0x58>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	bf14      	ite	ne
 8005430:	2301      	movne	r3, #1
 8005432:	2300      	moveq	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	e008      	b.n	800544a <HAL_TIMEx_PWMN_Start+0x6a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e05a      	b.n	8005508 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <HAL_TIMEx_PWMN_Start+0x82>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005460:	e013      	b.n	800548a <HAL_TIMEx_PWMN_Start+0xaa>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d104      	bne.n	8005472 <HAL_TIMEx_PWMN_Start+0x92>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005470:	e00b      	b.n	800548a <HAL_TIMEx_PWMN_Start+0xaa>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d104      	bne.n	8005482 <HAL_TIMEx_PWMN_Start+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005480:	e003      	b.n	800548a <HAL_TIMEx_PWMN_Start+0xaa>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2204      	movs	r2, #4
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f97e 	bl	8005794 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_TIMEx_PWMN_Start+0x130>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_PWMN_Start+0xe6>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_PWMN_Start+0xe6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <HAL_TIMEx_PWMN_Start+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d115      	bne.n	80054f2 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_TIMEx_PWMN_Start+0x138>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d015      	beq.n	8005504 <HAL_TIMEx_PWMN_Start+0x124>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e008      	b.n	8005504 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40014000 	.word	0x40014000
 8005518:	00010007 	.word	0x00010007

0800551c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f930 	bl	8005794 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	f241 1311 	movw	r3, #4369	; 0x1111
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <HAL_TIMEx_PWMN_Stop+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f240 4344 	movw	r3, #1092	; 0x444
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_TIMEx_PWMN_Stop+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	f241 1311 	movw	r3, #4369	; 0x1111
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10f      	bne.n	8005594 <HAL_TIMEx_PWMN_Stop+0x78>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	f240 4344 	movw	r3, #1092	; 0x444
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <HAL_TIMEx_PWMN_Stop+0x78>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_TIMEx_PWMN_Stop+0x88>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a2:	e013      	b.n	80055cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d104      	bne.n	80055b4 <HAL_TIMEx_PWMN_Stop+0x98>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b2:	e00b      	b.n	80055cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d104      	bne.n	80055c4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055c2:	e003      	b.n	80055cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e04f      	b.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a21      	ldr	r2, [pc, #132]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005620:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d004      	beq.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10c      	bne.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40014000 	.word	0x40014000

080056a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056bc:	2302      	movs	r3, #2
 80056be:	e060      	b.n	8005782 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d115      	bne.n	8005770 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	051b      	lsls	r3, r3, #20
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00

08005794 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	2204      	movs	r2, #4
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	401a      	ands	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e040      	b.n	8005872 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fc ff37 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2224      	movs	r2, #36	; 0x24
 800580a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f991 	bl	8005b44 <UART_SetConfig>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e022      	b.n	8005872 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb91 	bl	8005f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005858:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fc18 	bl	80060a0 <UART_CheckIdleState>
 8005870:	4603      	mov	r3, r0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	; 0x28
 800587e:	af02      	add	r7, sp, #8
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800588e:	2b20      	cmp	r3, #32
 8005890:	f040 8082 	bne.w	8005998 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Transmit+0x26>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e07a      	b.n	800599a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Transmit+0x38>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e073      	b.n	800599a <HAL_UART_Transmit+0x120>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2221      	movs	r2, #33	; 0x21
 80058c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c8:	f7fd f8ea 	bl	8002aa0 <HAL_GetTick>
 80058cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	d108      	bne.n	80058fa <HAL_UART_Transmit+0x80>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	e003      	b.n	8005902 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800590a:	e02d      	b.n	8005968 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2200      	movs	r2, #0
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fc0b 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e039      	b.n	800599a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	881a      	ldrh	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005938:	b292      	uxth	r2, r2
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3302      	adds	r3, #2
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e008      	b.n	8005956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	b292      	uxth	r2, r2
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3301      	adds	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1cb      	bne.n	800590c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2200      	movs	r2, #0
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fbd7 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e005      	b.n	800599a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b08a      	sub	sp, #40	; 0x28
 80059a6:	af02      	add	r7, sp, #8
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	f040 80bf 	bne.w	8005b3a <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive+0x26>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0b7      	b.n	8005b3c <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Receive+0x38>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e0b0      	b.n	8005b3c <HAL_UART_Receive+0x19a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2222      	movs	r2, #34	; 0x22
 80059ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f6:	f7fd f853 	bl	8002aa0 <HAL_GetTick>
 80059fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a14:	d10e      	bne.n	8005a34 <HAL_UART_Receive+0x92>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <HAL_UART_Receive+0x88>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a28:	e02d      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	22ff      	movs	r2, #255	; 0xff
 8005a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a32:	e028      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <HAL_UART_Receive+0xb6>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_UART_Receive+0xac>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	22ff      	movs	r2, #255	; 0xff
 8005a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a4c:	e01b      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	227f      	movs	r2, #127	; 0x7f
 8005a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a56:	e016      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a60:	d10d      	bne.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <HAL_UART_Receive+0xd2>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	227f      	movs	r2, #127	; 0x7f
 8005a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a72:	e008      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	223f      	movs	r2, #63	; 0x3f
 8005a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7c:	e003      	b.n	8005a86 <HAL_UART_Receive+0xe4>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	d108      	bne.n	8005aaa <HAL_UART_Receive+0x108>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e003      	b.n	8005ab2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005aba:	e033      	b.n	8005b24 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fb33 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e032      	b.n	8005b3c <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10c      	bne.n	8005af6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	8a7b      	ldrh	r3, [r7, #18]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3302      	adds	r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e00d      	b.n	8005b12 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	4013      	ands	r3, r2
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1c5      	bne.n	8005abc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4baf      	ldr	r3, [pc, #700]	; (8005e2c <UART_SetConfig+0x2e8>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	69f9      	ldr	r1, [r7, #28]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4aa4      	ldr	r2, [pc, #656]	; (8005e30 <UART_SetConfig+0x2ec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a9b      	ldr	r2, [pc, #620]	; (8005e34 <UART_SetConfig+0x2f0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d121      	bne.n	8005c0e <UART_SetConfig+0xca>
 8005bca:	4b9b      	ldr	r3, [pc, #620]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d817      	bhi.n	8005c08 <UART_SetConfig+0xc4>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x9c>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005bfd 	.word	0x08005bfd
 8005be8:	08005bf7 	.word	0x08005bf7
 8005bec:	08005c03 	.word	0x08005c03
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	76fb      	strb	r3, [r7, #27]
 8005bf4:	e070      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	76fb      	strb	r3, [r7, #27]
 8005bfa:	e06d      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	76fb      	strb	r3, [r7, #27]
 8005c00:	e06a      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c02:	2308      	movs	r3, #8
 8005c04:	76fb      	strb	r3, [r7, #27]
 8005c06:	e067      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e064      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a8a      	ldr	r2, [pc, #552]	; (8005e3c <UART_SetConfig+0x2f8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d132      	bne.n	8005c7e <UART_SetConfig+0x13a>
 8005c18:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d828      	bhi.n	8005c78 <UART_SetConfig+0x134>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0xe8>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005c79 	.word	0x08005c79
 8005c34:	08005c79 	.word	0x08005c79
 8005c38:	08005c79 	.word	0x08005c79
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005c79 	.word	0x08005c79
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005c67 	.word	0x08005c67
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c79 	.word	0x08005c79
 8005c5c:	08005c73 	.word	0x08005c73
 8005c60:	2300      	movs	r3, #0
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e038      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c66:	2302      	movs	r3, #2
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e035      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e032      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c72:	2308      	movs	r3, #8
 8005c74:	76fb      	strb	r3, [r7, #27]
 8005c76:	e02f      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e02c      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a6b      	ldr	r2, [pc, #428]	; (8005e30 <UART_SetConfig+0x2ec>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d125      	bne.n	8005cd4 <UART_SetConfig+0x190>
 8005c88:	4b6b      	ldr	r3, [pc, #428]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c96:	d017      	beq.n	8005cc8 <UART_SetConfig+0x184>
 8005c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c9c:	d817      	bhi.n	8005cce <UART_SetConfig+0x18a>
 8005c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca2:	d00b      	beq.n	8005cbc <UART_SetConfig+0x178>
 8005ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca8:	d811      	bhi.n	8005cce <UART_SetConfig+0x18a>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <UART_SetConfig+0x172>
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d006      	beq.n	8005cc2 <UART_SetConfig+0x17e>
 8005cb4:	e00b      	b.n	8005cce <UART_SetConfig+0x18a>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	76fb      	strb	r3, [r7, #27]
 8005cba:	e00d      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	76fb      	strb	r3, [r7, #27]
 8005cc0:	e00a      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	76fb      	strb	r3, [r7, #27]
 8005cc6:	e007      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e004      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005cce:	2310      	movs	r3, #16
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e001      	b.n	8005cd8 <UART_SetConfig+0x194>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a54      	ldr	r2, [pc, #336]	; (8005e30 <UART_SetConfig+0x2ec>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d173      	bne.n	8005dca <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ce2:	7efb      	ldrb	r3, [r7, #27]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d824      	bhi.n	8005d32 <UART_SetConfig+0x1ee>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x1ac>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d33 	.word	0x08005d33
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d33 	.word	0x08005d33
 8005d00:	08005d23 	.word	0x08005d23
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d33 	.word	0x08005d33
 8005d10:	08005d2b 	.word	0x08005d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fd ff82 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8005d18:	6178      	str	r0, [r7, #20]
        break;
 8005d1a:	e00f      	b.n	8005d3c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1c:	4b48      	ldr	r3, [pc, #288]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005d1e:	617b      	str	r3, [r7, #20]
        break;
 8005d20:	e00c      	b.n	8005d3c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d22:	f7fd fee3 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8005d26:	6178      	str	r0, [r7, #20]
        break;
 8005d28:	e008      	b.n	8005d3c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2e:	617b      	str	r3, [r7, #20]
        break;
 8005d30:	e004      	b.n	8005d3c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	76bb      	strb	r3, [r7, #26]
        break;
 8005d3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80fe 	beq.w	8005f40 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d305      	bcc.n	8005d60 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d902      	bls.n	8005d66 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	76bb      	strb	r3, [r7, #26]
 8005d64:	e0ec      	b.n	8005f40 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	020b      	lsls	r3, r1, #8
 8005d78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d7c:	0202      	lsls	r2, r0, #8
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	6849      	ldr	r1, [r1, #4]
 8005d82:	0849      	lsrs	r1, r1, #1
 8005d84:	4608      	mov	r0, r1
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	1814      	adds	r4, r2, r0
 8005d8c:	eb43 0501 	adc.w	r5, r3, r1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	461a      	mov	r2, r3
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa ffd3 	bl	8000d48 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4613      	mov	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d308      	bcc.n	8005dc4 <UART_SetConfig+0x280>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db8:	d204      	bcs.n	8005dc4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e0bd      	b.n	8005f40 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	76bb      	strb	r3, [r7, #26]
 8005dc8:	e0ba      	b.n	8005f40 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd2:	d168      	bne.n	8005ea6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005dd4:	7efb      	ldrb	r3, [r7, #27]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d834      	bhi.n	8005e44 <UART_SetConfig+0x300>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x29c>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e15 	.word	0x08005e15
 8005dec:	08005e45 	.word	0x08005e45
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e45 	.word	0x08005e45
 8005dfc:	08005e45 	.word	0x08005e45
 8005e00:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e04:	f7fd ff0a 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8005e08:	6178      	str	r0, [r7, #20]
        break;
 8005e0a:	e020      	b.n	8005e4e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fd ff1c 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8005e10:	6178      	str	r0, [r7, #20]
        break;
 8005e12:	e01c      	b.n	8005e4e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005e16:	617b      	str	r3, [r7, #20]
        break;
 8005e18:	e019      	b.n	8005e4e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fd fe67 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8005e1e:	6178      	str	r0, [r7, #20]
        break;
 8005e20:	e015      	b.n	8005e4e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	617b      	str	r3, [r7, #20]
        break;
 8005e28:	e011      	b.n	8005e4e <UART_SetConfig+0x30a>
 8005e2a:	bf00      	nop
 8005e2c:	efff69f3 	.word	0xefff69f3
 8005e30:	40008000 	.word	0x40008000
 8005e34:	40013800 	.word	0x40013800
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40004400 	.word	0x40004400
 8005e40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	76bb      	strb	r3, [r7, #26]
        break;
 8005e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d075      	beq.n	8005f40 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	005a      	lsls	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	441a      	add	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	d916      	bls.n	8005ea0 <UART_SetConfig+0x35c>
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e78:	d212      	bcs.n	8005ea0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f023 030f 	bic.w	r3, r3, #15
 8005e82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	89fa      	ldrh	r2, [r7, #14]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e04f      	b.n	8005f40 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	76bb      	strb	r3, [r7, #26]
 8005ea4:	e04c      	b.n	8005f40 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea6:	7efb      	ldrb	r3, [r7, #27]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d828      	bhi.n	8005efe <UART_SetConfig+0x3ba>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0x370>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eff 	.word	0x08005eff
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f7fd fea0 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8005edc:	6178      	str	r0, [r7, #20]
        break;
 8005ede:	e013      	b.n	8005f08 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee0:	f7fd feb2 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8005ee4:	6178      	str	r0, [r7, #20]
        break;
 8005ee6:	e00f      	b.n	8005f08 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <UART_SetConfig+0x414>)
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e00c      	b.n	8005f08 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fd fdfd 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8005ef2:	6178      	str	r0, [r7, #20]
        break;
 8005ef4:	e008      	b.n	8005f08 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efa:	617b      	str	r3, [r7, #20]
        break;
 8005efc:	e004      	b.n	8005f08 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	76bb      	strb	r3, [r7, #26]
        break;
 8005f06:	bf00      	nop
    }

    if (pclk != 0U)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d018      	beq.n	8005f40 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	085a      	lsrs	r2, r3, #1
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	441a      	add	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d908      	bls.n	8005f3c <UART_SetConfig+0x3f8>
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d204      	bcs.n	8005f3c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	e001      	b.n	8005f40 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bdb0      	pop	{r4, r5, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	00f42400 	.word	0x00f42400

08005f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01a      	beq.n	8006072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605a:	d10a      	bne.n	8006072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b0:	f7fc fcf6 	bl	8002aa0 <HAL_GetTick>
 80060b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d10e      	bne.n	80060e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f82d 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e023      	b.n	800612a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d10e      	bne.n	800610e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f817 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e00d      	b.n	800612a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	e05e      	b.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d05a      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614c:	f7fc fca8 	bl	8002aa0 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	d302      	bcc.n	8006162 <UART_WaitOnFlagUntilTimeout+0x30>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d11b      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006170:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e043      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02c      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b6:	d124      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e00f      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4013      	ands	r3, r2
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	429a      	cmp	r2, r3
 800621e:	d091      	beq.n	8006144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <ctime>:
 800622a:	b508      	push	{r3, lr}
 800622c:	f000 f990 	bl	8006550 <localtime>
 8006230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006234:	f004 be7a 	b.w	800af2c <asctime>

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	2000001c 	.word	0x2000001c

08006244 <_fpurge_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	460c      	mov	r4, r1
 8006248:	4605      	mov	r5, r0
 800624a:	b118      	cbz	r0, 8006254 <_fpurge_r+0x10>
 800624c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800624e:	b90b      	cbnz	r3, 8006254 <_fpurge_r+0x10>
 8006250:	f005 fe0e 	bl	800be70 <__sinit>
 8006254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006256:	07db      	lsls	r3, r3, #31
 8006258:	d405      	bmi.n	8006266 <_fpurge_r+0x22>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	0598      	lsls	r0, r3, #22
 800625e:	d402      	bmi.n	8006266 <_fpurge_r+0x22>
 8006260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006262:	f000 fa76 	bl	8006752 <__retarget_lock_acquire_recursive>
 8006266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626a:	b953      	cbnz	r3, 8006282 <_fpurge_r+0x3e>
 800626c:	2309      	movs	r3, #9
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006272:	07d9      	lsls	r1, r3, #31
 8006274:	d402      	bmi.n	800627c <_fpurge_r+0x38>
 8006276:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006278:	f000 fa6d 	bl	8006756 <__retarget_lock_release_recursive>
 800627c:	f04f 35ff 	mov.w	r5, #4294967295
 8006280:	e01b      	b.n	80062ba <_fpurge_r+0x76>
 8006282:	6922      	ldr	r2, [r4, #16]
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	f003 0208 	and.w	r2, r3, #8
 800628a:	b211      	sxth	r1, r2
 800628c:	b9ba      	cbnz	r2, 80062be <_fpurge_r+0x7a>
 800628e:	6061      	str	r1, [r4, #4]
 8006290:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006292:	b141      	cbz	r1, 80062a6 <_fpurge_r+0x62>
 8006294:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <_fpurge_r+0x5e>
 800629c:	4628      	mov	r0, r5
 800629e:	f000 f873 	bl	8006388 <_free_r>
 80062a2:	2300      	movs	r3, #0
 80062a4:	6323      	str	r3, [r4, #48]	; 0x30
 80062a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80062a8:	f015 0501 	ands.w	r5, r5, #1
 80062ac:	d10d      	bne.n	80062ca <_fpurge_r+0x86>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_fpurge_r+0x76>
 80062b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b6:	f000 fa4e 	bl	8006756 <__retarget_lock_release_recursive>
 80062ba:	4628      	mov	r0, r5
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
 80062be:	079a      	lsls	r2, r3, #30
 80062c0:	bf0c      	ite	eq
 80062c2:	6963      	ldreq	r3, [r4, #20]
 80062c4:	2300      	movne	r3, #0
 80062c6:	60a3      	str	r3, [r4, #8]
 80062c8:	e7ed      	b.n	80062a6 <_fpurge_r+0x62>
 80062ca:	2500      	movs	r5, #0
 80062cc:	e7f5      	b.n	80062ba <_fpurge_r+0x76>
	...

080062d0 <fpurge>:
 80062d0:	4b02      	ldr	r3, [pc, #8]	; (80062dc <fpurge+0xc>)
 80062d2:	4601      	mov	r1, r0
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f7ff bfb5 	b.w	8006244 <_fpurge_r>
 80062da:	bf00      	nop
 80062dc:	2000001c 	.word	0x2000001c

080062e0 <_malloc_trim_r>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	4606      	mov	r6, r0
 80062e6:	2008      	movs	r0, #8
 80062e8:	460c      	mov	r4, r1
 80062ea:	f001 ff31 	bl	8008150 <sysconf>
 80062ee:	4f23      	ldr	r7, [pc, #140]	; (800637c <_malloc_trim_r+0x9c>)
 80062f0:	4680      	mov	r8, r0
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 fc8a 	bl	8006c0c <__malloc_lock>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	685d      	ldr	r5, [r3, #4]
 80062fc:	f025 0503 	bic.w	r5, r5, #3
 8006300:	1b2c      	subs	r4, r5, r4
 8006302:	3c11      	subs	r4, #17
 8006304:	4444      	add	r4, r8
 8006306:	fbb4 f4f8 	udiv	r4, r4, r8
 800630a:	3c01      	subs	r4, #1
 800630c:	fb08 f404 	mul.w	r4, r8, r4
 8006310:	45a0      	cmp	r8, r4
 8006312:	dd05      	ble.n	8006320 <_malloc_trim_r+0x40>
 8006314:	4630      	mov	r0, r6
 8006316:	f000 fc7f 	bl	8006c18 <__malloc_unlock>
 800631a:	2000      	movs	r0, #0
 800631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006320:	2100      	movs	r1, #0
 8006322:	4630      	mov	r0, r6
 8006324:	f000 fcde 	bl	8006ce4 <_sbrk_r>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	442b      	add	r3, r5
 800632c:	4298      	cmp	r0, r3
 800632e:	d1f1      	bne.n	8006314 <_malloc_trim_r+0x34>
 8006330:	4261      	negs	r1, r4
 8006332:	4630      	mov	r0, r6
 8006334:	f000 fcd6 	bl	8006ce4 <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d110      	bne.n	800635e <_malloc_trim_r+0x7e>
 800633c:	2100      	movs	r1, #0
 800633e:	4630      	mov	r0, r6
 8006340:	f000 fcd0 	bl	8006ce4 <_sbrk_r>
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	1a83      	subs	r3, r0, r2
 8006348:	2b0f      	cmp	r3, #15
 800634a:	dde3      	ble.n	8006314 <_malloc_trim_r+0x34>
 800634c:	490c      	ldr	r1, [pc, #48]	; (8006380 <_malloc_trim_r+0xa0>)
 800634e:	6809      	ldr	r1, [r1, #0]
 8006350:	1a40      	subs	r0, r0, r1
 8006352:	490c      	ldr	r1, [pc, #48]	; (8006384 <_malloc_trim_r+0xa4>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6008      	str	r0, [r1, #0]
 800635a:	6053      	str	r3, [r2, #4]
 800635c:	e7da      	b.n	8006314 <_malloc_trim_r+0x34>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <_malloc_trim_r+0xa4>)
 8006362:	1b2d      	subs	r5, r5, r4
 8006364:	f045 0501 	orr.w	r5, r5, #1
 8006368:	605d      	str	r5, [r3, #4]
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	4630      	mov	r0, r6
 800636e:	1b1c      	subs	r4, r3, r4
 8006370:	6014      	str	r4, [r2, #0]
 8006372:	f000 fc51 	bl	8006c18 <__malloc_unlock>
 8006376:	2001      	movs	r0, #1
 8006378:	e7d0      	b.n	800631c <_malloc_trim_r+0x3c>
 800637a:	bf00      	nop
 800637c:	20000448 	.word	0x20000448
 8006380:	20000850 	.word	0x20000850
 8006384:	20000a58 	.word	0x20000a58

08006388 <_free_r>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	4605      	mov	r5, r0
 800638c:	460f      	mov	r7, r1
 800638e:	2900      	cmp	r1, #0
 8006390:	f000 80b1 	beq.w	80064f6 <_free_r+0x16e>
 8006394:	f000 fc3a 	bl	8006c0c <__malloc_lock>
 8006398:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800639c:	4856      	ldr	r0, [pc, #344]	; (80064f8 <_free_r+0x170>)
 800639e:	f022 0401 	bic.w	r4, r2, #1
 80063a2:	f1a7 0308 	sub.w	r3, r7, #8
 80063a6:	eb03 0c04 	add.w	ip, r3, r4
 80063aa:	6881      	ldr	r1, [r0, #8]
 80063ac:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80063b0:	4561      	cmp	r1, ip
 80063b2:	f026 0603 	bic.w	r6, r6, #3
 80063b6:	f002 0201 	and.w	r2, r2, #1
 80063ba:	d11b      	bne.n	80063f4 <_free_r+0x6c>
 80063bc:	4434      	add	r4, r6
 80063be:	b93a      	cbnz	r2, 80063d0 <_free_r+0x48>
 80063c0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	4414      	add	r4, r2
 80063c8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80063cc:	60ca      	str	r2, [r1, #12]
 80063ce:	6091      	str	r1, [r2, #8]
 80063d0:	f044 0201 	orr.w	r2, r4, #1
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	6083      	str	r3, [r0, #8]
 80063d8:	4b48      	ldr	r3, [pc, #288]	; (80064fc <_free_r+0x174>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d804      	bhi.n	80063ea <_free_r+0x62>
 80063e0:	4b47      	ldr	r3, [pc, #284]	; (8006500 <_free_r+0x178>)
 80063e2:	4628      	mov	r0, r5
 80063e4:	6819      	ldr	r1, [r3, #0]
 80063e6:	f7ff ff7b 	bl	80062e0 <_malloc_trim_r>
 80063ea:	4628      	mov	r0, r5
 80063ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063f0:	f000 bc12 	b.w	8006c18 <__malloc_unlock>
 80063f4:	f8cc 6004 	str.w	r6, [ip, #4]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d138      	bne.n	800646e <_free_r+0xe6>
 80063fc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006400:	1a5b      	subs	r3, r3, r1
 8006402:	440c      	add	r4, r1
 8006404:	6899      	ldr	r1, [r3, #8]
 8006406:	f100 0708 	add.w	r7, r0, #8
 800640a:	42b9      	cmp	r1, r7
 800640c:	d031      	beq.n	8006472 <_free_r+0xea>
 800640e:	68df      	ldr	r7, [r3, #12]
 8006410:	60cf      	str	r7, [r1, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	eb0c 0106 	add.w	r1, ip, r6
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	07c9      	lsls	r1, r1, #31
 800641c:	d40b      	bmi.n	8006436 <_free_r+0xae>
 800641e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006422:	4434      	add	r4, r6
 8006424:	bb3a      	cbnz	r2, 8006476 <_free_r+0xee>
 8006426:	4e37      	ldr	r6, [pc, #220]	; (8006504 <_free_r+0x17c>)
 8006428:	42b1      	cmp	r1, r6
 800642a:	d124      	bne.n	8006476 <_free_r+0xee>
 800642c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006430:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006434:	2201      	movs	r2, #1
 8006436:	f044 0101 	orr.w	r1, r4, #1
 800643a:	6059      	str	r1, [r3, #4]
 800643c:	511c      	str	r4, [r3, r4]
 800643e:	2a00      	cmp	r2, #0
 8006440:	d1d3      	bne.n	80063ea <_free_r+0x62>
 8006442:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006446:	d21b      	bcs.n	8006480 <_free_r+0xf8>
 8006448:	0961      	lsrs	r1, r4, #5
 800644a:	08e2      	lsrs	r2, r4, #3
 800644c:	2401      	movs	r4, #1
 800644e:	408c      	lsls	r4, r1
 8006450:	6841      	ldr	r1, [r0, #4]
 8006452:	3201      	adds	r2, #1
 8006454:	430c      	orrs	r4, r1
 8006456:	6044      	str	r4, [r0, #4]
 8006458:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800645c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006460:	3908      	subs	r1, #8
 8006462:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006466:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800646a:	60e3      	str	r3, [r4, #12]
 800646c:	e7bd      	b.n	80063ea <_free_r+0x62>
 800646e:	2200      	movs	r2, #0
 8006470:	e7d0      	b.n	8006414 <_free_r+0x8c>
 8006472:	2201      	movs	r2, #1
 8006474:	e7ce      	b.n	8006414 <_free_r+0x8c>
 8006476:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800647a:	60ce      	str	r6, [r1, #12]
 800647c:	60b1      	str	r1, [r6, #8]
 800647e:	e7da      	b.n	8006436 <_free_r+0xae>
 8006480:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8006484:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8006488:	d214      	bcs.n	80064b4 <_free_r+0x12c>
 800648a:	09a2      	lsrs	r2, r4, #6
 800648c:	3238      	adds	r2, #56	; 0x38
 800648e:	1c51      	adds	r1, r2, #1
 8006490:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8006494:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006498:	428e      	cmp	r6, r1
 800649a:	d125      	bne.n	80064e8 <_free_r+0x160>
 800649c:	2401      	movs	r4, #1
 800649e:	1092      	asrs	r2, r2, #2
 80064a0:	fa04 f202 	lsl.w	r2, r4, r2
 80064a4:	6844      	ldr	r4, [r0, #4]
 80064a6:	4322      	orrs	r2, r4
 80064a8:	6042      	str	r2, [r0, #4]
 80064aa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80064ae:	60b3      	str	r3, [r6, #8]
 80064b0:	60cb      	str	r3, [r1, #12]
 80064b2:	e79a      	b.n	80063ea <_free_r+0x62>
 80064b4:	2a14      	cmp	r2, #20
 80064b6:	d801      	bhi.n	80064bc <_free_r+0x134>
 80064b8:	325b      	adds	r2, #91	; 0x5b
 80064ba:	e7e8      	b.n	800648e <_free_r+0x106>
 80064bc:	2a54      	cmp	r2, #84	; 0x54
 80064be:	d802      	bhi.n	80064c6 <_free_r+0x13e>
 80064c0:	0b22      	lsrs	r2, r4, #12
 80064c2:	326e      	adds	r2, #110	; 0x6e
 80064c4:	e7e3      	b.n	800648e <_free_r+0x106>
 80064c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80064ca:	d802      	bhi.n	80064d2 <_free_r+0x14a>
 80064cc:	0be2      	lsrs	r2, r4, #15
 80064ce:	3277      	adds	r2, #119	; 0x77
 80064d0:	e7dd      	b.n	800648e <_free_r+0x106>
 80064d2:	f240 5154 	movw	r1, #1364	; 0x554
 80064d6:	428a      	cmp	r2, r1
 80064d8:	bf9a      	itte	ls
 80064da:	0ca2      	lsrls	r2, r4, #18
 80064dc:	327c      	addls	r2, #124	; 0x7c
 80064de:	227e      	movhi	r2, #126	; 0x7e
 80064e0:	e7d5      	b.n	800648e <_free_r+0x106>
 80064e2:	6889      	ldr	r1, [r1, #8]
 80064e4:	428e      	cmp	r6, r1
 80064e6:	d004      	beq.n	80064f2 <_free_r+0x16a>
 80064e8:	684a      	ldr	r2, [r1, #4]
 80064ea:	f022 0203 	bic.w	r2, r2, #3
 80064ee:	42a2      	cmp	r2, r4
 80064f0:	d8f7      	bhi.n	80064e2 <_free_r+0x15a>
 80064f2:	68ce      	ldr	r6, [r1, #12]
 80064f4:	e7d9      	b.n	80064aa <_free_r+0x122>
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f8:	20000448 	.word	0x20000448
 80064fc:	20000854 	.word	0x20000854
 8006500:	20000a88 	.word	0x20000a88
 8006504:	20000450 	.word	0x20000450

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4d0d      	ldr	r5, [pc, #52]	; (8006540 <__libc_init_array+0x38>)
 800650c:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	2600      	movs	r6, #0
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	4d0b      	ldr	r5, [pc, #44]	; (8006548 <__libc_init_array+0x40>)
 800651a:	4c0c      	ldr	r4, [pc, #48]	; (800654c <__libc_init_array+0x44>)
 800651c:	f00b f9e4 	bl	80118e8 <_init>
 8006520:	1b64      	subs	r4, r4, r5
 8006522:	10a4      	asrs	r4, r4, #2
 8006524:	2600      	movs	r6, #0
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	f855 3b04 	ldr.w	r3, [r5], #4
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	080121ec 	.word	0x080121ec
 8006544:	080121ec 	.word	0x080121ec
 8006548:	080121ec 	.word	0x080121ec
 800654c:	080121f4 	.word	0x080121f4

08006550 <localtime>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <localtime+0xc>)
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	317c      	adds	r1, #124	; 0x7c
 8006556:	f000 b803 	b.w	8006560 <localtime_r>
 800655a:	bf00      	nop
 800655c:	2000001c 	.word	0x2000001c

08006560 <localtime_r>:
 8006560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006564:	4607      	mov	r7, r0
 8006566:	9101      	str	r1, [sp, #4]
 8006568:	f005 ff00 	bl	800c36c <__gettzinfo>
 800656c:	9901      	ldr	r1, [sp, #4]
 800656e:	4680      	mov	r8, r0
 8006570:	4638      	mov	r0, r7
 8006572:	f005 feff 	bl	800c374 <gmtime_r>
 8006576:	6943      	ldr	r3, [r0, #20]
 8006578:	079a      	lsls	r2, r3, #30
 800657a:	4604      	mov	r4, r0
 800657c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8006580:	d105      	bne.n	800658e <localtime_r+0x2e>
 8006582:	2264      	movs	r2, #100	; 0x64
 8006584:	fb96 f3f2 	sdiv	r3, r6, r2
 8006588:	fb02 6313 	mls	r3, r2, r3, r6
 800658c:	bb7b      	cbnz	r3, 80065ee <localtime_r+0x8e>
 800658e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006592:	fb96 f5f3 	sdiv	r5, r6, r3
 8006596:	fb03 6515 	mls	r5, r3, r5, r6
 800659a:	fab5 f585 	clz	r5, r5
 800659e:	096d      	lsrs	r5, r5, #5
 80065a0:	4b68      	ldr	r3, [pc, #416]	; (8006744 <localtime_r+0x1e4>)
 80065a2:	2230      	movs	r2, #48	; 0x30
 80065a4:	fb02 3505 	mla	r5, r2, r5, r3
 80065a8:	f001 fea2 	bl	80082f0 <__tz_lock>
 80065ac:	f001 feac 	bl	8008308 <_tzset_unlocked>
 80065b0:	4b65      	ldr	r3, [pc, #404]	; (8006748 <localtime_r+0x1e8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b353      	cbz	r3, 800660c <localtime_r+0xac>
 80065b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065ba:	42b3      	cmp	r3, r6
 80065bc:	d119      	bne.n	80065f2 <localtime_r+0x92>
 80065be:	f8d8 1000 	ldr.w	r1, [r8]
 80065c2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80065c6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80065ca:	b9d1      	cbnz	r1, 8006602 <localtime_r+0xa2>
 80065cc:	4296      	cmp	r6, r2
 80065ce:	eb77 0303 	sbcs.w	r3, r7, r3
 80065d2:	da23      	bge.n	800661c <localtime_r+0xbc>
 80065d4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80065d8:	4296      	cmp	r6, r2
 80065da:	eb77 0303 	sbcs.w	r3, r7, r3
 80065de:	bfb4      	ite	lt
 80065e0:	2301      	movlt	r3, #1
 80065e2:	2300      	movge	r3, #0
 80065e4:	6223      	str	r3, [r4, #32]
 80065e6:	db1b      	blt.n	8006620 <localtime_r+0xc0>
 80065e8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80065ec:	e01a      	b.n	8006624 <localtime_r+0xc4>
 80065ee:	2501      	movs	r5, #1
 80065f0:	e7d6      	b.n	80065a0 <localtime_r+0x40>
 80065f2:	4630      	mov	r0, r6
 80065f4:	f001 fdd4 	bl	80081a0 <__tzcalc_limits>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1e0      	bne.n	80065be <localtime_r+0x5e>
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	e004      	b.n	800660c <localtime_r+0xac>
 8006602:	4296      	cmp	r6, r2
 8006604:	eb77 0303 	sbcs.w	r3, r7, r3
 8006608:	da02      	bge.n	8006610 <localtime_r+0xb0>
 800660a:	2300      	movs	r3, #0
 800660c:	6223      	str	r3, [r4, #32]
 800660e:	e7eb      	b.n	80065e8 <localtime_r+0x88>
 8006610:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8006614:	4296      	cmp	r6, r2
 8006616:	eb77 0303 	sbcs.w	r3, r7, r3
 800661a:	daf6      	bge.n	800660a <localtime_r+0xaa>
 800661c:	2301      	movs	r3, #1
 800661e:	6223      	str	r3, [r4, #32]
 8006620:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8006624:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006628:	203c      	movs	r0, #60	; 0x3c
 800662a:	fb91 f6f3 	sdiv	r6, r1, r3
 800662e:	fb03 1316 	mls	r3, r3, r6, r1
 8006632:	6861      	ldr	r1, [r4, #4]
 8006634:	fb93 f2f0 	sdiv	r2, r3, r0
 8006638:	fb00 3012 	mls	r0, r0, r2, r3
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	1a89      	subs	r1, r1, r2
 8006640:	68a2      	ldr	r2, [r4, #8]
 8006642:	6061      	str	r1, [r4, #4]
 8006644:	1a1b      	subs	r3, r3, r0
 8006646:	1b92      	subs	r2, r2, r6
 8006648:	2b3b      	cmp	r3, #59	; 0x3b
 800664a:	6023      	str	r3, [r4, #0]
 800664c:	60a2      	str	r2, [r4, #8]
 800664e:	dd35      	ble.n	80066bc <localtime_r+0x15c>
 8006650:	3101      	adds	r1, #1
 8006652:	6061      	str	r1, [r4, #4]
 8006654:	3b3c      	subs	r3, #60	; 0x3c
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	2b3b      	cmp	r3, #59	; 0x3b
 800665c:	dd34      	ble.n	80066c8 <localtime_r+0x168>
 800665e:	3201      	adds	r2, #1
 8006660:	60a2      	str	r2, [r4, #8]
 8006662:	3b3c      	subs	r3, #60	; 0x3c
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	2b17      	cmp	r3, #23
 800666a:	dd33      	ble.n	80066d4 <localtime_r+0x174>
 800666c:	69e2      	ldr	r2, [r4, #28]
 800666e:	3201      	adds	r2, #1
 8006670:	61e2      	str	r2, [r4, #28]
 8006672:	69a2      	ldr	r2, [r4, #24]
 8006674:	3201      	adds	r2, #1
 8006676:	2a06      	cmp	r2, #6
 8006678:	bfc8      	it	gt
 800667a:	2200      	movgt	r2, #0
 800667c:	61a2      	str	r2, [r4, #24]
 800667e:	68e2      	ldr	r2, [r4, #12]
 8006680:	3b18      	subs	r3, #24
 8006682:	3201      	adds	r2, #1
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	60e2      	str	r2, [r4, #12]
 800668a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800668e:	428a      	cmp	r2, r1
 8006690:	dd0e      	ble.n	80066b0 <localtime_r+0x150>
 8006692:	2b0b      	cmp	r3, #11
 8006694:	eba2 0201 	sub.w	r2, r2, r1
 8006698:	60e2      	str	r2, [r4, #12]
 800669a:	f103 0201 	add.w	r2, r3, #1
 800669e:	bf09      	itett	eq
 80066a0:	6963      	ldreq	r3, [r4, #20]
 80066a2:	6122      	strne	r2, [r4, #16]
 80066a4:	2200      	moveq	r2, #0
 80066a6:	3301      	addeq	r3, #1
 80066a8:	bf02      	ittt	eq
 80066aa:	6122      	streq	r2, [r4, #16]
 80066ac:	6163      	streq	r3, [r4, #20]
 80066ae:	61e2      	streq	r2, [r4, #28]
 80066b0:	f001 fe24 	bl	80082fc <__tz_unlock>
 80066b4:	4620      	mov	r0, r4
 80066b6:	b002      	add	sp, #8
 80066b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dacb      	bge.n	8006658 <localtime_r+0xf8>
 80066c0:	3901      	subs	r1, #1
 80066c2:	6061      	str	r1, [r4, #4]
 80066c4:	333c      	adds	r3, #60	; 0x3c
 80066c6:	e7c6      	b.n	8006656 <localtime_r+0xf6>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dacc      	bge.n	8006666 <localtime_r+0x106>
 80066cc:	3a01      	subs	r2, #1
 80066ce:	60a2      	str	r2, [r4, #8]
 80066d0:	333c      	adds	r3, #60	; 0x3c
 80066d2:	e7c7      	b.n	8006664 <localtime_r+0x104>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	daeb      	bge.n	80066b0 <localtime_r+0x150>
 80066d8:	69e2      	ldr	r2, [r4, #28]
 80066da:	3a01      	subs	r2, #1
 80066dc:	61e2      	str	r2, [r4, #28]
 80066de:	69a2      	ldr	r2, [r4, #24]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	bf48      	it	mi
 80066e4:	2206      	movmi	r2, #6
 80066e6:	61a2      	str	r2, [r4, #24]
 80066e8:	68e2      	ldr	r2, [r4, #12]
 80066ea:	3318      	adds	r3, #24
 80066ec:	3a01      	subs	r2, #1
 80066ee:	60e2      	str	r2, [r4, #12]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d1dc      	bne.n	80066b0 <localtime_r+0x150>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	d405      	bmi.n	8006708 <localtime_r+0x1a8>
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006704:	60e3      	str	r3, [r4, #12]
 8006706:	e7d3      	b.n	80066b0 <localtime_r+0x150>
 8006708:	230b      	movs	r3, #11
 800670a:	6123      	str	r3, [r4, #16]
 800670c:	6963      	ldr	r3, [r4, #20]
 800670e:	1e5a      	subs	r2, r3, #1
 8006710:	6162      	str	r2, [r4, #20]
 8006712:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8006716:	0793      	lsls	r3, r2, #30
 8006718:	d105      	bne.n	8006726 <localtime_r+0x1c6>
 800671a:	2164      	movs	r1, #100	; 0x64
 800671c:	fb92 f3f1 	sdiv	r3, r2, r1
 8006720:	fb01 2313 	mls	r3, r1, r3, r2
 8006724:	b963      	cbnz	r3, 8006740 <localtime_r+0x1e0>
 8006726:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800672a:	fb92 f3f1 	sdiv	r3, r2, r1
 800672e:	fb01 2313 	mls	r3, r1, r3, r2
 8006732:	fab3 f383 	clz	r3, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800673c:	61e3      	str	r3, [r4, #28]
 800673e:	e7de      	b.n	80066fe <localtime_r+0x19e>
 8006740:	2301      	movs	r3, #1
 8006742:	e7f9      	b.n	8006738 <localtime_r+0x1d8>
 8006744:	08011c00 	.word	0x08011c00
 8006748:	20000aa8 	.word	0x20000aa8

0800674c <__retarget_lock_init_recursive>:
 800674c:	4770      	bx	lr

0800674e <__retarget_lock_close_recursive>:
 800674e:	4770      	bx	lr

08006750 <__retarget_lock_acquire>:
 8006750:	4770      	bx	lr

08006752 <__retarget_lock_acquire_recursive>:
 8006752:	4770      	bx	lr

08006754 <__retarget_lock_release>:
 8006754:	4770      	bx	lr

08006756 <__retarget_lock_release_recursive>:
 8006756:	4770      	bx	lr

08006758 <malloc>:
 8006758:	4b02      	ldr	r3, [pc, #8]	; (8006764 <malloc+0xc>)
 800675a:	4601      	mov	r1, r0
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	f000 b80b 	b.w	8006778 <_malloc_r>
 8006762:	bf00      	nop
 8006764:	2000001c 	.word	0x2000001c

08006768 <free>:
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <free+0xc>)
 800676a:	4601      	mov	r1, r0
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	f7ff be0b 	b.w	8006388 <_free_r>
 8006772:	bf00      	nop
 8006774:	2000001c 	.word	0x2000001c

08006778 <_malloc_r>:
 8006778:	f101 030b 	add.w	r3, r1, #11
 800677c:	2b16      	cmp	r3, #22
 800677e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	d906      	bls.n	8006794 <_malloc_r+0x1c>
 8006786:	f033 0707 	bics.w	r7, r3, #7
 800678a:	d504      	bpl.n	8006796 <_malloc_r+0x1e>
 800678c:	230c      	movs	r3, #12
 800678e:	602b      	str	r3, [r5, #0]
 8006790:	2400      	movs	r4, #0
 8006792:	e1ae      	b.n	8006af2 <_malloc_r+0x37a>
 8006794:	2710      	movs	r7, #16
 8006796:	42b9      	cmp	r1, r7
 8006798:	d8f8      	bhi.n	800678c <_malloc_r+0x14>
 800679a:	4628      	mov	r0, r5
 800679c:	f000 fa36 	bl	8006c0c <__malloc_lock>
 80067a0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80067a4:	4ec3      	ldr	r6, [pc, #780]	; (8006ab4 <_malloc_r+0x33c>)
 80067a6:	d238      	bcs.n	800681a <_malloc_r+0xa2>
 80067a8:	f107 0208 	add.w	r2, r7, #8
 80067ac:	4432      	add	r2, r6
 80067ae:	f1a2 0108 	sub.w	r1, r2, #8
 80067b2:	6854      	ldr	r4, [r2, #4]
 80067b4:	428c      	cmp	r4, r1
 80067b6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80067ba:	d102      	bne.n	80067c2 <_malloc_r+0x4a>
 80067bc:	68d4      	ldr	r4, [r2, #12]
 80067be:	42a2      	cmp	r2, r4
 80067c0:	d010      	beq.n	80067e4 <_malloc_r+0x6c>
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	60ca      	str	r2, [r1, #12]
 80067ce:	4423      	add	r3, r4
 80067d0:	6091      	str	r1, [r2, #8]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 fa1c 	bl	8006c18 <__malloc_unlock>
 80067e0:	3408      	adds	r4, #8
 80067e2:	e186      	b.n	8006af2 <_malloc_r+0x37a>
 80067e4:	3302      	adds	r3, #2
 80067e6:	4ab4      	ldr	r2, [pc, #720]	; (8006ab8 <_malloc_r+0x340>)
 80067e8:	6934      	ldr	r4, [r6, #16]
 80067ea:	4294      	cmp	r4, r2
 80067ec:	4611      	mov	r1, r2
 80067ee:	d077      	beq.n	80068e0 <_malloc_r+0x168>
 80067f0:	6860      	ldr	r0, [r4, #4]
 80067f2:	f020 0c03 	bic.w	ip, r0, #3
 80067f6:	ebac 0007 	sub.w	r0, ip, r7
 80067fa:	280f      	cmp	r0, #15
 80067fc:	dd48      	ble.n	8006890 <_malloc_r+0x118>
 80067fe:	19e1      	adds	r1, r4, r7
 8006800:	f040 0301 	orr.w	r3, r0, #1
 8006804:	f047 0701 	orr.w	r7, r7, #1
 8006808:	6067      	str	r7, [r4, #4]
 800680a:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800680e:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8006812:	604b      	str	r3, [r1, #4]
 8006814:	f844 000c 	str.w	r0, [r4, ip]
 8006818:	e7df      	b.n	80067da <_malloc_r+0x62>
 800681a:	0a7b      	lsrs	r3, r7, #9
 800681c:	d02a      	beq.n	8006874 <_malloc_r+0xfc>
 800681e:	2b04      	cmp	r3, #4
 8006820:	d812      	bhi.n	8006848 <_malloc_r+0xd0>
 8006822:	09bb      	lsrs	r3, r7, #6
 8006824:	3338      	adds	r3, #56	; 0x38
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800682c:	f1a2 0c08 	sub.w	ip, r2, #8
 8006830:	6854      	ldr	r4, [r2, #4]
 8006832:	4564      	cmp	r4, ip
 8006834:	d006      	beq.n	8006844 <_malloc_r+0xcc>
 8006836:	6862      	ldr	r2, [r4, #4]
 8006838:	f022 0203 	bic.w	r2, r2, #3
 800683c:	1bd0      	subs	r0, r2, r7
 800683e:	280f      	cmp	r0, #15
 8006840:	dd1c      	ble.n	800687c <_malloc_r+0x104>
 8006842:	3b01      	subs	r3, #1
 8006844:	3301      	adds	r3, #1
 8006846:	e7ce      	b.n	80067e6 <_malloc_r+0x6e>
 8006848:	2b14      	cmp	r3, #20
 800684a:	d801      	bhi.n	8006850 <_malloc_r+0xd8>
 800684c:	335b      	adds	r3, #91	; 0x5b
 800684e:	e7ea      	b.n	8006826 <_malloc_r+0xae>
 8006850:	2b54      	cmp	r3, #84	; 0x54
 8006852:	d802      	bhi.n	800685a <_malloc_r+0xe2>
 8006854:	0b3b      	lsrs	r3, r7, #12
 8006856:	336e      	adds	r3, #110	; 0x6e
 8006858:	e7e5      	b.n	8006826 <_malloc_r+0xae>
 800685a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800685e:	d802      	bhi.n	8006866 <_malloc_r+0xee>
 8006860:	0bfb      	lsrs	r3, r7, #15
 8006862:	3377      	adds	r3, #119	; 0x77
 8006864:	e7df      	b.n	8006826 <_malloc_r+0xae>
 8006866:	f240 5254 	movw	r2, #1364	; 0x554
 800686a:	4293      	cmp	r3, r2
 800686c:	d804      	bhi.n	8006878 <_malloc_r+0x100>
 800686e:	0cbb      	lsrs	r3, r7, #18
 8006870:	337c      	adds	r3, #124	; 0x7c
 8006872:	e7d8      	b.n	8006826 <_malloc_r+0xae>
 8006874:	233f      	movs	r3, #63	; 0x3f
 8006876:	e7d6      	b.n	8006826 <_malloc_r+0xae>
 8006878:	237e      	movs	r3, #126	; 0x7e
 800687a:	e7d4      	b.n	8006826 <_malloc_r+0xae>
 800687c:	2800      	cmp	r0, #0
 800687e:	68e1      	ldr	r1, [r4, #12]
 8006880:	db04      	blt.n	800688c <_malloc_r+0x114>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	60d9      	str	r1, [r3, #12]
 8006886:	608b      	str	r3, [r1, #8]
 8006888:	18a3      	adds	r3, r4, r2
 800688a:	e7a2      	b.n	80067d2 <_malloc_r+0x5a>
 800688c:	460c      	mov	r4, r1
 800688e:	e7d0      	b.n	8006832 <_malloc_r+0xba>
 8006890:	2800      	cmp	r0, #0
 8006892:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006896:	db07      	blt.n	80068a8 <_malloc_r+0x130>
 8006898:	44a4      	add	ip, r4
 800689a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	f8cc 3004 	str.w	r3, [ip, #4]
 80068a6:	e798      	b.n	80067da <_malloc_r+0x62>
 80068a8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80068ac:	6870      	ldr	r0, [r6, #4]
 80068ae:	f080 809e 	bcs.w	80069ee <_malloc_r+0x276>
 80068b2:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80068b6:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80068ba:	f04f 0c01 	mov.w	ip, #1
 80068be:	3201      	adds	r2, #1
 80068c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80068c4:	ea4c 0000 	orr.w	r0, ip, r0
 80068c8:	6070      	str	r0, [r6, #4]
 80068ca:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80068ce:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80068d2:	3808      	subs	r0, #8
 80068d4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80068d8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80068dc:	f8cc 400c 	str.w	r4, [ip, #12]
 80068e0:	2001      	movs	r0, #1
 80068e2:	109a      	asrs	r2, r3, #2
 80068e4:	fa00 f202 	lsl.w	r2, r0, r2
 80068e8:	6870      	ldr	r0, [r6, #4]
 80068ea:	4290      	cmp	r0, r2
 80068ec:	d326      	bcc.n	800693c <_malloc_r+0x1c4>
 80068ee:	4210      	tst	r0, r2
 80068f0:	d106      	bne.n	8006900 <_malloc_r+0x188>
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	0052      	lsls	r2, r2, #1
 80068f8:	4210      	tst	r0, r2
 80068fa:	f103 0304 	add.w	r3, r3, #4
 80068fe:	d0fa      	beq.n	80068f6 <_malloc_r+0x17e>
 8006900:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8006904:	46c1      	mov	r9, r8
 8006906:	469e      	mov	lr, r3
 8006908:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800690c:	454c      	cmp	r4, r9
 800690e:	f040 80b3 	bne.w	8006a78 <_malloc_r+0x300>
 8006912:	f10e 0e01 	add.w	lr, lr, #1
 8006916:	f01e 0f03 	tst.w	lr, #3
 800691a:	f109 0908 	add.w	r9, r9, #8
 800691e:	d1f3      	bne.n	8006908 <_malloc_r+0x190>
 8006920:	0798      	lsls	r0, r3, #30
 8006922:	f040 80ec 	bne.w	8006afe <_malloc_r+0x386>
 8006926:	6873      	ldr	r3, [r6, #4]
 8006928:	ea23 0302 	bic.w	r3, r3, r2
 800692c:	6073      	str	r3, [r6, #4]
 800692e:	6870      	ldr	r0, [r6, #4]
 8006930:	0052      	lsls	r2, r2, #1
 8006932:	4290      	cmp	r0, r2
 8006934:	d302      	bcc.n	800693c <_malloc_r+0x1c4>
 8006936:	2a00      	cmp	r2, #0
 8006938:	f040 80ee 	bne.w	8006b18 <_malloc_r+0x3a0>
 800693c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8006940:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006944:	f021 0903 	bic.w	r9, r1, #3
 8006948:	45b9      	cmp	r9, r7
 800694a:	d304      	bcc.n	8006956 <_malloc_r+0x1de>
 800694c:	eba9 0207 	sub.w	r2, r9, r7
 8006950:	2a0f      	cmp	r2, #15
 8006952:	f300 8149 	bgt.w	8006be8 <_malloc_r+0x470>
 8006956:	4a59      	ldr	r2, [pc, #356]	; (8006abc <_malloc_r+0x344>)
 8006958:	6811      	ldr	r1, [r2, #0]
 800695a:	3110      	adds	r1, #16
 800695c:	eb0b 0309 	add.w	r3, fp, r9
 8006960:	4439      	add	r1, r7
 8006962:	2008      	movs	r0, #8
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	9100      	str	r1, [sp, #0]
 8006968:	f001 fbf2 	bl	8008150 <sysconf>
 800696c:	4a54      	ldr	r2, [pc, #336]	; (8006ac0 <_malloc_r+0x348>)
 800696e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8006972:	4680      	mov	r8, r0
 8006974:	6810      	ldr	r0, [r2, #0]
 8006976:	3001      	adds	r0, #1
 8006978:	bf1f      	itttt	ne
 800697a:	f101 31ff 	addne.w	r1, r1, #4294967295
 800697e:	4441      	addne	r1, r8
 8006980:	f1c8 0000 	rsbne	r0, r8, #0
 8006984:	4001      	andne	r1, r0
 8006986:	4628      	mov	r0, r5
 8006988:	e9cd 1300 	strd	r1, r3, [sp]
 800698c:	f000 f9aa 	bl	8006ce4 <_sbrk_r>
 8006990:	1c42      	adds	r2, r0, #1
 8006992:	4604      	mov	r4, r0
 8006994:	f000 80fc 	beq.w	8006b90 <_malloc_r+0x418>
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	9900      	ldr	r1, [sp, #0]
 800699c:	4a48      	ldr	r2, [pc, #288]	; (8006ac0 <_malloc_r+0x348>)
 800699e:	4283      	cmp	r3, r0
 80069a0:	d902      	bls.n	80069a8 <_malloc_r+0x230>
 80069a2:	45b3      	cmp	fp, r6
 80069a4:	f040 80f4 	bne.w	8006b90 <_malloc_r+0x418>
 80069a8:	f8df a120 	ldr.w	sl, [pc, #288]	; 8006acc <_malloc_r+0x354>
 80069ac:	f8da 0000 	ldr.w	r0, [sl]
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	eb00 0e01 	add.w	lr, r0, r1
 80069b6:	f8ca e000 	str.w	lr, [sl]
 80069ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80069be:	f040 80ad 	bne.w	8006b1c <_malloc_r+0x3a4>
 80069c2:	ea13 0f0c 	tst.w	r3, ip
 80069c6:	f040 80a9 	bne.w	8006b1c <_malloc_r+0x3a4>
 80069ca:	68b3      	ldr	r3, [r6, #8]
 80069cc:	4449      	add	r1, r9
 80069ce:	f041 0101 	orr.w	r1, r1, #1
 80069d2:	6059      	str	r1, [r3, #4]
 80069d4:	4a3b      	ldr	r2, [pc, #236]	; (8006ac4 <_malloc_r+0x34c>)
 80069d6:	f8da 3000 	ldr.w	r3, [sl]
 80069da:	6811      	ldr	r1, [r2, #0]
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf88      	it	hi
 80069e0:	6013      	strhi	r3, [r2, #0]
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <_malloc_r+0x350>)
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	428b      	cmp	r3, r1
 80069e8:	bf88      	it	hi
 80069ea:	6013      	strhi	r3, [r2, #0]
 80069ec:	e0d0      	b.n	8006b90 <_malloc_r+0x418>
 80069ee:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80069f2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80069f6:	d218      	bcs.n	8006a2a <_malloc_r+0x2b2>
 80069f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80069fc:	3238      	adds	r2, #56	; 0x38
 80069fe:	f102 0e01 	add.w	lr, r2, #1
 8006a02:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006a06:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8006a0a:	45f0      	cmp	r8, lr
 8006a0c:	d12b      	bne.n	8006a66 <_malloc_r+0x2ee>
 8006a0e:	1092      	asrs	r2, r2, #2
 8006a10:	f04f 0c01 	mov.w	ip, #1
 8006a14:	fa0c f202 	lsl.w	r2, ip, r2
 8006a18:	4310      	orrs	r0, r2
 8006a1a:	6070      	str	r0, [r6, #4]
 8006a1c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006a20:	f8c8 4008 	str.w	r4, [r8, #8]
 8006a24:	f8ce 400c 	str.w	r4, [lr, #12]
 8006a28:	e75a      	b.n	80068e0 <_malloc_r+0x168>
 8006a2a:	2a14      	cmp	r2, #20
 8006a2c:	d801      	bhi.n	8006a32 <_malloc_r+0x2ba>
 8006a2e:	325b      	adds	r2, #91	; 0x5b
 8006a30:	e7e5      	b.n	80069fe <_malloc_r+0x286>
 8006a32:	2a54      	cmp	r2, #84	; 0x54
 8006a34:	d803      	bhi.n	8006a3e <_malloc_r+0x2c6>
 8006a36:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006a3a:	326e      	adds	r2, #110	; 0x6e
 8006a3c:	e7df      	b.n	80069fe <_malloc_r+0x286>
 8006a3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006a42:	d803      	bhi.n	8006a4c <_malloc_r+0x2d4>
 8006a44:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006a48:	3277      	adds	r2, #119	; 0x77
 8006a4a:	e7d8      	b.n	80069fe <_malloc_r+0x286>
 8006a4c:	f240 5e54 	movw	lr, #1364	; 0x554
 8006a50:	4572      	cmp	r2, lr
 8006a52:	bf9a      	itte	ls
 8006a54:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006a58:	327c      	addls	r2, #124	; 0x7c
 8006a5a:	227e      	movhi	r2, #126	; 0x7e
 8006a5c:	e7cf      	b.n	80069fe <_malloc_r+0x286>
 8006a5e:	f8de e008 	ldr.w	lr, [lr, #8]
 8006a62:	45f0      	cmp	r8, lr
 8006a64:	d005      	beq.n	8006a72 <_malloc_r+0x2fa>
 8006a66:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006a6a:	f022 0203 	bic.w	r2, r2, #3
 8006a6e:	4562      	cmp	r2, ip
 8006a70:	d8f5      	bhi.n	8006a5e <_malloc_r+0x2e6>
 8006a72:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006a76:	e7d1      	b.n	8006a1c <_malloc_r+0x2a4>
 8006a78:	6860      	ldr	r0, [r4, #4]
 8006a7a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006a7e:	f020 0003 	bic.w	r0, r0, #3
 8006a82:	eba0 0a07 	sub.w	sl, r0, r7
 8006a86:	f1ba 0f0f 	cmp.w	sl, #15
 8006a8a:	dd21      	ble.n	8006ad0 <_malloc_r+0x358>
 8006a8c:	68a3      	ldr	r3, [r4, #8]
 8006a8e:	19e2      	adds	r2, r4, r7
 8006a90:	f047 0701 	orr.w	r7, r7, #1
 8006a94:	6067      	str	r7, [r4, #4]
 8006a96:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006a9a:	f8cc 3008 	str.w	r3, [ip, #8]
 8006a9e:	f04a 0301 	orr.w	r3, sl, #1
 8006aa2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006aa6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006aaa:	6053      	str	r3, [r2, #4]
 8006aac:	f844 a000 	str.w	sl, [r4, r0]
 8006ab0:	e693      	b.n	80067da <_malloc_r+0x62>
 8006ab2:	bf00      	nop
 8006ab4:	20000448 	.word	0x20000448
 8006ab8:	20000450 	.word	0x20000450
 8006abc:	20000a88 	.word	0x20000a88
 8006ac0:	20000850 	.word	0x20000850
 8006ac4:	20000a80 	.word	0x20000a80
 8006ac8:	20000a84 	.word	0x20000a84
 8006acc:	20000a58 	.word	0x20000a58
 8006ad0:	f1ba 0f00 	cmp.w	sl, #0
 8006ad4:	db11      	blt.n	8006afa <_malloc_r+0x382>
 8006ad6:	4420      	add	r0, r4
 8006ad8:	6843      	ldr	r3, [r0, #4]
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6043      	str	r3, [r0, #4]
 8006ae0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006aea:	f8cc 3008 	str.w	r3, [ip, #8]
 8006aee:	f000 f893 	bl	8006c18 <__malloc_unlock>
 8006af2:	4620      	mov	r0, r4
 8006af4:	b003      	add	sp, #12
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	4664      	mov	r4, ip
 8006afc:	e706      	b.n	800690c <_malloc_r+0x194>
 8006afe:	f858 0908 	ldr.w	r0, [r8], #-8
 8006b02:	4540      	cmp	r0, r8
 8006b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b08:	f43f af0a 	beq.w	8006920 <_malloc_r+0x1a8>
 8006b0c:	e70f      	b.n	800692e <_malloc_r+0x1b6>
 8006b0e:	3304      	adds	r3, #4
 8006b10:	0052      	lsls	r2, r2, #1
 8006b12:	4210      	tst	r0, r2
 8006b14:	d0fb      	beq.n	8006b0e <_malloc_r+0x396>
 8006b16:	e6f3      	b.n	8006900 <_malloc_r+0x188>
 8006b18:	4673      	mov	r3, lr
 8006b1a:	e7fa      	b.n	8006b12 <_malloc_r+0x39a>
 8006b1c:	6810      	ldr	r0, [r2, #0]
 8006b1e:	3001      	adds	r0, #1
 8006b20:	bf1b      	ittet	ne
 8006b22:	1ae3      	subne	r3, r4, r3
 8006b24:	4473      	addne	r3, lr
 8006b26:	6014      	streq	r4, [r2, #0]
 8006b28:	f8ca 3000 	strne.w	r3, [sl]
 8006b2c:	f014 0307 	ands.w	r3, r4, #7
 8006b30:	bf1a      	itte	ne
 8006b32:	f1c3 0008 	rsbne	r0, r3, #8
 8006b36:	1824      	addne	r4, r4, r0
 8006b38:	4618      	moveq	r0, r3
 8006b3a:	1862      	adds	r2, r4, r1
 8006b3c:	ea02 010c 	and.w	r1, r2, ip
 8006b40:	4480      	add	r8, r0
 8006b42:	eba8 0801 	sub.w	r8, r8, r1
 8006b46:	ea08 080c 	and.w	r8, r8, ip
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	9200      	str	r2, [sp, #0]
 8006b52:	f000 f8c7 	bl	8006ce4 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5c:	d105      	bne.n	8006b6a <_malloc_r+0x3f2>
 8006b5e:	b32b      	cbz	r3, 8006bac <_malloc_r+0x434>
 8006b60:	f1a3 0008 	sub.w	r0, r3, #8
 8006b64:	4410      	add	r0, r2
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	f8da 2000 	ldr.w	r2, [sl]
 8006b6e:	60b4      	str	r4, [r6, #8]
 8006b70:	1b00      	subs	r0, r0, r4
 8006b72:	4440      	add	r0, r8
 8006b74:	4442      	add	r2, r8
 8006b76:	f040 0001 	orr.w	r0, r0, #1
 8006b7a:	45b3      	cmp	fp, r6
 8006b7c:	f8ca 2000 	str.w	r2, [sl]
 8006b80:	6060      	str	r0, [r4, #4]
 8006b82:	f43f af27 	beq.w	80069d4 <_malloc_r+0x25c>
 8006b86:	f1b9 0f0f 	cmp.w	r9, #15
 8006b8a:	d812      	bhi.n	8006bb2 <_malloc_r+0x43a>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	68b3      	ldr	r3, [r6, #8]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	42bb      	cmp	r3, r7
 8006b9a:	eba3 0207 	sub.w	r2, r3, r7
 8006b9e:	d301      	bcc.n	8006ba4 <_malloc_r+0x42c>
 8006ba0:	2a0f      	cmp	r2, #15
 8006ba2:	dc21      	bgt.n	8006be8 <_malloc_r+0x470>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f837 	bl	8006c18 <__malloc_unlock>
 8006baa:	e5f1      	b.n	8006790 <_malloc_r+0x18>
 8006bac:	4610      	mov	r0, r2
 8006bae:	4698      	mov	r8, r3
 8006bb0:	e7db      	b.n	8006b6a <_malloc_r+0x3f2>
 8006bb2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006bb6:	f1a9 090c 	sub.w	r9, r9, #12
 8006bba:	f029 0907 	bic.w	r9, r9, #7
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	ea43 0309 	orr.w	r3, r3, r9
 8006bc6:	f8cb 3004 	str.w	r3, [fp, #4]
 8006bca:	2205      	movs	r2, #5
 8006bcc:	eb0b 0309 	add.w	r3, fp, r9
 8006bd0:	f1b9 0f0f 	cmp.w	r9, #15
 8006bd4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8006bd8:	f67f aefc 	bls.w	80069d4 <_malloc_r+0x25c>
 8006bdc:	f10b 0108 	add.w	r1, fp, #8
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7ff fbd1 	bl	8006388 <_free_r>
 8006be6:	e6f5      	b.n	80069d4 <_malloc_r+0x25c>
 8006be8:	68b4      	ldr	r4, [r6, #8]
 8006bea:	f047 0301 	orr.w	r3, r7, #1
 8006bee:	4427      	add	r7, r4
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	60b7      	str	r7, [r6, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	e5ee      	b.n	80067da <_malloc_r+0x62>

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <__malloc_lock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	; (8006c14 <__malloc_lock+0x8>)
 8006c0e:	f7ff bda0 	b.w	8006752 <__retarget_lock_acquire_recursive>
 8006c12:	bf00      	nop
 8006c14:	20000bac 	.word	0x20000bac

08006c18 <__malloc_unlock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <__malloc_unlock+0x8>)
 8006c1a:	f7ff bd9c 	b.w	8006756 <__retarget_lock_release_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000bac 	.word	0x20000bac

08006c24 <printf>:
 8006c24:	b40f      	push	{r0, r1, r2, r3}
 8006c26:	b507      	push	{r0, r1, r2, lr}
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <printf+0x20>)
 8006c2a:	ab04      	add	r3, sp, #16
 8006c2c:	6808      	ldr	r0, [r1, #0]
 8006c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c32:	6881      	ldr	r1, [r0, #8]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	f001 fceb 	bl	8008610 <_vfprintf_r>
 8006c3a:	b003      	add	sp, #12
 8006c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c40:	b004      	add	sp, #16
 8006c42:	4770      	bx	lr
 8006c44:	2000001c 	.word	0x2000001c

08006c48 <_puts_r>:
 8006c48:	b530      	push	{r4, r5, lr}
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b089      	sub	sp, #36	; 0x24
 8006c4e:	4608      	mov	r0, r1
 8006c50:	460c      	mov	r4, r1
 8006c52:	f7f9 fac7 	bl	80001e4 <strlen>
 8006c56:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <_puts_r+0x88>)
 8006c58:	9306      	str	r3, [sp, #24]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	4418      	add	r0, r3
 8006c64:	ab04      	add	r3, sp, #16
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	2302      	movs	r3, #2
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	9003      	str	r0, [sp, #12]
 8006c72:	b913      	cbnz	r3, 8006c7a <_puts_r+0x32>
 8006c74:	4628      	mov	r0, r5
 8006c76:	f005 f8fb 	bl	800be70 <__sinit>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7c:	07db      	lsls	r3, r3, #31
 8006c7e:	d405      	bmi.n	8006c8c <_puts_r+0x44>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	0598      	lsls	r0, r3, #22
 8006c84:	d402      	bmi.n	8006c8c <_puts_r+0x44>
 8006c86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c88:	f7ff fd63 	bl	8006752 <__retarget_lock_acquire_recursive>
 8006c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c90:	0499      	lsls	r1, r3, #18
 8006c92:	d406      	bmi.n	8006ca2 <_puts_r+0x5a>
 8006c94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca0:	6663      	str	r3, [r4, #100]	; 0x64
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	aa01      	add	r2, sp, #4
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f005 f986 	bl	800bfb8 <__sfvwrite_r>
 8006cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	f04f 35ff 	movne.w	r5, #4294967295
 8006cb6:	250a      	moveq	r5, #10
 8006cb8:	07da      	lsls	r2, r3, #31
 8006cba:	d405      	bmi.n	8006cc8 <_puts_r+0x80>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	059b      	lsls	r3, r3, #22
 8006cc0:	d402      	bmi.n	8006cc8 <_puts_r+0x80>
 8006cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc4:	f7ff fd47 	bl	8006756 <__retarget_lock_release_recursive>
 8006cc8:	4628      	mov	r0, r5
 8006cca:	b009      	add	sp, #36	; 0x24
 8006ccc:	bd30      	pop	{r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	08011d56 	.word	0x08011d56

08006cd4 <puts>:
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <puts+0xc>)
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f7ff bfb5 	b.w	8006c48 <_puts_r>
 8006cde:	bf00      	nop
 8006ce0:	2000001c 	.word	0x2000001c

08006ce4 <_sbrk_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d06      	ldr	r5, [pc, #24]	; (8006d00 <_sbrk_r+0x1c>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	f7fb fdd8 	bl	80028a4 <_sbrk>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_sbrk_r+0x1a>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_sbrk_r+0x1a>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	20000bb4 	.word	0x20000bb4

08006d04 <scanf>:
 8006d04:	b40f      	push	{r0, r1, r2, r3}
 8006d06:	b507      	push	{r0, r1, r2, lr}
 8006d08:	4906      	ldr	r1, [pc, #24]	; (8006d24 <scanf+0x20>)
 8006d0a:	ab04      	add	r3, sp, #16
 8006d0c:	6808      	ldr	r0, [r1, #0]
 8006d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d12:	6841      	ldr	r1, [r0, #4]
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	f004 f893 	bl	800ae40 <_vfscanf_r>
 8006d1a:	b003      	add	sp, #12
 8006d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d20:	b004      	add	sp, #16
 8006d22:	4770      	bx	lr
 8006d24:	2000001c 	.word	0x2000001c

08006d28 <snprintf>:
 8006d28:	b40c      	push	{r2, r3}
 8006d2a:	b530      	push	{r4, r5, lr}
 8006d2c:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <snprintf+0x64>)
 8006d2e:	1e0c      	subs	r4, r1, #0
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	b09d      	sub	sp, #116	; 0x74
 8006d34:	da08      	bge.n	8006d48 <snprintf+0x20>
 8006d36:	238b      	movs	r3, #139	; 0x8b
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	b01d      	add	sp, #116	; 0x74
 8006d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d44:	b002      	add	sp, #8
 8006d46:	4770      	bx	lr
 8006d48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d50:	bf14      	ite	ne
 8006d52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d56:	4623      	moveq	r3, r4
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d60:	9002      	str	r0, [sp, #8]
 8006d62:	9006      	str	r0, [sp, #24]
 8006d64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d6a:	ab21      	add	r3, sp, #132	; 0x84
 8006d6c:	a902      	add	r1, sp, #8
 8006d6e:	4628      	mov	r0, r5
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	f000 f80d 	bl	8006d90 <_svfprintf_r>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	bfbc      	itt	lt
 8006d7a:	238b      	movlt	r3, #139	; 0x8b
 8006d7c:	602b      	strlt	r3, [r5, #0]
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	d0dd      	beq.n	8006d3e <snprintf+0x16>
 8006d82:	9b02      	ldr	r3, [sp, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e7d9      	b.n	8006d3e <snprintf+0x16>
 8006d8a:	bf00      	nop
 8006d8c:	2000001c 	.word	0x2000001c

08006d90 <_svfprintf_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	ed2d 8b04 	vpush	{d8-d9}
 8006d98:	b0cf      	sub	sp, #316	; 0x13c
 8006d9a:	4689      	mov	r9, r1
 8006d9c:	4693      	mov	fp, r2
 8006d9e:	461e      	mov	r6, r3
 8006da0:	4682      	mov	sl, r0
 8006da2:	f005 fbab 	bl	800c4fc <_localeconv_r>
 8006da6:	6803      	ldr	r3, [r0, #0]
 8006da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7f9 fa1a 	bl	80001e4 <strlen>
 8006db0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006db4:	900e      	str	r0, [sp, #56]	; 0x38
 8006db6:	0618      	lsls	r0, r3, #24
 8006db8:	d51a      	bpl.n	8006df0 <_svfprintf_r+0x60>
 8006dba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dbe:	b9bb      	cbnz	r3, 8006df0 <_svfprintf_r+0x60>
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f7ff fcd8 	bl	8006778 <_malloc_r>
 8006dc8:	f8c9 0000 	str.w	r0, [r9]
 8006dcc:	f8c9 0010 	str.w	r0, [r9, #16]
 8006dd0:	b958      	cbnz	r0, 8006dea <_svfprintf_r+0x5a>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	f8ca 3000 	str.w	r3, [sl]
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dde:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006de0:	b04f      	add	sp, #316	; 0x13c
 8006de2:	ecbd 8b04 	vpop	{d8-d9}
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	2340      	movs	r3, #64	; 0x40
 8006dec:	f8c9 3014 	str.w	r3, [r9, #20]
 8006df0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8007040 <_svfprintf_r+0x2b0>
 8006df4:	2500      	movs	r5, #0
 8006df6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8006dfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006dfe:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006e02:	ac25      	add	r4, sp, #148	; 0x94
 8006e04:	9422      	str	r4, [sp, #136]	; 0x88
 8006e06:	9505      	str	r5, [sp, #20]
 8006e08:	950a      	str	r5, [sp, #40]	; 0x28
 8006e0a:	9512      	str	r5, [sp, #72]	; 0x48
 8006e0c:	9514      	str	r5, [sp, #80]	; 0x50
 8006e0e:	950f      	str	r5, [sp, #60]	; 0x3c
 8006e10:	465b      	mov	r3, fp
 8006e12:	461d      	mov	r5, r3
 8006e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e18:	b10a      	cbz	r2, 8006e1e <_svfprintf_r+0x8e>
 8006e1a:	2a25      	cmp	r2, #37	; 0x25
 8006e1c:	d1f9      	bne.n	8006e12 <_svfprintf_r+0x82>
 8006e1e:	ebb5 070b 	subs.w	r7, r5, fp
 8006e22:	d00d      	beq.n	8006e40 <_svfprintf_r+0xb0>
 8006e24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e26:	443b      	add	r3, r7
 8006e28:	9324      	str	r3, [sp, #144]	; 0x90
 8006e2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	2b07      	cmp	r3, #7
 8006e30:	e9c4 b700 	strd	fp, r7, [r4]
 8006e34:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e36:	dc79      	bgt.n	8006f2c <_svfprintf_r+0x19c>
 8006e38:	3408      	adds	r4, #8
 8006e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e3c:	443b      	add	r3, r7
 8006e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e40:	782b      	ldrb	r3, [r5, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f001 8140 	beq.w	80080c8 <_svfprintf_r+0x1338>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	3501      	adds	r5, #1
 8006e50:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006e54:	9204      	str	r2, [sp, #16]
 8006e56:	9310      	str	r3, [sp, #64]	; 0x40
 8006e58:	4698      	mov	r8, r3
 8006e5a:	270a      	movs	r7, #10
 8006e5c:	212b      	movs	r1, #43	; 0x2b
 8006e5e:	462a      	mov	r2, r5
 8006e60:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006e64:	9307      	str	r3, [sp, #28]
 8006e66:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	3b20      	subs	r3, #32
 8006e6c:	2b5a      	cmp	r3, #90	; 0x5a
 8006e6e:	f200 85b4 	bhi.w	80079da <_svfprintf_r+0xc4a>
 8006e72:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e76:	007e      	.short	0x007e
 8006e78:	05b205b2 	.word	0x05b205b2
 8006e7c:	05b20086 	.word	0x05b20086
 8006e80:	05b205b2 	.word	0x05b205b2
 8006e84:	05b20065 	.word	0x05b20065
 8006e88:	008905b2 	.word	0x008905b2
 8006e8c:	05b20093 	.word	0x05b20093
 8006e90:	00960090 	.word	0x00960090
 8006e94:	00b305b2 	.word	0x00b305b2
 8006e98:	00b600b6 	.word	0x00b600b6
 8006e9c:	00b600b6 	.word	0x00b600b6
 8006ea0:	00b600b6 	.word	0x00b600b6
 8006ea4:	00b600b6 	.word	0x00b600b6
 8006ea8:	05b200b6 	.word	0x05b200b6
 8006eac:	05b205b2 	.word	0x05b205b2
 8006eb0:	05b205b2 	.word	0x05b205b2
 8006eb4:	05b205b2 	.word	0x05b205b2
 8006eb8:	05b20127 	.word	0x05b20127
 8006ebc:	00fc00e9 	.word	0x00fc00e9
 8006ec0:	01270127 	.word	0x01270127
 8006ec4:	05b20127 	.word	0x05b20127
 8006ec8:	05b205b2 	.word	0x05b205b2
 8006ecc:	00c605b2 	.word	0x00c605b2
 8006ed0:	05b205b2 	.word	0x05b205b2
 8006ed4:	05b20492 	.word	0x05b20492
 8006ed8:	05b205b2 	.word	0x05b205b2
 8006edc:	05b204d9 	.word	0x05b204d9
 8006ee0:	05b204fa 	.word	0x05b204fa
 8006ee4:	051905b2 	.word	0x051905b2
 8006ee8:	05b205b2 	.word	0x05b205b2
 8006eec:	05b205b2 	.word	0x05b205b2
 8006ef0:	05b205b2 	.word	0x05b205b2
 8006ef4:	05b205b2 	.word	0x05b205b2
 8006ef8:	05b20127 	.word	0x05b20127
 8006efc:	00fe00e9 	.word	0x00fe00e9
 8006f00:	01270127 	.word	0x01270127
 8006f04:	00c90127 	.word	0x00c90127
 8006f08:	00dd00fe 	.word	0x00dd00fe
 8006f0c:	00d605b2 	.word	0x00d605b2
 8006f10:	046f05b2 	.word	0x046f05b2
 8006f14:	04c80494 	.word	0x04c80494
 8006f18:	05b200dd 	.word	0x05b200dd
 8006f1c:	007c04d9 	.word	0x007c04d9
 8006f20:	05b204fc 	.word	0x05b204fc
 8006f24:	053605b2 	.word	0x053605b2
 8006f28:	007c05b2 	.word	0x007c05b2
 8006f2c:	aa22      	add	r2, sp, #136	; 0x88
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4650      	mov	r0, sl
 8006f32:	f007 fc13 	bl	800e75c <__ssprint_r>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f040 8132 	bne.w	80071a0 <_svfprintf_r+0x410>
 8006f3c:	ac25      	add	r4, sp, #148	; 0x94
 8006f3e:	e77c      	b.n	8006e3a <_svfprintf_r+0xaa>
 8006f40:	4650      	mov	r0, sl
 8006f42:	f005 fadb 	bl	800c4fc <_localeconv_r>
 8006f46:	6843      	ldr	r3, [r0, #4]
 8006f48:	9314      	str	r3, [sp, #80]	; 0x50
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 f94a 	bl	80001e4 <strlen>
 8006f50:	9012      	str	r0, [sp, #72]	; 0x48
 8006f52:	4650      	mov	r0, sl
 8006f54:	f005 fad2 	bl	800c4fc <_localeconv_r>
 8006f58:	6883      	ldr	r3, [r0, #8]
 8006f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f5e:	212b      	movs	r1, #43	; 0x2b
 8006f60:	b12b      	cbz	r3, 8006f6e <_svfprintf_r+0x1de>
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	b11b      	cbz	r3, 8006f6e <_svfprintf_r+0x1de>
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b10b      	cbz	r3, 8006f6e <_svfprintf_r+0x1de>
 8006f6a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8006f6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f70:	e775      	b.n	8006e5e <_svfprintf_r+0xce>
 8006f72:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f9      	bne.n	8006f6e <_svfprintf_r+0x1de>
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006f80:	e7f5      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006f82:	f048 0801 	orr.w	r8, r8, #1
 8006f86:	e7f2      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006f88:	f856 3b04 	ldr.w	r3, [r6], #4
 8006f8c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	daed      	bge.n	8006f6e <_svfprintf_r+0x1de>
 8006f92:	425b      	negs	r3, r3
 8006f94:	9310      	str	r3, [sp, #64]	; 0x40
 8006f96:	f048 0804 	orr.w	r8, r8, #4
 8006f9a:	e7e8      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006f9c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8006fa0:	e7e5      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fa4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006fa8:	9307      	str	r3, [sp, #28]
 8006faa:	2b2a      	cmp	r3, #42	; 0x2a
 8006fac:	d113      	bne.n	8006fd6 <_svfprintf_r+0x246>
 8006fae:	f856 0b04 	ldr.w	r0, [r6], #4
 8006fb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fb4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	e7d8      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006fbc:	9804      	ldr	r0, [sp, #16]
 8006fbe:	fb07 3300 	mla	r3, r7, r0, r3
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006fc8:	9307      	str	r3, [sp, #28]
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	3b30      	subs	r3, #48	; 0x30
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d9f4      	bls.n	8006fbc <_svfprintf_r+0x22c>
 8006fd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fd4:	e748      	b.n	8006e68 <_svfprintf_r+0xd8>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	e7f6      	b.n	8006fca <_svfprintf_r+0x23a>
 8006fdc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8006fe0:	e7c5      	b.n	8006f6e <_svfprintf_r+0x1de>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe6:	9310      	str	r3, [sp, #64]	; 0x40
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006fec:	3b30      	subs	r3, #48	; 0x30
 8006fee:	fb07 3300 	mla	r3, r7, r0, r3
 8006ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8006ff4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	3b30      	subs	r3, #48	; 0x30
 8006ffc:	2b09      	cmp	r3, #9
 8006ffe:	d9f3      	bls.n	8006fe8 <_svfprintf_r+0x258>
 8007000:	e7e7      	b.n	8006fd2 <_svfprintf_r+0x242>
 8007002:	f048 0808 	orr.w	r8, r8, #8
 8007006:	e7b2      	b.n	8006f6e <_svfprintf_r+0x1de>
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b68      	cmp	r3, #104	; 0x68
 800700e:	bf01      	itttt	eq
 8007010:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8007012:	3301      	addeq	r3, #1
 8007014:	930b      	streq	r3, [sp, #44]	; 0x2c
 8007016:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800701a:	bf18      	it	ne
 800701c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8007020:	e7a5      	b.n	8006f6e <_svfprintf_r+0x1de>
 8007022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b6c      	cmp	r3, #108	; 0x6c
 8007028:	d105      	bne.n	8007036 <_svfprintf_r+0x2a6>
 800702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702c:	3301      	adds	r3, #1
 800702e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007030:	f048 0820 	orr.w	r8, r8, #32
 8007034:	e79b      	b.n	8006f6e <_svfprintf_r+0x1de>
 8007036:	f048 0810 	orr.w	r8, r8, #16
 800703a:	e798      	b.n	8006f6e <_svfprintf_r+0x1de>
 800703c:	f3af 8000 	nop.w
	...
 8007048:	4632      	mov	r2, r6
 800704a:	2000      	movs	r0, #0
 800704c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007050:	9206      	str	r2, [sp, #24]
 8007052:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8007056:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800705a:	2301      	movs	r3, #1
 800705c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8007060:	9003      	str	r0, [sp, #12]
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	4606      	mov	r6, r0
 8007066:	4605      	mov	r5, r0
 8007068:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800706c:	e1b8      	b.n	80073e0 <_svfprintf_r+0x650>
 800706e:	f048 0810 	orr.w	r8, r8, #16
 8007072:	f018 0f20 	tst.w	r8, #32
 8007076:	d012      	beq.n	800709e <_svfprintf_r+0x30e>
 8007078:	3607      	adds	r6, #7
 800707a:	f026 0307 	bic.w	r3, r6, #7
 800707e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	2e00      	cmp	r6, #0
 8007086:	f177 0300 	sbcs.w	r3, r7, #0
 800708a:	da06      	bge.n	800709a <_svfprintf_r+0x30a>
 800708c:	4276      	negs	r6, r6
 800708e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007092:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007096:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800709a:	2301      	movs	r3, #1
 800709c:	e38e      	b.n	80077bc <_svfprintf_r+0xa2c>
 800709e:	1d33      	adds	r3, r6, #4
 80070a0:	f018 0f10 	tst.w	r8, #16
 80070a4:	9306      	str	r3, [sp, #24]
 80070a6:	d002      	beq.n	80070ae <_svfprintf_r+0x31e>
 80070a8:	6836      	ldr	r6, [r6, #0]
 80070aa:	17f7      	asrs	r7, r6, #31
 80070ac:	e7ea      	b.n	8007084 <_svfprintf_r+0x2f4>
 80070ae:	f018 0f40 	tst.w	r8, #64	; 0x40
 80070b2:	6836      	ldr	r6, [r6, #0]
 80070b4:	d001      	beq.n	80070ba <_svfprintf_r+0x32a>
 80070b6:	b236      	sxth	r6, r6
 80070b8:	e7f7      	b.n	80070aa <_svfprintf_r+0x31a>
 80070ba:	f418 7f00 	tst.w	r8, #512	; 0x200
 80070be:	bf18      	it	ne
 80070c0:	b276      	sxtbne	r6, r6
 80070c2:	e7f2      	b.n	80070aa <_svfprintf_r+0x31a>
 80070c4:	3607      	adds	r6, #7
 80070c6:	f026 0307 	bic.w	r3, r6, #7
 80070ca:	ecb3 7b02 	vldmia	r3!, {d7}
 80070ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80070d2:	9306      	str	r3, [sp, #24]
 80070d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070d6:	ee09 3a10 	vmov	s18, r3
 80070da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	ee09 3a90 	vmov	s19, r3
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	4b3a      	ldr	r3, [pc, #232]	; (80071d4 <_svfprintf_r+0x444>)
 80070ea:	ec51 0b19 	vmov	r0, r1, d9
 80070ee:	f7f9 fd2d 	bl	8000b4c <__aeabi_dcmpun>
 80070f2:	bb10      	cbnz	r0, 800713a <_svfprintf_r+0x3aa>
 80070f4:	4b37      	ldr	r3, [pc, #220]	; (80071d4 <_svfprintf_r+0x444>)
 80070f6:	ec51 0b19 	vmov	r0, r1, d9
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	f7f9 fd07 	bl	8000b10 <__aeabi_dcmple>
 8007102:	b9d0      	cbnz	r0, 800713a <_svfprintf_r+0x3aa>
 8007104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	f7f9 fcf6 	bl	8000afc <__aeabi_dcmplt>
 8007110:	b110      	cbz	r0, 8007118 <_svfprintf_r+0x388>
 8007112:	232d      	movs	r3, #45	; 0x2d
 8007114:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <_svfprintf_r+0x448>)
 800711a:	4830      	ldr	r0, [pc, #192]	; (80071dc <_svfprintf_r+0x44c>)
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	2100      	movs	r1, #0
 8007120:	2b47      	cmp	r3, #71	; 0x47
 8007122:	bfd4      	ite	le
 8007124:	4693      	movle	fp, r2
 8007126:	4683      	movgt	fp, r0
 8007128:	2303      	movs	r3, #3
 800712a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800712e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8007132:	2600      	movs	r6, #0
 8007134:	4633      	mov	r3, r6
 8007136:	f001 b802 	b.w	800813e <_svfprintf_r+0x13ae>
 800713a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	f7f9 fd03 	bl	8000b4c <__aeabi_dcmpun>
 8007146:	b140      	cbz	r0, 800715a <_svfprintf_r+0x3ca>
 8007148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714a:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <_svfprintf_r+0x450>)
 800714c:	4825      	ldr	r0, [pc, #148]	; (80071e4 <_svfprintf_r+0x454>)
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfbc      	itt	lt
 8007152:	232d      	movlt	r3, #45	; 0x2d
 8007154:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8007158:	e7e0      	b.n	800711c <_svfprintf_r+0x38c>
 800715a:	9b07      	ldr	r3, [sp, #28]
 800715c:	f023 0320 	bic.w	r3, r3, #32
 8007160:	2b41      	cmp	r3, #65	; 0x41
 8007162:	9308      	str	r3, [sp, #32]
 8007164:	d125      	bne.n	80071b2 <_svfprintf_r+0x422>
 8007166:	2330      	movs	r3, #48	; 0x30
 8007168:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	2b61      	cmp	r3, #97	; 0x61
 8007170:	bf0c      	ite	eq
 8007172:	2378      	moveq	r3, #120	; 0x78
 8007174:	2358      	movne	r3, #88	; 0x58
 8007176:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	2b63      	cmp	r3, #99	; 0x63
 800717e:	f048 0802 	orr.w	r8, r8, #2
 8007182:	dd31      	ble.n	80071e8 <_svfprintf_r+0x458>
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	4650      	mov	r0, sl
 8007188:	f7ff faf6 	bl	8006778 <_malloc_r>
 800718c:	4683      	mov	fp, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 81fe 	bne.w	8007590 <_svfprintf_r+0x800>
 8007194:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800719c:	f8a9 300c 	strh.w	r3, [r9, #12]
 80071a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80071a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071aa:	bf18      	it	ne
 80071ac:	f04f 33ff 	movne.w	r3, #4294967295
 80071b0:	e614      	b.n	8006ddc <_svfprintf_r+0x4c>
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	f000 81ed 	beq.w	8007594 <_svfprintf_r+0x804>
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	2b47      	cmp	r3, #71	; 0x47
 80071be:	f040 81ec 	bne.w	800759a <_svfprintf_r+0x80a>
 80071c2:	9b04      	ldr	r3, [sp, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 81e8 	bne.w	800759a <_svfprintf_r+0x80a>
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	2301      	movs	r3, #1
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	e00d      	b.n	80071ee <_svfprintf_r+0x45e>
 80071d2:	bf00      	nop
 80071d4:	7fefffff 	.word	0x7fefffff
 80071d8:	08011c60 	.word	0x08011c60
 80071dc:	08011c64 	.word	0x08011c64
 80071e0:	08011c68 	.word	0x08011c68
 80071e4:	08011c6c 	.word	0x08011c6c
 80071e8:	9003      	str	r0, [sp, #12]
 80071ea:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80071ee:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80071f2:	9311      	str	r3, [sp, #68]	; 0x44
 80071f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f280 81d1 	bge.w	800759e <_svfprintf_r+0x80e>
 80071fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071fe:	ee08 3a10 	vmov	s16, r3
 8007202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007204:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007208:	ee08 3a90 	vmov	s17, r3
 800720c:	232d      	movs	r3, #45	; 0x2d
 800720e:	9318      	str	r3, [sp, #96]	; 0x60
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	2b41      	cmp	r3, #65	; 0x41
 8007214:	f040 81e1 	bne.w	80075da <_svfprintf_r+0x84a>
 8007218:	eeb0 0a48 	vmov.f32	s0, s16
 800721c:	eef0 0a68 	vmov.f32	s1, s17
 8007220:	a81c      	add	r0, sp, #112	; 0x70
 8007222:	f006 f8d7 	bl	800d3d4 <frexp>
 8007226:	2200      	movs	r2, #0
 8007228:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800722c:	ec51 0b10 	vmov	r0, r1, d0
 8007230:	f7f9 f9f2 	bl	8000618 <__aeabi_dmul>
 8007234:	2200      	movs	r2, #0
 8007236:	2300      	movs	r3, #0
 8007238:	4606      	mov	r6, r0
 800723a:	460f      	mov	r7, r1
 800723c:	f7f9 fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 8007240:	b108      	cbz	r0, 8007246 <_svfprintf_r+0x4b6>
 8007242:	2301      	movs	r3, #1
 8007244:	931c      	str	r3, [sp, #112]	; 0x70
 8007246:	4bb4      	ldr	r3, [pc, #720]	; (8007518 <_svfprintf_r+0x788>)
 8007248:	4ab4      	ldr	r2, [pc, #720]	; (800751c <_svfprintf_r+0x78c>)
 800724a:	9907      	ldr	r1, [sp, #28]
 800724c:	2961      	cmp	r1, #97	; 0x61
 800724e:	bf18      	it	ne
 8007250:	461a      	movne	r2, r3
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	9217      	str	r2, [sp, #92]	; 0x5c
 8007256:	3b01      	subs	r3, #1
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	465d      	mov	r5, fp
 800725c:	4bb0      	ldr	r3, [pc, #704]	; (8007520 <_svfprintf_r+0x790>)
 800725e:	2200      	movs	r2, #0
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 f9d8 	bl	8000618 <__aeabi_dmul>
 8007268:	460f      	mov	r7, r1
 800726a:	4606      	mov	r6, r0
 800726c:	f7f9 fc84 	bl	8000b78 <__aeabi_d2iz>
 8007270:	9019      	str	r0, [sp, #100]	; 0x64
 8007272:	f7f9 f967 	bl	8000544 <__aeabi_i2d>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 f813 	bl	80002a8 <__aeabi_dsub>
 8007282:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007286:	5c9b      	ldrb	r3, [r3, r2]
 8007288:	f805 3b01 	strb.w	r3, [r5], #1
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	9309      	str	r3, [sp, #36]	; 0x24
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	d007      	beq.n	80072a8 <_svfprintf_r+0x518>
 8007298:	3b01      	subs	r3, #1
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	f7f9 fc22 	bl	8000ae8 <__aeabi_dcmpeq>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0d9      	beq.n	800725c <_svfprintf_r+0x4cc>
 80072a8:	4b9e      	ldr	r3, [pc, #632]	; (8007524 <_svfprintf_r+0x794>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	4630      	mov	r0, r6
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f9 fc42 	bl	8000b38 <__aeabi_dcmpgt>
 80072b4:	b960      	cbnz	r0, 80072d0 <_svfprintf_r+0x540>
 80072b6:	4b9b      	ldr	r3, [pc, #620]	; (8007524 <_svfprintf_r+0x794>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	4630      	mov	r0, r6
 80072bc:	4639      	mov	r1, r7
 80072be:	f7f9 fc13 	bl	8000ae8 <__aeabi_dcmpeq>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f000 8184 	beq.w	80075d0 <_svfprintf_r+0x840>
 80072c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072ca:	07df      	lsls	r7, r3, #31
 80072cc:	f140 8180 	bpl.w	80075d0 <_svfprintf_r+0x840>
 80072d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d2:	9520      	str	r5, [sp, #128]	; 0x80
 80072d4:	7bd9      	ldrb	r1, [r3, #15]
 80072d6:	2030      	movs	r0, #48	; 0x30
 80072d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072da:	1e53      	subs	r3, r2, #1
 80072dc:	9320      	str	r3, [sp, #128]	; 0x80
 80072de:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80072e2:	428b      	cmp	r3, r1
 80072e4:	f000 8163 	beq.w	80075ae <_svfprintf_r+0x81e>
 80072e8:	2b39      	cmp	r3, #57	; 0x39
 80072ea:	bf0b      	itete	eq
 80072ec:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80072ee:	3301      	addne	r3, #1
 80072f0:	7a9b      	ldrbeq	r3, [r3, #10]
 80072f2:	b2db      	uxtbne	r3, r3
 80072f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072f8:	eba5 030b 	sub.w	r3, r5, fp
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	9b08      	ldr	r3, [sp, #32]
 8007300:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007302:	2b47      	cmp	r3, #71	; 0x47
 8007304:	f040 81b1 	bne.w	800766a <_svfprintf_r+0x8da>
 8007308:	1cee      	adds	r6, r5, #3
 800730a:	db03      	blt.n	8007314 <_svfprintf_r+0x584>
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	42ab      	cmp	r3, r5
 8007310:	f280 81d6 	bge.w	80076c0 <_svfprintf_r+0x930>
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	3b02      	subs	r3, #2
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	9907      	ldr	r1, [sp, #28]
 800731c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007320:	f021 0120 	bic.w	r1, r1, #32
 8007324:	2941      	cmp	r1, #65	; 0x41
 8007326:	bf08      	it	eq
 8007328:	320f      	addeq	r2, #15
 800732a:	f105 33ff 	add.w	r3, r5, #4294967295
 800732e:	bf06      	itte	eq
 8007330:	b2d2      	uxtbeq	r2, r2
 8007332:	2101      	moveq	r1, #1
 8007334:	2100      	movne	r1, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	931c      	str	r3, [sp, #112]	; 0x70
 800733a:	bfb8      	it	lt
 800733c:	f1c5 0301 	rsblt	r3, r5, #1
 8007340:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007344:	bfb4      	ite	lt
 8007346:	222d      	movlt	r2, #45	; 0x2d
 8007348:	222b      	movge	r2, #43	; 0x2b
 800734a:	2b09      	cmp	r3, #9
 800734c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8007350:	f340 81a4 	ble.w	800769c <_svfprintf_r+0x90c>
 8007354:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8007358:	260a      	movs	r6, #10
 800735a:	4611      	mov	r1, r2
 800735c:	fb93 f5f6 	sdiv	r5, r3, r6
 8007360:	fb06 3015 	mls	r0, r6, r5, r3
 8007364:	3030      	adds	r0, #48	; 0x30
 8007366:	f801 0c01 	strb.w	r0, [r1, #-1]
 800736a:	4618      	mov	r0, r3
 800736c:	2863      	cmp	r0, #99	; 0x63
 800736e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007372:	462b      	mov	r3, r5
 8007374:	dcf1      	bgt.n	800735a <_svfprintf_r+0x5ca>
 8007376:	3330      	adds	r3, #48	; 0x30
 8007378:	1e88      	subs	r0, r1, #2
 800737a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800737e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8007382:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8007386:	4603      	mov	r3, r0
 8007388:	42ab      	cmp	r3, r5
 800738a:	f0c0 8182 	bcc.w	8007692 <_svfprintf_r+0x902>
 800738e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8007392:	1a52      	subs	r2, r2, r1
 8007394:	42a8      	cmp	r0, r5
 8007396:	bf88      	it	hi
 8007398:	2200      	movhi	r2, #0
 800739a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800739e:	441a      	add	r2, r3
 80073a0:	ab1e      	add	r3, sp, #120	; 0x78
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	9a05      	ldr	r2, [sp, #20]
 80073a6:	9315      	str	r3, [sp, #84]	; 0x54
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	dc02      	bgt.n	80073b6 <_svfprintf_r+0x626>
 80073b0:	f018 0f01 	tst.w	r8, #1
 80073b4:	d003      	beq.n	80073be <_svfprintf_r+0x62e>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073ba:	4413      	add	r3, r2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80073c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c6:	9311      	str	r3, [sp, #68]	; 0x44
 80073c8:	2300      	movs	r3, #0
 80073ca:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80073ce:	461d      	mov	r5, r3
 80073d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80073d2:	b113      	cbz	r3, 80073da <_svfprintf_r+0x64a>
 80073d4:	232d      	movs	r3, #45	; 0x2d
 80073d6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80073da:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80073de:	2600      	movs	r6, #0
 80073e0:	9b04      	ldr	r3, [sp, #16]
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	bfb8      	it	lt
 80073e6:	4633      	movlt	r3, r6
 80073e8:	9311      	str	r3, [sp, #68]	; 0x44
 80073ea:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80073ee:	b113      	cbz	r3, 80073f6 <_svfprintf_r+0x666>
 80073f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073f2:	3301      	adds	r3, #1
 80073f4:	9311      	str	r3, [sp, #68]	; 0x44
 80073f6:	f018 0302 	ands.w	r3, r8, #2
 80073fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80073fc:	bf1e      	ittt	ne
 80073fe:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007400:	3302      	addne	r3, #2
 8007402:	9311      	strne	r3, [sp, #68]	; 0x44
 8007404:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8007408:	9318      	str	r3, [sp, #96]	; 0x60
 800740a:	d11f      	bne.n	800744c <_svfprintf_r+0x6bc>
 800740c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007410:	1a9f      	subs	r7, r3, r2
 8007412:	2f00      	cmp	r7, #0
 8007414:	dd1a      	ble.n	800744c <_svfprintf_r+0x6bc>
 8007416:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800741a:	4843      	ldr	r0, [pc, #268]	; (8007528 <_svfprintf_r+0x798>)
 800741c:	6020      	str	r0, [r4, #0]
 800741e:	2f10      	cmp	r7, #16
 8007420:	f103 0301 	add.w	r3, r3, #1
 8007424:	f104 0108 	add.w	r1, r4, #8
 8007428:	f300 82e6 	bgt.w	80079f8 <_svfprintf_r+0xc68>
 800742c:	6067      	str	r7, [r4, #4]
 800742e:	2b07      	cmp	r3, #7
 8007430:	4417      	add	r7, r2
 8007432:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8007436:	f340 82f2 	ble.w	8007a1e <_svfprintf_r+0xc8e>
 800743a:	aa22      	add	r2, sp, #136	; 0x88
 800743c:	4649      	mov	r1, r9
 800743e:	4650      	mov	r0, sl
 8007440:	f007 f98c 	bl	800e75c <__ssprint_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 861d 	bne.w	8008084 <_svfprintf_r+0x12f4>
 800744a:	ac25      	add	r4, sp, #148	; 0x94
 800744c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007450:	b173      	cbz	r3, 8007470 <_svfprintf_r+0x6e0>
 8007452:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	2301      	movs	r3, #1
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800745e:	3301      	adds	r3, #1
 8007460:	9324      	str	r3, [sp, #144]	; 0x90
 8007462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007464:	3301      	adds	r3, #1
 8007466:	2b07      	cmp	r3, #7
 8007468:	9323      	str	r3, [sp, #140]	; 0x8c
 800746a:	f300 82da 	bgt.w	8007a22 <_svfprintf_r+0xc92>
 800746e:	3408      	adds	r4, #8
 8007470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007472:	b16b      	cbz	r3, 8007490 <_svfprintf_r+0x700>
 8007474:	ab1b      	add	r3, sp, #108	; 0x6c
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	2302      	movs	r3, #2
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800747e:	3302      	adds	r3, #2
 8007480:	9324      	str	r3, [sp, #144]	; 0x90
 8007482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007484:	3301      	adds	r3, #1
 8007486:	2b07      	cmp	r3, #7
 8007488:	9323      	str	r3, [sp, #140]	; 0x8c
 800748a:	f300 82d4 	bgt.w	8007a36 <_svfprintf_r+0xca6>
 800748e:	3408      	adds	r4, #8
 8007490:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d11f      	bne.n	80074d6 <_svfprintf_r+0x746>
 8007496:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800749a:	1a9f      	subs	r7, r3, r2
 800749c:	2f00      	cmp	r7, #0
 800749e:	dd1a      	ble.n	80074d6 <_svfprintf_r+0x746>
 80074a0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80074a4:	4821      	ldr	r0, [pc, #132]	; (800752c <_svfprintf_r+0x79c>)
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	2f10      	cmp	r7, #16
 80074aa:	f103 0301 	add.w	r3, r3, #1
 80074ae:	f104 0108 	add.w	r1, r4, #8
 80074b2:	f300 82ca 	bgt.w	8007a4a <_svfprintf_r+0xcba>
 80074b6:	6067      	str	r7, [r4, #4]
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	4417      	add	r7, r2
 80074bc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80074c0:	f340 82d6 	ble.w	8007a70 <_svfprintf_r+0xce0>
 80074c4:	aa22      	add	r2, sp, #136	; 0x88
 80074c6:	4649      	mov	r1, r9
 80074c8:	4650      	mov	r0, sl
 80074ca:	f007 f947 	bl	800e75c <__ssprint_r>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f040 85d8 	bne.w	8008084 <_svfprintf_r+0x12f4>
 80074d4:	ac25      	add	r4, sp, #148	; 0x94
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	1af6      	subs	r6, r6, r3
 80074da:	2e00      	cmp	r6, #0
 80074dc:	dd28      	ble.n	8007530 <_svfprintf_r+0x7a0>
 80074de:	4f13      	ldr	r7, [pc, #76]	; (800752c <_svfprintf_r+0x79c>)
 80074e0:	6027      	str	r7, [r4, #0]
 80074e2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80074e6:	2e10      	cmp	r6, #16
 80074e8:	f103 0301 	add.w	r3, r3, #1
 80074ec:	f104 0108 	add.w	r1, r4, #8
 80074f0:	f300 82c0 	bgt.w	8007a74 <_svfprintf_r+0xce4>
 80074f4:	6066      	str	r6, [r4, #4]
 80074f6:	2b07      	cmp	r3, #7
 80074f8:	4416      	add	r6, r2
 80074fa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80074fe:	f340 82cc 	ble.w	8007a9a <_svfprintf_r+0xd0a>
 8007502:	aa22      	add	r2, sp, #136	; 0x88
 8007504:	4649      	mov	r1, r9
 8007506:	4650      	mov	r0, sl
 8007508:	f007 f928 	bl	800e75c <__ssprint_r>
 800750c:	2800      	cmp	r0, #0
 800750e:	f040 85b9 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007512:	ac25      	add	r4, sp, #148	; 0x94
 8007514:	e00c      	b.n	8007530 <_svfprintf_r+0x7a0>
 8007516:	bf00      	nop
 8007518:	08011c81 	.word	0x08011c81
 800751c:	08011c70 	.word	0x08011c70
 8007520:	40300000 	.word	0x40300000
 8007524:	3fe00000 	.word	0x3fe00000
 8007528:	08011c94 	.word	0x08011c94
 800752c:	08011ca4 	.word	0x08011ca4
 8007530:	f418 7f80 	tst.w	r8, #256	; 0x100
 8007534:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007536:	f040 82b7 	bne.w	8007aa8 <_svfprintf_r+0xd18>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	f8c4 b000 	str.w	fp, [r4]
 8007540:	441e      	add	r6, r3
 8007542:	6063      	str	r3, [r4, #4]
 8007544:	9624      	str	r6, [sp, #144]	; 0x90
 8007546:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007548:	3301      	adds	r3, #1
 800754a:	2b07      	cmp	r3, #7
 800754c:	9323      	str	r3, [sp, #140]	; 0x8c
 800754e:	f300 82f0 	bgt.w	8007b32 <_svfprintf_r+0xda2>
 8007552:	3408      	adds	r4, #8
 8007554:	f018 0f04 	tst.w	r8, #4
 8007558:	f040 8576 	bne.w	8008048 <_svfprintf_r+0x12b8>
 800755c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8007560:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007562:	428a      	cmp	r2, r1
 8007564:	bfac      	ite	ge
 8007566:	189b      	addge	r3, r3, r2
 8007568:	185b      	addlt	r3, r3, r1
 800756a:	930f      	str	r3, [sp, #60]	; 0x3c
 800756c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800756e:	b13b      	cbz	r3, 8007580 <_svfprintf_r+0x7f0>
 8007570:	aa22      	add	r2, sp, #136	; 0x88
 8007572:	4649      	mov	r1, r9
 8007574:	4650      	mov	r0, sl
 8007576:	f007 f8f1 	bl	800e75c <__ssprint_r>
 800757a:	2800      	cmp	r0, #0
 800757c:	f040 8582 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007580:	2300      	movs	r3, #0
 8007582:	9323      	str	r3, [sp, #140]	; 0x8c
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8598 	bne.w	80080bc <_svfprintf_r+0x132c>
 800758c:	ac25      	add	r4, sp, #148	; 0x94
 800758e:	e0ed      	b.n	800776c <_svfprintf_r+0x9dc>
 8007590:	9003      	str	r0, [sp, #12]
 8007592:	e62c      	b.n	80071ee <_svfprintf_r+0x45e>
 8007594:	9003      	str	r0, [sp, #12]
 8007596:	2306      	movs	r3, #6
 8007598:	e619      	b.n	80071ce <_svfprintf_r+0x43e>
 800759a:	9003      	str	r0, [sp, #12]
 800759c:	e627      	b.n	80071ee <_svfprintf_r+0x45e>
 800759e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80075a2:	2300      	movs	r3, #0
 80075a4:	eeb0 8a47 	vmov.f32	s16, s14
 80075a8:	eef0 8a67 	vmov.f32	s17, s15
 80075ac:	e62f      	b.n	800720e <_svfprintf_r+0x47e>
 80075ae:	f802 0c01 	strb.w	r0, [r2, #-1]
 80075b2:	e691      	b.n	80072d8 <_svfprintf_r+0x548>
 80075b4:	f803 0b01 	strb.w	r0, [r3], #1
 80075b8:	1aca      	subs	r2, r1, r3
 80075ba:	2a00      	cmp	r2, #0
 80075bc:	dafa      	bge.n	80075b4 <_svfprintf_r+0x824>
 80075be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	3201      	adds	r2, #1
 80075c4:	f103 0301 	add.w	r3, r3, #1
 80075c8:	bfb8      	it	lt
 80075ca:	2300      	movlt	r3, #0
 80075cc:	441d      	add	r5, r3
 80075ce:	e693      	b.n	80072f8 <_svfprintf_r+0x568>
 80075d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d2:	462b      	mov	r3, r5
 80075d4:	18a9      	adds	r1, r5, r2
 80075d6:	2030      	movs	r0, #48	; 0x30
 80075d8:	e7ee      	b.n	80075b8 <_svfprintf_r+0x828>
 80075da:	9b08      	ldr	r3, [sp, #32]
 80075dc:	2b46      	cmp	r3, #70	; 0x46
 80075de:	d005      	beq.n	80075ec <_svfprintf_r+0x85c>
 80075e0:	2b45      	cmp	r3, #69	; 0x45
 80075e2:	d11b      	bne.n	800761c <_svfprintf_r+0x88c>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	1c5d      	adds	r5, r3, #1
 80075e8:	2102      	movs	r1, #2
 80075ea:	e001      	b.n	80075f0 <_svfprintf_r+0x860>
 80075ec:	9d04      	ldr	r5, [sp, #16]
 80075ee:	2103      	movs	r1, #3
 80075f0:	ab20      	add	r3, sp, #128	; 0x80
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	ab1d      	add	r3, sp, #116	; 0x74
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	462a      	mov	r2, r5
 80075fa:	ab1c      	add	r3, sp, #112	; 0x70
 80075fc:	4650      	mov	r0, sl
 80075fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007602:	eef0 0a68 	vmov.f32	s1, s17
 8007606:	f003 fd53 	bl	800b0b0 <_dtoa_r>
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	2b47      	cmp	r3, #71	; 0x47
 800760e:	4683      	mov	fp, r0
 8007610:	d106      	bne.n	8007620 <_svfprintf_r+0x890>
 8007612:	f018 0f01 	tst.w	r8, #1
 8007616:	d103      	bne.n	8007620 <_svfprintf_r+0x890>
 8007618:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800761a:	e66d      	b.n	80072f8 <_svfprintf_r+0x568>
 800761c:	9d04      	ldr	r5, [sp, #16]
 800761e:	e7e3      	b.n	80075e8 <_svfprintf_r+0x858>
 8007620:	9b08      	ldr	r3, [sp, #32]
 8007622:	2b46      	cmp	r3, #70	; 0x46
 8007624:	eb0b 0605 	add.w	r6, fp, r5
 8007628:	d10f      	bne.n	800764a <_svfprintf_r+0x8ba>
 800762a:	f89b 3000 	ldrb.w	r3, [fp]
 800762e:	2b30      	cmp	r3, #48	; 0x30
 8007630:	d109      	bne.n	8007646 <_svfprintf_r+0x8b6>
 8007632:	ec51 0b18 	vmov	r0, r1, d8
 8007636:	2200      	movs	r2, #0
 8007638:	2300      	movs	r3, #0
 800763a:	f7f9 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800763e:	b910      	cbnz	r0, 8007646 <_svfprintf_r+0x8b6>
 8007640:	f1c5 0501 	rsb	r5, r5, #1
 8007644:	951c      	str	r5, [sp, #112]	; 0x70
 8007646:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007648:	441e      	add	r6, r3
 800764a:	ec51 0b18 	vmov	r0, r1, d8
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	f7f9 fa49 	bl	8000ae8 <__aeabi_dcmpeq>
 8007656:	b100      	cbz	r0, 800765a <_svfprintf_r+0x8ca>
 8007658:	9620      	str	r6, [sp, #128]	; 0x80
 800765a:	2230      	movs	r2, #48	; 0x30
 800765c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800765e:	429e      	cmp	r6, r3
 8007660:	d9da      	bls.n	8007618 <_svfprintf_r+0x888>
 8007662:	1c59      	adds	r1, r3, #1
 8007664:	9120      	str	r1, [sp, #128]	; 0x80
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e7f8      	b.n	800765c <_svfprintf_r+0x8cc>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	2b46      	cmp	r3, #70	; 0x46
 800766e:	f47f ae54 	bne.w	800731a <_svfprintf_r+0x58a>
 8007672:	9a04      	ldr	r2, [sp, #16]
 8007674:	f008 0301 	and.w	r3, r8, #1
 8007678:	2d00      	cmp	r5, #0
 800767a:	ea43 0302 	orr.w	r3, r3, r2
 800767e:	dd1a      	ble.n	80076b6 <_svfprintf_r+0x926>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d034      	beq.n	80076ee <_svfprintf_r+0x95e>
 8007684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007686:	18eb      	adds	r3, r5, r3
 8007688:	441a      	add	r2, r3
 800768a:	9204      	str	r2, [sp, #16]
 800768c:	2366      	movs	r3, #102	; 0x66
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	e033      	b.n	80076fa <_svfprintf_r+0x96a>
 8007692:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007696:	f802 6b01 	strb.w	r6, [r2], #1
 800769a:	e675      	b.n	8007388 <_svfprintf_r+0x5f8>
 800769c:	b941      	cbnz	r1, 80076b0 <_svfprintf_r+0x920>
 800769e:	2230      	movs	r2, #48	; 0x30
 80076a0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80076a4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80076a8:	3330      	adds	r3, #48	; 0x30
 80076aa:	f802 3b01 	strb.w	r3, [r2], #1
 80076ae:	e677      	b.n	80073a0 <_svfprintf_r+0x610>
 80076b0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80076b4:	e7f8      	b.n	80076a8 <_svfprintf_r+0x918>
 80076b6:	b1e3      	cbz	r3, 80076f2 <_svfprintf_r+0x962>
 80076b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ba:	9a04      	ldr	r2, [sp, #16]
 80076bc:	3301      	adds	r3, #1
 80076be:	e7e3      	b.n	8007688 <_svfprintf_r+0x8f8>
 80076c0:	9b05      	ldr	r3, [sp, #20]
 80076c2:	429d      	cmp	r5, r3
 80076c4:	db07      	blt.n	80076d6 <_svfprintf_r+0x946>
 80076c6:	f018 0f01 	tst.w	r8, #1
 80076ca:	d02d      	beq.n	8007728 <_svfprintf_r+0x998>
 80076cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ce:	18eb      	adds	r3, r5, r3
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	2367      	movs	r3, #103	; 0x67
 80076d4:	e7db      	b.n	800768e <_svfprintf_r+0x8fe>
 80076d6:	9b05      	ldr	r3, [sp, #20]
 80076d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076da:	2d00      	cmp	r5, #0
 80076dc:	4413      	add	r3, r2
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	dcf7      	bgt.n	80076d2 <_svfprintf_r+0x942>
 80076e2:	9a04      	ldr	r2, [sp, #16]
 80076e4:	f1c5 0301 	rsb	r3, r5, #1
 80076e8:	441a      	add	r2, r3
 80076ea:	4613      	mov	r3, r2
 80076ec:	e7f0      	b.n	80076d0 <_svfprintf_r+0x940>
 80076ee:	9504      	str	r5, [sp, #16]
 80076f0:	e7cc      	b.n	800768c <_svfprintf_r+0x8fc>
 80076f2:	2366      	movs	r3, #102	; 0x66
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	2301      	movs	r3, #1
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	d025      	beq.n	800774e <_svfprintf_r+0x9be>
 8007702:	2300      	movs	r3, #0
 8007704:	2d00      	cmp	r5, #0
 8007706:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800770a:	f77f ae61 	ble.w	80073d0 <_svfprintf_r+0x640>
 800770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2bff      	cmp	r3, #255	; 0xff
 8007714:	d10a      	bne.n	800772c <_svfprintf_r+0x99c>
 8007716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800771a:	9904      	ldr	r1, [sp, #16]
 800771c:	4413      	add	r3, r2
 800771e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007720:	fb02 1303 	mla	r3, r2, r3, r1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	e653      	b.n	80073d0 <_svfprintf_r+0x640>
 8007728:	9504      	str	r5, [sp, #16]
 800772a:	e7d2      	b.n	80076d2 <_svfprintf_r+0x942>
 800772c:	42ab      	cmp	r3, r5
 800772e:	daf2      	bge.n	8007716 <_svfprintf_r+0x986>
 8007730:	1aed      	subs	r5, r5, r3
 8007732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	b133      	cbz	r3, 8007746 <_svfprintf_r+0x9b6>
 8007738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773a:	3301      	adds	r3, #1
 800773c:	9309      	str	r3, [sp, #36]	; 0x24
 800773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007740:	3301      	adds	r3, #1
 8007742:	930a      	str	r3, [sp, #40]	; 0x28
 8007744:	e7e3      	b.n	800770e <_svfprintf_r+0x97e>
 8007746:	9b08      	ldr	r3, [sp, #32]
 8007748:	3301      	adds	r3, #1
 800774a:	9308      	str	r3, [sp, #32]
 800774c:	e7df      	b.n	800770e <_svfprintf_r+0x97e>
 800774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	e63d      	b.n	80073d0 <_svfprintf_r+0x640>
 8007754:	4632      	mov	r2, r6
 8007756:	f018 0f20 	tst.w	r8, #32
 800775a:	f852 3b04 	ldr.w	r3, [r2], #4
 800775e:	9206      	str	r2, [sp, #24]
 8007760:	d009      	beq.n	8007776 <_svfprintf_r+0x9e6>
 8007762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007764:	4610      	mov	r0, r2
 8007766:	17d1      	asrs	r1, r2, #31
 8007768:	e9c3 0100 	strd	r0, r1, [r3]
 800776c:	9e06      	ldr	r6, [sp, #24]
 800776e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8007772:	f7ff bb4d 	b.w	8006e10 <_svfprintf_r+0x80>
 8007776:	f018 0f10 	tst.w	r8, #16
 800777a:	d002      	beq.n	8007782 <_svfprintf_r+0x9f2>
 800777c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e7f4      	b.n	800776c <_svfprintf_r+0x9dc>
 8007782:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007786:	d002      	beq.n	800778e <_svfprintf_r+0x9fe>
 8007788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	e7ee      	b.n	800776c <_svfprintf_r+0x9dc>
 800778e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007792:	d0f3      	beq.n	800777c <_svfprintf_r+0x9ec>
 8007794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e7e8      	b.n	800776c <_svfprintf_r+0x9dc>
 800779a:	f048 0810 	orr.w	r8, r8, #16
 800779e:	f018 0f20 	tst.w	r8, #32
 80077a2:	d01e      	beq.n	80077e2 <_svfprintf_r+0xa52>
 80077a4:	3607      	adds	r6, #7
 80077a6:	f026 0307 	bic.w	r3, r6, #7
 80077aa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80077ae:	9306      	str	r3, [sp, #24]
 80077b0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80077b4:	2300      	movs	r3, #0
 80077b6:	2200      	movs	r2, #0
 80077b8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80077bc:	9a04      	ldr	r2, [sp, #16]
 80077be:	3201      	adds	r2, #1
 80077c0:	f000 848d 	beq.w	80080de <_svfprintf_r+0x134e>
 80077c4:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80077c8:	9203      	str	r2, [sp, #12]
 80077ca:	ea56 0207 	orrs.w	r2, r6, r7
 80077ce:	f040 848c 	bne.w	80080ea <_svfprintf_r+0x135a>
 80077d2:	9a04      	ldr	r2, [sp, #16]
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	f000 80f5 	beq.w	80079c4 <_svfprintf_r+0xc34>
 80077da:	2b01      	cmp	r3, #1
 80077dc:	f040 8488 	bne.w	80080f0 <_svfprintf_r+0x1360>
 80077e0:	e097      	b.n	8007912 <_svfprintf_r+0xb82>
 80077e2:	1d33      	adds	r3, r6, #4
 80077e4:	f018 0f10 	tst.w	r8, #16
 80077e8:	9306      	str	r3, [sp, #24]
 80077ea:	d001      	beq.n	80077f0 <_svfprintf_r+0xa60>
 80077ec:	6836      	ldr	r6, [r6, #0]
 80077ee:	e003      	b.n	80077f8 <_svfprintf_r+0xa68>
 80077f0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80077f4:	d002      	beq.n	80077fc <_svfprintf_r+0xa6c>
 80077f6:	8836      	ldrh	r6, [r6, #0]
 80077f8:	2700      	movs	r7, #0
 80077fa:	e7d9      	b.n	80077b0 <_svfprintf_r+0xa20>
 80077fc:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007800:	d0f4      	beq.n	80077ec <_svfprintf_r+0xa5c>
 8007802:	7836      	ldrb	r6, [r6, #0]
 8007804:	e7f8      	b.n	80077f8 <_svfprintf_r+0xa68>
 8007806:	4633      	mov	r3, r6
 8007808:	2278      	movs	r2, #120	; 0x78
 800780a:	f853 6b04 	ldr.w	r6, [r3], #4
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	f647 0330 	movw	r3, #30768	; 0x7830
 8007814:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8007818:	4ba1      	ldr	r3, [pc, #644]	; (8007aa0 <_svfprintf_r+0xd10>)
 800781a:	9316      	str	r3, [sp, #88]	; 0x58
 800781c:	2700      	movs	r7, #0
 800781e:	f048 0802 	orr.w	r8, r8, #2
 8007822:	2302      	movs	r3, #2
 8007824:	9207      	str	r2, [sp, #28]
 8007826:	e7c6      	b.n	80077b6 <_svfprintf_r+0xa26>
 8007828:	4633      	mov	r3, r6
 800782a:	2500      	movs	r5, #0
 800782c:	f853 bb04 	ldr.w	fp, [r3], #4
 8007830:	9306      	str	r3, [sp, #24]
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8007838:	1c59      	adds	r1, r3, #1
 800783a:	d010      	beq.n	800785e <_svfprintf_r+0xace>
 800783c:	461a      	mov	r2, r3
 800783e:	4629      	mov	r1, r5
 8007840:	4658      	mov	r0, fp
 8007842:	f7f8 fcdd 	bl	8000200 <memchr>
 8007846:	9003      	str	r0, [sp, #12]
 8007848:	2800      	cmp	r0, #0
 800784a:	f000 80d2 	beq.w	80079f2 <_svfprintf_r+0xc62>
 800784e:	eba0 030b 	sub.w	r3, r0, fp
 8007852:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8007856:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800785a:	462e      	mov	r6, r5
 800785c:	e5c0      	b.n	80073e0 <_svfprintf_r+0x650>
 800785e:	4658      	mov	r0, fp
 8007860:	f7f8 fcc0 	bl	80001e4 <strlen>
 8007864:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8007868:	e463      	b.n	8007132 <_svfprintf_r+0x3a2>
 800786a:	f048 0810 	orr.w	r8, r8, #16
 800786e:	f018 0f20 	tst.w	r8, #32
 8007872:	d007      	beq.n	8007884 <_svfprintf_r+0xaf4>
 8007874:	3607      	adds	r6, #7
 8007876:	f026 0307 	bic.w	r3, r6, #7
 800787a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800787e:	9306      	str	r3, [sp, #24]
 8007880:	2301      	movs	r3, #1
 8007882:	e798      	b.n	80077b6 <_svfprintf_r+0xa26>
 8007884:	1d33      	adds	r3, r6, #4
 8007886:	f018 0f10 	tst.w	r8, #16
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	d001      	beq.n	8007892 <_svfprintf_r+0xb02>
 800788e:	6836      	ldr	r6, [r6, #0]
 8007890:	e003      	b.n	800789a <_svfprintf_r+0xb0a>
 8007892:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007896:	d002      	beq.n	800789e <_svfprintf_r+0xb0e>
 8007898:	8836      	ldrh	r6, [r6, #0]
 800789a:	2700      	movs	r7, #0
 800789c:	e7f0      	b.n	8007880 <_svfprintf_r+0xaf0>
 800789e:	f418 7f00 	tst.w	r8, #512	; 0x200
 80078a2:	d0f4      	beq.n	800788e <_svfprintf_r+0xafe>
 80078a4:	7836      	ldrb	r6, [r6, #0]
 80078a6:	e7f8      	b.n	800789a <_svfprintf_r+0xb0a>
 80078a8:	4b7e      	ldr	r3, [pc, #504]	; (8007aa4 <_svfprintf_r+0xd14>)
 80078aa:	9316      	str	r3, [sp, #88]	; 0x58
 80078ac:	f018 0f20 	tst.w	r8, #32
 80078b0:	d019      	beq.n	80078e6 <_svfprintf_r+0xb56>
 80078b2:	3607      	adds	r6, #7
 80078b4:	f026 0307 	bic.w	r3, r6, #7
 80078b8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80078bc:	9306      	str	r3, [sp, #24]
 80078be:	f018 0f01 	tst.w	r8, #1
 80078c2:	d00a      	beq.n	80078da <_svfprintf_r+0xb4a>
 80078c4:	ea56 0307 	orrs.w	r3, r6, r7
 80078c8:	d007      	beq.n	80078da <_svfprintf_r+0xb4a>
 80078ca:	2330      	movs	r3, #48	; 0x30
 80078cc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80078d6:	f048 0802 	orr.w	r8, r8, #2
 80078da:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80078de:	2302      	movs	r3, #2
 80078e0:	e769      	b.n	80077b6 <_svfprintf_r+0xa26>
 80078e2:	4b6f      	ldr	r3, [pc, #444]	; (8007aa0 <_svfprintf_r+0xd10>)
 80078e4:	e7e1      	b.n	80078aa <_svfprintf_r+0xb1a>
 80078e6:	1d33      	adds	r3, r6, #4
 80078e8:	f018 0f10 	tst.w	r8, #16
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	d001      	beq.n	80078f4 <_svfprintf_r+0xb64>
 80078f0:	6836      	ldr	r6, [r6, #0]
 80078f2:	e003      	b.n	80078fc <_svfprintf_r+0xb6c>
 80078f4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80078f8:	d002      	beq.n	8007900 <_svfprintf_r+0xb70>
 80078fa:	8836      	ldrh	r6, [r6, #0]
 80078fc:	2700      	movs	r7, #0
 80078fe:	e7de      	b.n	80078be <_svfprintf_r+0xb2e>
 8007900:	f418 7f00 	tst.w	r8, #512	; 0x200
 8007904:	d0f4      	beq.n	80078f0 <_svfprintf_r+0xb60>
 8007906:	7836      	ldrb	r6, [r6, #0]
 8007908:	e7f8      	b.n	80078fc <_svfprintf_r+0xb6c>
 800790a:	2f00      	cmp	r7, #0
 800790c:	bf08      	it	eq
 800790e:	2e0a      	cmpeq	r6, #10
 8007910:	d206      	bcs.n	8007920 <_svfprintf_r+0xb90>
 8007912:	3630      	adds	r6, #48	; 0x30
 8007914:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8007918:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 800791c:	f000 bc06 	b.w	800812c <_svfprintf_r+0x139c>
 8007920:	2300      	movs	r3, #0
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	ad4e      	add	r5, sp, #312	; 0x138
 8007928:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800792c:	220a      	movs	r2, #10
 800792e:	2300      	movs	r3, #0
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f9 fa08 	bl	8000d48 <__aeabi_uldivmod>
 8007938:	9b05      	ldr	r3, [sp, #20]
 800793a:	3230      	adds	r2, #48	; 0x30
 800793c:	3301      	adds	r3, #1
 800793e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007942:	f805 2c01 	strb.w	r2, [r5, #-1]
 8007946:	9305      	str	r3, [sp, #20]
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	d019      	beq.n	8007982 <_svfprintf_r+0xbf2>
 800794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007950:	9a05      	ldr	r2, [sp, #20]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d114      	bne.n	8007982 <_svfprintf_r+0xbf2>
 8007958:	2aff      	cmp	r2, #255	; 0xff
 800795a:	d012      	beq.n	8007982 <_svfprintf_r+0xbf2>
 800795c:	2f00      	cmp	r7, #0
 800795e:	bf08      	it	eq
 8007960:	2e0a      	cmpeq	r6, #10
 8007962:	d30e      	bcc.n	8007982 <_svfprintf_r+0xbf2>
 8007964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007966:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007968:	ebab 0b03 	sub.w	fp, fp, r3
 800796c:	461a      	mov	r2, r3
 800796e:	4658      	mov	r0, fp
 8007970:	f005 fe73 	bl	800d65a <strncpy>
 8007974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007976:	785d      	ldrb	r5, [r3, #1]
 8007978:	b195      	cbz	r5, 80079a0 <_svfprintf_r+0xc10>
 800797a:	3301      	adds	r3, #1
 800797c:	930a      	str	r3, [sp, #40]	; 0x28
 800797e:	2300      	movs	r3, #0
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	220a      	movs	r2, #10
 8007984:	2300      	movs	r3, #0
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f9 f9dd 	bl	8000d48 <__aeabi_uldivmod>
 800798e:	2f00      	cmp	r7, #0
 8007990:	bf08      	it	eq
 8007992:	2e0a      	cmpeq	r6, #10
 8007994:	f0c0 83ca 	bcc.w	800812c <_svfprintf_r+0x139c>
 8007998:	4606      	mov	r6, r0
 800799a:	460f      	mov	r7, r1
 800799c:	465d      	mov	r5, fp
 800799e:	e7c5      	b.n	800792c <_svfprintf_r+0xb9c>
 80079a0:	9505      	str	r5, [sp, #20]
 80079a2:	e7ee      	b.n	8007982 <_svfprintf_r+0xbf2>
 80079a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80079a6:	f006 030f 	and.w	r3, r6, #15
 80079aa:	5cd3      	ldrb	r3, [r2, r3]
 80079ac:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80079b0:	0933      	lsrs	r3, r6, #4
 80079b2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80079b6:	093a      	lsrs	r2, r7, #4
 80079b8:	461e      	mov	r6, r3
 80079ba:	4617      	mov	r7, r2
 80079bc:	ea56 0307 	orrs.w	r3, r6, r7
 80079c0:	d1f0      	bne.n	80079a4 <_svfprintf_r+0xc14>
 80079c2:	e3b3      	b.n	800812c <_svfprintf_r+0x139c>
 80079c4:	b933      	cbnz	r3, 80079d4 <_svfprintf_r+0xc44>
 80079c6:	f018 0f01 	tst.w	r8, #1
 80079ca:	d003      	beq.n	80079d4 <_svfprintf_r+0xc44>
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80079d2:	e7a1      	b.n	8007918 <_svfprintf_r+0xb88>
 80079d4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80079d8:	e3a8      	b.n	800812c <_svfprintf_r+0x139c>
 80079da:	9b07      	ldr	r3, [sp, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8373 	beq.w	80080c8 <_svfprintf_r+0x1338>
 80079e2:	2000      	movs	r0, #0
 80079e4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80079e8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80079ec:	9606      	str	r6, [sp, #24]
 80079ee:	f7ff bb34 	b.w	800705a <_svfprintf_r+0x2ca>
 80079f2:	9e03      	ldr	r6, [sp, #12]
 80079f4:	f7ff bb9e 	b.w	8007134 <_svfprintf_r+0x3a4>
 80079f8:	2010      	movs	r0, #16
 80079fa:	4402      	add	r2, r0
 80079fc:	2b07      	cmp	r3, #7
 80079fe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a02:	6060      	str	r0, [r4, #4]
 8007a04:	dd08      	ble.n	8007a18 <_svfprintf_r+0xc88>
 8007a06:	aa22      	add	r2, sp, #136	; 0x88
 8007a08:	4649      	mov	r1, r9
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f006 fea6 	bl	800e75c <__ssprint_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f040 8337 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007a16:	a925      	add	r1, sp, #148	; 0x94
 8007a18:	3f10      	subs	r7, #16
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	e4fb      	b.n	8007416 <_svfprintf_r+0x686>
 8007a1e:	460c      	mov	r4, r1
 8007a20:	e514      	b.n	800744c <_svfprintf_r+0x6bc>
 8007a22:	aa22      	add	r2, sp, #136	; 0x88
 8007a24:	4649      	mov	r1, r9
 8007a26:	4650      	mov	r0, sl
 8007a28:	f006 fe98 	bl	800e75c <__ssprint_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 8329 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007a32:	ac25      	add	r4, sp, #148	; 0x94
 8007a34:	e51c      	b.n	8007470 <_svfprintf_r+0x6e0>
 8007a36:	aa22      	add	r2, sp, #136	; 0x88
 8007a38:	4649      	mov	r1, r9
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	f006 fe8e 	bl	800e75c <__ssprint_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	f040 831f 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007a46:	ac25      	add	r4, sp, #148	; 0x94
 8007a48:	e522      	b.n	8007490 <_svfprintf_r+0x700>
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	4402      	add	r2, r0
 8007a4e:	2b07      	cmp	r3, #7
 8007a50:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a54:	6060      	str	r0, [r4, #4]
 8007a56:	dd08      	ble.n	8007a6a <_svfprintf_r+0xcda>
 8007a58:	aa22      	add	r2, sp, #136	; 0x88
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	f006 fe7d 	bl	800e75c <__ssprint_r>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f040 830e 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007a68:	a925      	add	r1, sp, #148	; 0x94
 8007a6a:	3f10      	subs	r7, #16
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	e517      	b.n	80074a0 <_svfprintf_r+0x710>
 8007a70:	460c      	mov	r4, r1
 8007a72:	e530      	b.n	80074d6 <_svfprintf_r+0x746>
 8007a74:	2010      	movs	r0, #16
 8007a76:	4402      	add	r2, r0
 8007a78:	2b07      	cmp	r3, #7
 8007a7a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007a7e:	6060      	str	r0, [r4, #4]
 8007a80:	dd08      	ble.n	8007a94 <_svfprintf_r+0xd04>
 8007a82:	aa22      	add	r2, sp, #136	; 0x88
 8007a84:	4649      	mov	r1, r9
 8007a86:	4650      	mov	r0, sl
 8007a88:	f006 fe68 	bl	800e75c <__ssprint_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f040 82f9 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007a92:	a925      	add	r1, sp, #148	; 0x94
 8007a94:	3e10      	subs	r6, #16
 8007a96:	460c      	mov	r4, r1
 8007a98:	e522      	b.n	80074e0 <_svfprintf_r+0x750>
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	e548      	b.n	8007530 <_svfprintf_r+0x7a0>
 8007a9e:	bf00      	nop
 8007aa0:	08011c70 	.word	0x08011c70
 8007aa4:	08011c81 	.word	0x08011c81
 8007aa8:	9b07      	ldr	r3, [sp, #28]
 8007aaa:	2b65      	cmp	r3, #101	; 0x65
 8007aac:	f340 8232 	ble.w	8007f14 <_svfprintf_r+0x1184>
 8007ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f7f9 f816 	bl	8000ae8 <__aeabi_dcmpeq>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d068      	beq.n	8007b92 <_svfprintf_r+0xe02>
 8007ac0:	4b6d      	ldr	r3, [pc, #436]	; (8007c78 <_svfprintf_r+0xee8>)
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	441e      	add	r6, r3
 8007ac8:	6063      	str	r3, [r4, #4]
 8007aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007acc:	9624      	str	r6, [sp, #144]	; 0x90
 8007ace:	3301      	adds	r3, #1
 8007ad0:	2b07      	cmp	r3, #7
 8007ad2:	9323      	str	r3, [sp, #140]	; 0x8c
 8007ad4:	dc37      	bgt.n	8007b46 <_svfprintf_r+0xdb6>
 8007ad6:	3408      	adds	r4, #8
 8007ad8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ada:	9a05      	ldr	r2, [sp, #20]
 8007adc:	4293      	cmp	r3, r2
 8007ade:	db03      	blt.n	8007ae8 <_svfprintf_r+0xd58>
 8007ae0:	f018 0f01 	tst.w	r8, #1
 8007ae4:	f43f ad36 	beq.w	8007554 <_svfprintf_r+0x7c4>
 8007ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007af4:	4413      	add	r3, r2
 8007af6:	9324      	str	r3, [sp, #144]	; 0x90
 8007af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007afa:	3301      	adds	r3, #1
 8007afc:	2b07      	cmp	r3, #7
 8007afe:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b00:	dc2b      	bgt.n	8007b5a <_svfprintf_r+0xdca>
 8007b02:	3408      	adds	r4, #8
 8007b04:	9b05      	ldr	r3, [sp, #20]
 8007b06:	1e5d      	subs	r5, r3, #1
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	f77f ad23 	ble.w	8007554 <_svfprintf_r+0x7c4>
 8007b0e:	4e5b      	ldr	r6, [pc, #364]	; (8007c7c <_svfprintf_r+0xeec>)
 8007b10:	2710      	movs	r7, #16
 8007b12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007b16:	2d10      	cmp	r5, #16
 8007b18:	f103 0301 	add.w	r3, r3, #1
 8007b1c:	f104 0108 	add.w	r1, r4, #8
 8007b20:	6026      	str	r6, [r4, #0]
 8007b22:	dc24      	bgt.n	8007b6e <_svfprintf_r+0xdde>
 8007b24:	6065      	str	r5, [r4, #4]
 8007b26:	2b07      	cmp	r3, #7
 8007b28:	4415      	add	r5, r2
 8007b2a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007b2e:	f340 8288 	ble.w	8008042 <_svfprintf_r+0x12b2>
 8007b32:	aa22      	add	r2, sp, #136	; 0x88
 8007b34:	4649      	mov	r1, r9
 8007b36:	4650      	mov	r0, sl
 8007b38:	f006 fe10 	bl	800e75c <__ssprint_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 82a1 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007b42:	ac25      	add	r4, sp, #148	; 0x94
 8007b44:	e506      	b.n	8007554 <_svfprintf_r+0x7c4>
 8007b46:	aa22      	add	r2, sp, #136	; 0x88
 8007b48:	4649      	mov	r1, r9
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	f006 fe06 	bl	800e75c <__ssprint_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f040 8297 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007b56:	ac25      	add	r4, sp, #148	; 0x94
 8007b58:	e7be      	b.n	8007ad8 <_svfprintf_r+0xd48>
 8007b5a:	aa22      	add	r2, sp, #136	; 0x88
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4650      	mov	r0, sl
 8007b60:	f006 fdfc 	bl	800e75c <__ssprint_r>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f040 828d 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007b6a:	ac25      	add	r4, sp, #148	; 0x94
 8007b6c:	e7ca      	b.n	8007b04 <_svfprintf_r+0xd74>
 8007b6e:	3210      	adds	r2, #16
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007b76:	6067      	str	r7, [r4, #4]
 8007b78:	dd08      	ble.n	8007b8c <_svfprintf_r+0xdfc>
 8007b7a:	aa22      	add	r2, sp, #136	; 0x88
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4650      	mov	r0, sl
 8007b80:	f006 fdec 	bl	800e75c <__ssprint_r>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f040 827d 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007b8a:	a925      	add	r1, sp, #148	; 0x94
 8007b8c:	3d10      	subs	r5, #16
 8007b8e:	460c      	mov	r4, r1
 8007b90:	e7bf      	b.n	8007b12 <_svfprintf_r+0xd82>
 8007b92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dc73      	bgt.n	8007c80 <_svfprintf_r+0xef0>
 8007b98:	4b37      	ldr	r3, [pc, #220]	; (8007c78 <_svfprintf_r+0xee8>)
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	441e      	add	r6, r3
 8007ba0:	6063      	str	r3, [r4, #4]
 8007ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ba4:	9624      	str	r6, [sp, #144]	; 0x90
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	2b07      	cmp	r3, #7
 8007baa:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bac:	dc3d      	bgt.n	8007c2a <_svfprintf_r+0xe9a>
 8007bae:	3408      	adds	r4, #8
 8007bb0:	9905      	ldr	r1, [sp, #20]
 8007bb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	f008 0101 	and.w	r1, r8, #1
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	f43f acc9 	beq.w	8007554 <_svfprintf_r+0x7c4>
 8007bc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bc4:	6022      	str	r2, [r4, #0]
 8007bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bc8:	6062      	str	r2, [r4, #4]
 8007bca:	4413      	add	r3, r2
 8007bcc:	9324      	str	r3, [sp, #144]	; 0x90
 8007bce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	2b07      	cmp	r3, #7
 8007bd4:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bd6:	dc32      	bgt.n	8007c3e <_svfprintf_r+0xeae>
 8007bd8:	3408      	adds	r4, #8
 8007bda:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	da1b      	bge.n	8007c18 <_svfprintf_r+0xe88>
 8007be0:	4e26      	ldr	r6, [pc, #152]	; (8007c7c <_svfprintf_r+0xeec>)
 8007be2:	426d      	negs	r5, r5
 8007be4:	4623      	mov	r3, r4
 8007be6:	2710      	movs	r7, #16
 8007be8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8007bec:	2d10      	cmp	r5, #16
 8007bee:	f102 0201 	add.w	r2, r2, #1
 8007bf2:	f104 0408 	add.w	r4, r4, #8
 8007bf6:	601e      	str	r6, [r3, #0]
 8007bf8:	dc2b      	bgt.n	8007c52 <_svfprintf_r+0xec2>
 8007bfa:	605d      	str	r5, [r3, #4]
 8007bfc:	2a07      	cmp	r2, #7
 8007bfe:	440d      	add	r5, r1
 8007c00:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8007c04:	dd08      	ble.n	8007c18 <_svfprintf_r+0xe88>
 8007c06:	aa22      	add	r2, sp, #136	; 0x88
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f006 fda6 	bl	800e75c <__ssprint_r>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f040 8237 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007c16:	ac25      	add	r4, sp, #148	; 0x94
 8007c18:	9b05      	ldr	r3, [sp, #20]
 8007c1a:	9a05      	ldr	r2, [sp, #20]
 8007c1c:	6063      	str	r3, [r4, #4]
 8007c1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c20:	f8c4 b000 	str.w	fp, [r4]
 8007c24:	4413      	add	r3, r2
 8007c26:	9324      	str	r3, [sp, #144]	; 0x90
 8007c28:	e48d      	b.n	8007546 <_svfprintf_r+0x7b6>
 8007c2a:	aa22      	add	r2, sp, #136	; 0x88
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f006 fd94 	bl	800e75c <__ssprint_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 8225 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007c3a:	ac25      	add	r4, sp, #148	; 0x94
 8007c3c:	e7b8      	b.n	8007bb0 <_svfprintf_r+0xe20>
 8007c3e:	aa22      	add	r2, sp, #136	; 0x88
 8007c40:	4649      	mov	r1, r9
 8007c42:	4650      	mov	r0, sl
 8007c44:	f006 fd8a 	bl	800e75c <__ssprint_r>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 821b 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007c4e:	ac25      	add	r4, sp, #148	; 0x94
 8007c50:	e7c3      	b.n	8007bda <_svfprintf_r+0xe4a>
 8007c52:	3110      	adds	r1, #16
 8007c54:	2a07      	cmp	r2, #7
 8007c56:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8007c5a:	605f      	str	r7, [r3, #4]
 8007c5c:	dd08      	ble.n	8007c70 <_svfprintf_r+0xee0>
 8007c5e:	aa22      	add	r2, sp, #136	; 0x88
 8007c60:	4649      	mov	r1, r9
 8007c62:	4650      	mov	r0, sl
 8007c64:	f006 fd7a 	bl	800e75c <__ssprint_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f040 820b 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007c6e:	ac25      	add	r4, sp, #148	; 0x94
 8007c70:	3d10      	subs	r5, #16
 8007c72:	4623      	mov	r3, r4
 8007c74:	e7b8      	b.n	8007be8 <_svfprintf_r+0xe58>
 8007c76:	bf00      	nop
 8007c78:	08011c92 	.word	0x08011c92
 8007c7c:	08011ca4 	.word	0x08011ca4
 8007c80:	9b05      	ldr	r3, [sp, #20]
 8007c82:	42ab      	cmp	r3, r5
 8007c84:	bfa8      	it	ge
 8007c86:	462b      	movge	r3, r5
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	dd0a      	ble.n	8007ca4 <_svfprintf_r+0xf14>
 8007c8e:	441e      	add	r6, r3
 8007c90:	e9c4 b300 	strd	fp, r3, [r4]
 8007c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c96:	9624      	str	r6, [sp, #144]	; 0x90
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2b07      	cmp	r3, #7
 8007c9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8007c9e:	f300 8086 	bgt.w	8007dae <_svfprintf_r+0x101e>
 8007ca2:	3408      	adds	r4, #8
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	bfac      	ite	ge
 8007ca8:	1bee      	subge	r6, r5, r7
 8007caa:	462e      	movlt	r6, r5
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	dd19      	ble.n	8007ce4 <_svfprintf_r+0xf54>
 8007cb0:	4f97      	ldr	r7, [pc, #604]	; (8007f10 <_svfprintf_r+0x1180>)
 8007cb2:	6027      	str	r7, [r4, #0]
 8007cb4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007cb8:	2e10      	cmp	r6, #16
 8007cba:	f103 0301 	add.w	r3, r3, #1
 8007cbe:	f104 0108 	add.w	r1, r4, #8
 8007cc2:	dc7e      	bgt.n	8007dc2 <_svfprintf_r+0x1032>
 8007cc4:	6066      	str	r6, [r4, #4]
 8007cc6:	2b07      	cmp	r3, #7
 8007cc8:	4416      	add	r6, r2
 8007cca:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007cce:	f340 808b 	ble.w	8007de8 <_svfprintf_r+0x1058>
 8007cd2:	aa22      	add	r2, sp, #136	; 0x88
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	f006 fd40 	bl	800e75c <__ssprint_r>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f040 81d1 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007ce2:	ac25      	add	r4, sp, #148	; 0x94
 8007ce4:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8007ce8:	445d      	add	r5, fp
 8007cea:	d00b      	beq.n	8007d04 <_svfprintf_r+0xf74>
 8007cec:	4e88      	ldr	r6, [pc, #544]	; (8007f10 <_svfprintf_r+0x1180>)
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d17b      	bne.n	8007dec <_svfprintf_r+0x105c>
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d17b      	bne.n	8007df2 <_svfprintf_r+0x1062>
 8007cfa:	9b05      	ldr	r3, [sp, #20]
 8007cfc:	445b      	add	r3, fp
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	bf28      	it	cs
 8007d02:	461d      	movcs	r5, r3
 8007d04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007d06:	9a05      	ldr	r2, [sp, #20]
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	db02      	blt.n	8007d12 <_svfprintf_r+0xf82>
 8007d0c:	f018 0f01 	tst.w	r8, #1
 8007d10:	d00e      	beq.n	8007d30 <_svfprintf_r+0xfa0>
 8007d12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d1e:	4413      	add	r3, r2
 8007d20:	9324      	str	r3, [sp, #144]	; 0x90
 8007d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d24:	3301      	adds	r3, #1
 8007d26:	2b07      	cmp	r3, #7
 8007d28:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d2a:	f300 80dd 	bgt.w	8007ee8 <_svfprintf_r+0x1158>
 8007d2e:	3408      	adds	r4, #8
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007d34:	eb0b 0203 	add.w	r2, fp, r3
 8007d38:	1b9e      	subs	r6, r3, r6
 8007d3a:	1b52      	subs	r2, r2, r5
 8007d3c:	4296      	cmp	r6, r2
 8007d3e:	bfa8      	it	ge
 8007d40:	4616      	movge	r6, r2
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	dd0b      	ble.n	8007d5e <_svfprintf_r+0xfce>
 8007d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d48:	4433      	add	r3, r6
 8007d4a:	9324      	str	r3, [sp, #144]	; 0x90
 8007d4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2b07      	cmp	r3, #7
 8007d52:	e9c4 5600 	strd	r5, r6, [r4]
 8007d56:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d58:	f300 80d0 	bgt.w	8007efc <_svfprintf_r+0x116c>
 8007d5c:	3408      	adds	r4, #8
 8007d5e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007d60:	9b05      	ldr	r3, [sp, #20]
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	eba3 0505 	sub.w	r5, r3, r5
 8007d68:	bfa8      	it	ge
 8007d6a:	1bad      	subge	r5, r5, r6
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	f77f abf1 	ble.w	8007554 <_svfprintf_r+0x7c4>
 8007d72:	4e67      	ldr	r6, [pc, #412]	; (8007f10 <_svfprintf_r+0x1180>)
 8007d74:	2710      	movs	r7, #16
 8007d76:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007d7a:	2d10      	cmp	r5, #16
 8007d7c:	f103 0301 	add.w	r3, r3, #1
 8007d80:	f104 0108 	add.w	r1, r4, #8
 8007d84:	6026      	str	r6, [r4, #0]
 8007d86:	f77f aecd 	ble.w	8007b24 <_svfprintf_r+0xd94>
 8007d8a:	3210      	adds	r2, #16
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007d92:	6067      	str	r7, [r4, #4]
 8007d94:	dd08      	ble.n	8007da8 <_svfprintf_r+0x1018>
 8007d96:	aa22      	add	r2, sp, #136	; 0x88
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f006 fcde 	bl	800e75c <__ssprint_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f040 816f 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007da6:	a925      	add	r1, sp, #148	; 0x94
 8007da8:	3d10      	subs	r5, #16
 8007daa:	460c      	mov	r4, r1
 8007dac:	e7e3      	b.n	8007d76 <_svfprintf_r+0xfe6>
 8007dae:	aa22      	add	r2, sp, #136	; 0x88
 8007db0:	4649      	mov	r1, r9
 8007db2:	4650      	mov	r0, sl
 8007db4:	f006 fcd2 	bl	800e75c <__ssprint_r>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f040 8163 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007dbe:	ac25      	add	r4, sp, #148	; 0x94
 8007dc0:	e770      	b.n	8007ca4 <_svfprintf_r+0xf14>
 8007dc2:	2010      	movs	r0, #16
 8007dc4:	4402      	add	r2, r0
 8007dc6:	2b07      	cmp	r3, #7
 8007dc8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007dcc:	6060      	str	r0, [r4, #4]
 8007dce:	dd08      	ble.n	8007de2 <_svfprintf_r+0x1052>
 8007dd0:	aa22      	add	r2, sp, #136	; 0x88
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	f006 fcc1 	bl	800e75c <__ssprint_r>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f040 8152 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007de0:	a925      	add	r1, sp, #148	; 0x94
 8007de2:	3e10      	subs	r6, #16
 8007de4:	460c      	mov	r4, r1
 8007de6:	e764      	b.n	8007cb2 <_svfprintf_r+0xf22>
 8007de8:	460c      	mov	r4, r1
 8007dea:	e77b      	b.n	8007ce4 <_svfprintf_r+0xf54>
 8007dec:	9b08      	ldr	r3, [sp, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d04a      	beq.n	8007e88 <_svfprintf_r+0x10f8>
 8007df2:	9b08      	ldr	r3, [sp, #32]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e04:	4413      	add	r3, r2
 8007e06:	9324      	str	r3, [sp, #144]	; 0x90
 8007e08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007e10:	dc41      	bgt.n	8007e96 <_svfprintf_r+0x1106>
 8007e12:	3408      	adds	r4, #8
 8007e14:	9b05      	ldr	r3, [sp, #20]
 8007e16:	445b      	add	r3, fp
 8007e18:	1b5a      	subs	r2, r3, r5
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	bfa8      	it	ge
 8007e22:	4613      	movge	r3, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	461f      	mov	r7, r3
 8007e28:	dd0a      	ble.n	8007e40 <_svfprintf_r+0x10b0>
 8007e2a:	e9c4 5300 	strd	r5, r3, [r4]
 8007e2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e30:	443b      	add	r3, r7
 8007e32:	9324      	str	r3, [sp, #144]	; 0x90
 8007e34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e36:	3301      	adds	r3, #1
 8007e38:	2b07      	cmp	r3, #7
 8007e3a:	9323      	str	r3, [sp, #140]	; 0x8c
 8007e3c:	dc35      	bgt.n	8007eaa <_svfprintf_r+0x111a>
 8007e3e:	3408      	adds	r4, #8
 8007e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	bfac      	ite	ge
 8007e48:	1bdf      	subge	r7, r3, r7
 8007e4a:	461f      	movlt	r7, r3
 8007e4c:	2f00      	cmp	r7, #0
 8007e4e:	dd17      	ble.n	8007e80 <_svfprintf_r+0x10f0>
 8007e50:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8007e54:	2f10      	cmp	r7, #16
 8007e56:	f102 0201 	add.w	r2, r2, #1
 8007e5a:	f104 0108 	add.w	r1, r4, #8
 8007e5e:	6026      	str	r6, [r4, #0]
 8007e60:	dc2d      	bgt.n	8007ebe <_svfprintf_r+0x112e>
 8007e62:	443b      	add	r3, r7
 8007e64:	2a07      	cmp	r2, #7
 8007e66:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007e6a:	6067      	str	r7, [r4, #4]
 8007e6c:	dd3a      	ble.n	8007ee4 <_svfprintf_r+0x1154>
 8007e6e:	aa22      	add	r2, sp, #136	; 0x88
 8007e70:	4649      	mov	r1, r9
 8007e72:	4650      	mov	r0, sl
 8007e74:	f006 fc72 	bl	800e75c <__ssprint_r>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f040 8103 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007e7e:	ac25      	add	r4, sp, #148	; 0x94
 8007e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	441d      	add	r5, r3
 8007e86:	e732      	b.n	8007cee <_svfprintf_r+0xf5e>
 8007e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	3b01      	subs	r3, #1
 8007e92:	9309      	str	r3, [sp, #36]	; 0x24
 8007e94:	e7b0      	b.n	8007df8 <_svfprintf_r+0x1068>
 8007e96:	aa22      	add	r2, sp, #136	; 0x88
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	f006 fc5e 	bl	800e75c <__ssprint_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f040 80ef 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007ea6:	ac25      	add	r4, sp, #148	; 0x94
 8007ea8:	e7b4      	b.n	8007e14 <_svfprintf_r+0x1084>
 8007eaa:	aa22      	add	r2, sp, #136	; 0x88
 8007eac:	4649      	mov	r1, r9
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f006 fc54 	bl	800e75c <__ssprint_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f040 80e5 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007eba:	ac25      	add	r4, sp, #148	; 0x94
 8007ebc:	e7c0      	b.n	8007e40 <_svfprintf_r+0x10b0>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	4403      	add	r3, r0
 8007ec2:	2a07      	cmp	r2, #7
 8007ec4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007ec8:	6060      	str	r0, [r4, #4]
 8007eca:	dd08      	ble.n	8007ede <_svfprintf_r+0x114e>
 8007ecc:	aa22      	add	r2, sp, #136	; 0x88
 8007ece:	4649      	mov	r1, r9
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	f006 fc43 	bl	800e75c <__ssprint_r>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f040 80d4 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007edc:	a925      	add	r1, sp, #148	; 0x94
 8007ede:	3f10      	subs	r7, #16
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	e7b5      	b.n	8007e50 <_svfprintf_r+0x10c0>
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	e7cb      	b.n	8007e80 <_svfprintf_r+0x10f0>
 8007ee8:	aa22      	add	r2, sp, #136	; 0x88
 8007eea:	4649      	mov	r1, r9
 8007eec:	4650      	mov	r0, sl
 8007eee:	f006 fc35 	bl	800e75c <__ssprint_r>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f040 80c6 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007ef8:	ac25      	add	r4, sp, #148	; 0x94
 8007efa:	e719      	b.n	8007d30 <_svfprintf_r+0xfa0>
 8007efc:	aa22      	add	r2, sp, #136	; 0x88
 8007efe:	4649      	mov	r1, r9
 8007f00:	4650      	mov	r0, sl
 8007f02:	f006 fc2b 	bl	800e75c <__ssprint_r>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f040 80bc 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007f0c:	ac25      	add	r4, sp, #148	; 0x94
 8007f0e:	e726      	b.n	8007d5e <_svfprintf_r+0xfce>
 8007f10:	08011ca4 	.word	0x08011ca4
 8007f14:	9a05      	ldr	r2, [sp, #20]
 8007f16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f18:	2a01      	cmp	r2, #1
 8007f1a:	f106 0601 	add.w	r6, r6, #1
 8007f1e:	f103 0301 	add.w	r3, r3, #1
 8007f22:	f104 0508 	add.w	r5, r4, #8
 8007f26:	dc02      	bgt.n	8007f2e <_svfprintf_r+0x119e>
 8007f28:	f018 0f01 	tst.w	r8, #1
 8007f2c:	d07e      	beq.n	800802c <_svfprintf_r+0x129c>
 8007f2e:	2201      	movs	r2, #1
 8007f30:	2b07      	cmp	r3, #7
 8007f32:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007f36:	f8c4 b000 	str.w	fp, [r4]
 8007f3a:	6062      	str	r2, [r4, #4]
 8007f3c:	dd08      	ble.n	8007f50 <_svfprintf_r+0x11c0>
 8007f3e:	aa22      	add	r2, sp, #136	; 0x88
 8007f40:	4649      	mov	r1, r9
 8007f42:	4650      	mov	r0, sl
 8007f44:	f006 fc0a 	bl	800e75c <__ssprint_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f040 809b 	bne.w	8008084 <_svfprintf_r+0x12f4>
 8007f4e:	ad25      	add	r5, sp, #148	; 0x94
 8007f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f58:	606b      	str	r3, [r5, #4]
 8007f5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f5c:	4413      	add	r3, r2
 8007f5e:	9324      	str	r3, [sp, #144]	; 0x90
 8007f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f62:	3301      	adds	r3, #1
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	9323      	str	r3, [sp, #140]	; 0x8c
 8007f68:	dc32      	bgt.n	8007fd0 <_svfprintf_r+0x1240>
 8007f6a:	3508      	adds	r5, #8
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f72:	1e5c      	subs	r4, r3, #1
 8007f74:	2200      	movs	r2, #0
 8007f76:	2300      	movs	r3, #0
 8007f78:	f7f8 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d130      	bne.n	8007fe2 <_svfprintf_r+0x1252>
 8007f80:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007f82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	3101      	adds	r1, #1
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	f10b 0001 	add.w	r0, fp, #1
 8007f8e:	4413      	add	r3, r2
 8007f90:	2907      	cmp	r1, #7
 8007f92:	e9c5 0400 	strd	r0, r4, [r5]
 8007f96:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8007f9a:	dd50      	ble.n	800803e <_svfprintf_r+0x12ae>
 8007f9c:	aa22      	add	r2, sp, #136	; 0x88
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	f006 fbdb 	bl	800e75c <__ssprint_r>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d16c      	bne.n	8008084 <_svfprintf_r+0x12f4>
 8007faa:	ad25      	add	r5, sp, #148	; 0x94
 8007fac:	ab1e      	add	r3, sp, #120	; 0x78
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fb4:	606b      	str	r3, [r5, #4]
 8007fb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007fb8:	4413      	add	r3, r2
 8007fba:	9324      	str	r3, [sp, #144]	; 0x90
 8007fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	2b07      	cmp	r3, #7
 8007fc2:	9323      	str	r3, [sp, #140]	; 0x8c
 8007fc4:	f73f adb5 	bgt.w	8007b32 <_svfprintf_r+0xda2>
 8007fc8:	f105 0408 	add.w	r4, r5, #8
 8007fcc:	f7ff bac2 	b.w	8007554 <_svfprintf_r+0x7c4>
 8007fd0:	aa22      	add	r2, sp, #136	; 0x88
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f006 fbc1 	bl	800e75c <__ssprint_r>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d152      	bne.n	8008084 <_svfprintf_r+0x12f4>
 8007fde:	ad25      	add	r5, sp, #148	; 0x94
 8007fe0:	e7c4      	b.n	8007f6c <_svfprintf_r+0x11dc>
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	dde2      	ble.n	8007fac <_svfprintf_r+0x121c>
 8007fe6:	4e58      	ldr	r6, [pc, #352]	; (8008148 <_svfprintf_r+0x13b8>)
 8007fe8:	2710      	movs	r7, #16
 8007fea:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007fee:	2c10      	cmp	r4, #16
 8007ff0:	f103 0301 	add.w	r3, r3, #1
 8007ff4:	f105 0108 	add.w	r1, r5, #8
 8007ff8:	602e      	str	r6, [r5, #0]
 8007ffa:	dc07      	bgt.n	800800c <_svfprintf_r+0x127c>
 8007ffc:	606c      	str	r4, [r5, #4]
 8007ffe:	2b07      	cmp	r3, #7
 8008000:	4414      	add	r4, r2
 8008002:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8008006:	dcc9      	bgt.n	8007f9c <_svfprintf_r+0x120c>
 8008008:	460d      	mov	r5, r1
 800800a:	e7cf      	b.n	8007fac <_svfprintf_r+0x121c>
 800800c:	3210      	adds	r2, #16
 800800e:	2b07      	cmp	r3, #7
 8008010:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008014:	606f      	str	r7, [r5, #4]
 8008016:	dd06      	ble.n	8008026 <_svfprintf_r+0x1296>
 8008018:	aa22      	add	r2, sp, #136	; 0x88
 800801a:	4649      	mov	r1, r9
 800801c:	4650      	mov	r0, sl
 800801e:	f006 fb9d 	bl	800e75c <__ssprint_r>
 8008022:	bb78      	cbnz	r0, 8008084 <_svfprintf_r+0x12f4>
 8008024:	a925      	add	r1, sp, #148	; 0x94
 8008026:	3c10      	subs	r4, #16
 8008028:	460d      	mov	r5, r1
 800802a:	e7de      	b.n	8007fea <_svfprintf_r+0x125a>
 800802c:	2201      	movs	r2, #1
 800802e:	2b07      	cmp	r3, #7
 8008030:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8008034:	f8c4 b000 	str.w	fp, [r4]
 8008038:	6062      	str	r2, [r4, #4]
 800803a:	ddb7      	ble.n	8007fac <_svfprintf_r+0x121c>
 800803c:	e7ae      	b.n	8007f9c <_svfprintf_r+0x120c>
 800803e:	3508      	adds	r5, #8
 8008040:	e7b4      	b.n	8007fac <_svfprintf_r+0x121c>
 8008042:	460c      	mov	r4, r1
 8008044:	f7ff ba86 	b.w	8007554 <_svfprintf_r+0x7c4>
 8008048:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800804c:	1a9d      	subs	r5, r3, r2
 800804e:	2d00      	cmp	r5, #0
 8008050:	f77f aa84 	ble.w	800755c <_svfprintf_r+0x7cc>
 8008054:	4e3d      	ldr	r6, [pc, #244]	; (800814c <_svfprintf_r+0x13bc>)
 8008056:	2710      	movs	r7, #16
 8008058:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800805c:	2d10      	cmp	r5, #16
 800805e:	f103 0301 	add.w	r3, r3, #1
 8008062:	6026      	str	r6, [r4, #0]
 8008064:	dc18      	bgt.n	8008098 <_svfprintf_r+0x1308>
 8008066:	6065      	str	r5, [r4, #4]
 8008068:	2b07      	cmp	r3, #7
 800806a:	4415      	add	r5, r2
 800806c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8008070:	f77f aa74 	ble.w	800755c <_svfprintf_r+0x7cc>
 8008074:	aa22      	add	r2, sp, #136	; 0x88
 8008076:	4649      	mov	r1, r9
 8008078:	4650      	mov	r0, sl
 800807a:	f006 fb6f 	bl	800e75c <__ssprint_r>
 800807e:	2800      	cmp	r0, #0
 8008080:	f43f aa6c 	beq.w	800755c <_svfprintf_r+0x7cc>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f43f a88a 	beq.w	80071a0 <_svfprintf_r+0x410>
 800808c:	4619      	mov	r1, r3
 800808e:	4650      	mov	r0, sl
 8008090:	f7fe f97a 	bl	8006388 <_free_r>
 8008094:	f7ff b884 	b.w	80071a0 <_svfprintf_r+0x410>
 8008098:	3210      	adds	r2, #16
 800809a:	2b07      	cmp	r3, #7
 800809c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80080a0:	6067      	str	r7, [r4, #4]
 80080a2:	dc02      	bgt.n	80080aa <_svfprintf_r+0x131a>
 80080a4:	3408      	adds	r4, #8
 80080a6:	3d10      	subs	r5, #16
 80080a8:	e7d6      	b.n	8008058 <_svfprintf_r+0x12c8>
 80080aa:	aa22      	add	r2, sp, #136	; 0x88
 80080ac:	4649      	mov	r1, r9
 80080ae:	4650      	mov	r0, sl
 80080b0:	f006 fb54 	bl	800e75c <__ssprint_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1e5      	bne.n	8008084 <_svfprintf_r+0x12f4>
 80080b8:	ac25      	add	r4, sp, #148	; 0x94
 80080ba:	e7f4      	b.n	80080a6 <_svfprintf_r+0x1316>
 80080bc:	9903      	ldr	r1, [sp, #12]
 80080be:	4650      	mov	r0, sl
 80080c0:	f7fe f962 	bl	8006388 <_free_r>
 80080c4:	f7ff ba62 	b.w	800758c <_svfprintf_r+0x7fc>
 80080c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f43f a868 	beq.w	80071a0 <_svfprintf_r+0x410>
 80080d0:	aa22      	add	r2, sp, #136	; 0x88
 80080d2:	4649      	mov	r1, r9
 80080d4:	4650      	mov	r0, sl
 80080d6:	f006 fb41 	bl	800e75c <__ssprint_r>
 80080da:	f7ff b861 	b.w	80071a0 <_svfprintf_r+0x410>
 80080de:	ea56 0207 	orrs.w	r2, r6, r7
 80080e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e6:	f43f ab78 	beq.w	80077da <_svfprintf_r+0xa4a>
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	f43f ac0d 	beq.w	800790a <_svfprintf_r+0xb7a>
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80080f6:	f43f ac55 	beq.w	80079a4 <_svfprintf_r+0xc14>
 80080fa:	08f2      	lsrs	r2, r6, #3
 80080fc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8008100:	08f8      	lsrs	r0, r7, #3
 8008102:	f006 0307 	and.w	r3, r6, #7
 8008106:	4607      	mov	r7, r0
 8008108:	4616      	mov	r6, r2
 800810a:	3330      	adds	r3, #48	; 0x30
 800810c:	ea56 0207 	orrs.w	r2, r6, r7
 8008110:	4659      	mov	r1, fp
 8008112:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8008116:	d1f0      	bne.n	80080fa <_svfprintf_r+0x136a>
 8008118:	9a03      	ldr	r2, [sp, #12]
 800811a:	07d2      	lsls	r2, r2, #31
 800811c:	d506      	bpl.n	800812c <_svfprintf_r+0x139c>
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d004      	beq.n	800812c <_svfprintf_r+0x139c>
 8008122:	2330      	movs	r3, #48	; 0x30
 8008124:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8008128:	f1a1 0b02 	sub.w	fp, r1, #2
 800812c:	ab4e      	add	r3, sp, #312	; 0x138
 800812e:	eba3 030b 	sub.w	r3, r3, fp
 8008132:	9e04      	ldr	r6, [sp, #16]
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008142:	461d      	mov	r5, r3
 8008144:	f7ff b94c 	b.w	80073e0 <_svfprintf_r+0x650>
 8008148:	08011ca4 	.word	0x08011ca4
 800814c:	08011c94 	.word	0x08011c94

08008150 <sysconf>:
 8008150:	2808      	cmp	r0, #8
 8008152:	b508      	push	{r3, lr}
 8008154:	d006      	beq.n	8008164 <sysconf+0x14>
 8008156:	f7fe f86f 	bl	8006238 <__errno>
 800815a:	2316      	movs	r3, #22
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	f04f 30ff 	mov.w	r0, #4294967295
 8008162:	bd08      	pop	{r3, pc}
 8008164:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008168:	e7fb      	b.n	8008162 <sysconf+0x12>
	...

0800816c <time>:
 800816c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <time+0x30>)
 8008170:	2200      	movs	r2, #0
 8008172:	4669      	mov	r1, sp
 8008174:	4604      	mov	r4, r0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	f004 f8e6 	bl	800c348 <_gettimeofday_r>
 800817c:	2800      	cmp	r0, #0
 800817e:	bfbe      	ittt	lt
 8008180:	f04f 32ff 	movlt.w	r2, #4294967295
 8008184:	f04f 33ff 	movlt.w	r3, #4294967295
 8008188:	e9cd 2300 	strdlt	r2, r3, [sp]
 800818c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008190:	b10c      	cbz	r4, 8008196 <time+0x2a>
 8008192:	e9c4 0100 	strd	r0, r1, [r4]
 8008196:	b004      	add	sp, #16
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	2000001c 	.word	0x2000001c

080081a0 <__tzcalc_limits>:
 80081a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	4680      	mov	r8, r0
 80081a6:	f004 f8e1 	bl	800c36c <__gettzinfo>
 80081aa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80081ae:	4598      	cmp	r8, r3
 80081b0:	f340 8098 	ble.w	80082e4 <__tzcalc_limits+0x144>
 80081b4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80081b8:	4443      	add	r3, r8
 80081ba:	109b      	asrs	r3, r3, #2
 80081bc:	f240 126d 	movw	r2, #365	; 0x16d
 80081c0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80081c4:	fb02 3505 	mla	r5, r2, r5, r3
 80081c8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80081cc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80081d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d4:	441d      	add	r5, r3
 80081d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80081da:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80081de:	fb98 f7f3 	sdiv	r7, r8, r3
 80081e2:	fb03 8717 	mls	r7, r3, r7, r8
 80081e6:	4442      	add	r2, r8
 80081e8:	fab7 fc87 	clz	ip, r7
 80081ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f0:	f008 0303 	and.w	r3, r8, #3
 80081f4:	4415      	add	r5, r2
 80081f6:	2264      	movs	r2, #100	; 0x64
 80081f8:	f8c0 8004 	str.w	r8, [r0, #4]
 80081fc:	fb98 f6f2 	sdiv	r6, r8, r2
 8008200:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008204:	fb02 8616 	mls	r6, r2, r6, r8
 8008208:	4604      	mov	r4, r0
 800820a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	f04f 0e07 	mov.w	lr, #7
 8008214:	7a22      	ldrb	r2, [r4, #8]
 8008216:	6963      	ldr	r3, [r4, #20]
 8008218:	2a4a      	cmp	r2, #74	; 0x4a
 800821a:	d128      	bne.n	800826e <__tzcalc_limits+0xce>
 800821c:	9900      	ldr	r1, [sp, #0]
 800821e:	18ea      	adds	r2, r5, r3
 8008220:	b901      	cbnz	r1, 8008224 <__tzcalc_limits+0x84>
 8008222:	b906      	cbnz	r6, 8008226 <__tzcalc_limits+0x86>
 8008224:	bb0f      	cbnz	r7, 800826a <__tzcalc_limits+0xca>
 8008226:	2b3b      	cmp	r3, #59	; 0x3b
 8008228:	bfd4      	ite	le
 800822a:	2300      	movle	r3, #0
 800822c:	2301      	movgt	r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	1e5a      	subs	r2, r3, #1
 8008232:	69a3      	ldr	r3, [r4, #24]
 8008234:	492c      	ldr	r1, [pc, #176]	; (80082e8 <__tzcalc_limits+0x148>)
 8008236:	fb01 3202 	mla	r2, r1, r2, r3
 800823a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800823c:	4413      	add	r3, r2
 800823e:	461a      	mov	r2, r3
 8008240:	17db      	asrs	r3, r3, #31
 8008242:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008246:	3428      	adds	r4, #40	; 0x28
 8008248:	45a3      	cmp	fp, r4
 800824a:	d1e3      	bne.n	8008214 <__tzcalc_limits+0x74>
 800824c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8008250:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8008254:	4294      	cmp	r4, r2
 8008256:	eb75 0303 	sbcs.w	r3, r5, r3
 800825a:	bfb4      	ite	lt
 800825c:	2301      	movlt	r3, #1
 800825e:	2300      	movge	r3, #0
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	2001      	movs	r0, #1
 8008264:	b003      	add	sp, #12
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	2300      	movs	r3, #0
 800826c:	e7df      	b.n	800822e <__tzcalc_limits+0x8e>
 800826e:	2a44      	cmp	r2, #68	; 0x44
 8008270:	d101      	bne.n	8008276 <__tzcalc_limits+0xd6>
 8008272:	18ea      	adds	r2, r5, r3
 8008274:	e7dd      	b.n	8008232 <__tzcalc_limits+0x92>
 8008276:	9a00      	ldr	r2, [sp, #0]
 8008278:	bb72      	cbnz	r2, 80082d8 <__tzcalc_limits+0x138>
 800827a:	2e00      	cmp	r6, #0
 800827c:	bf0c      	ite	eq
 800827e:	46e0      	moveq	r8, ip
 8008280:	f04f 0801 	movne.w	r8, #1
 8008284:	4919      	ldr	r1, [pc, #100]	; (80082ec <__tzcalc_limits+0x14c>)
 8008286:	68e2      	ldr	r2, [r4, #12]
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800828e:	fb0a 1808 	mla	r8, sl, r8, r1
 8008292:	462a      	mov	r2, r5
 8008294:	f04f 0900 	mov.w	r9, #0
 8008298:	f1a8 0804 	sub.w	r8, r8, #4
 800829c:	9901      	ldr	r1, [sp, #4]
 800829e:	f109 0901 	add.w	r9, r9, #1
 80082a2:	4549      	cmp	r1, r9
 80082a4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80082a8:	dc18      	bgt.n	80082dc <__tzcalc_limits+0x13c>
 80082aa:	f102 0804 	add.w	r8, r2, #4
 80082ae:	fb98 f9fe 	sdiv	r9, r8, lr
 80082b2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80082b6:	eba8 0909 	sub.w	r9, r8, r9
 80082ba:	ebb3 0909 	subs.w	r9, r3, r9
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80082c4:	bf48      	it	mi
 80082c6:	f109 0907 	addmi.w	r9, r9, #7
 80082ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80082ce:	444b      	add	r3, r9
 80082d0:	4553      	cmp	r3, sl
 80082d2:	da05      	bge.n	80082e0 <__tzcalc_limits+0x140>
 80082d4:	441a      	add	r2, r3
 80082d6:	e7ac      	b.n	8008232 <__tzcalc_limits+0x92>
 80082d8:	46e0      	mov	r8, ip
 80082da:	e7d3      	b.n	8008284 <__tzcalc_limits+0xe4>
 80082dc:	4452      	add	r2, sl
 80082de:	e7dd      	b.n	800829c <__tzcalc_limits+0xfc>
 80082e0:	3b07      	subs	r3, #7
 80082e2:	e7f5      	b.n	80082d0 <__tzcalc_limits+0x130>
 80082e4:	2000      	movs	r0, #0
 80082e6:	e7bd      	b.n	8008264 <__tzcalc_limits+0xc4>
 80082e8:	00015180 	.word	0x00015180
 80082ec:	08011c00 	.word	0x08011c00

080082f0 <__tz_lock>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__tz_lock+0x8>)
 80082f2:	f7fe ba2d 	b.w	8006750 <__retarget_lock_acquire>
 80082f6:	bf00      	nop
 80082f8:	20000baf 	.word	0x20000baf

080082fc <__tz_unlock>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__tz_unlock+0x8>)
 80082fe:	f7fe ba29 	b.w	8006754 <__retarget_lock_release>
 8008302:	bf00      	nop
 8008304:	20000baf 	.word	0x20000baf

08008308 <_tzset_unlocked>:
 8008308:	4b01      	ldr	r3, [pc, #4]	; (8008310 <_tzset_unlocked+0x8>)
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	f000 b802 	b.w	8008314 <_tzset_unlocked_r>
 8008310:	2000001c 	.word	0x2000001c

08008314 <_tzset_unlocked_r>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	b08d      	sub	sp, #52	; 0x34
 800831a:	4607      	mov	r7, r0
 800831c:	f004 f826 	bl	800c36c <__gettzinfo>
 8008320:	49ae      	ldr	r1, [pc, #696]	; (80085dc <_tzset_unlocked_r+0x2c8>)
 8008322:	4eaf      	ldr	r6, [pc, #700]	; (80085e0 <_tzset_unlocked_r+0x2cc>)
 8008324:	4605      	mov	r5, r0
 8008326:	4638      	mov	r0, r7
 8008328:	f004 f806 	bl	800c338 <_getenv_r>
 800832c:	4604      	mov	r4, r0
 800832e:	b970      	cbnz	r0, 800834e <_tzset_unlocked_r+0x3a>
 8008330:	4bac      	ldr	r3, [pc, #688]	; (80085e4 <_tzset_unlocked_r+0x2d0>)
 8008332:	4aad      	ldr	r2, [pc, #692]	; (80085e8 <_tzset_unlocked_r+0x2d4>)
 8008334:	6018      	str	r0, [r3, #0]
 8008336:	4bad      	ldr	r3, [pc, #692]	; (80085ec <_tzset_unlocked_r+0x2d8>)
 8008338:	6018      	str	r0, [r3, #0]
 800833a:	4bad      	ldr	r3, [pc, #692]	; (80085f0 <_tzset_unlocked_r+0x2dc>)
 800833c:	6830      	ldr	r0, [r6, #0]
 800833e:	e9c3 2200 	strd	r2, r2, [r3]
 8008342:	f7fe fa11 	bl	8006768 <free>
 8008346:	6034      	str	r4, [r6, #0]
 8008348:	b00d      	add	sp, #52	; 0x34
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	6831      	ldr	r1, [r6, #0]
 8008350:	2900      	cmp	r1, #0
 8008352:	d15f      	bne.n	8008414 <_tzset_unlocked_r+0x100>
 8008354:	6830      	ldr	r0, [r6, #0]
 8008356:	f7fe fa07 	bl	8006768 <free>
 800835a:	4620      	mov	r0, r4
 800835c:	f7f7 ff42 	bl	80001e4 <strlen>
 8008360:	1c41      	adds	r1, r0, #1
 8008362:	4638      	mov	r0, r7
 8008364:	f7fe fa08 	bl	8006778 <_malloc_r>
 8008368:	6030      	str	r0, [r6, #0]
 800836a:	2800      	cmp	r0, #0
 800836c:	d157      	bne.n	800841e <_tzset_unlocked_r+0x10a>
 800836e:	7823      	ldrb	r3, [r4, #0]
 8008370:	4aa0      	ldr	r2, [pc, #640]	; (80085f4 <_tzset_unlocked_r+0x2e0>)
 8008372:	49a1      	ldr	r1, [pc, #644]	; (80085f8 <_tzset_unlocked_r+0x2e4>)
 8008374:	2b3a      	cmp	r3, #58	; 0x3a
 8008376:	bf08      	it	eq
 8008378:	3401      	addeq	r4, #1
 800837a:	ae0a      	add	r6, sp, #40	; 0x28
 800837c:	4633      	mov	r3, r6
 800837e:	4620      	mov	r0, r4
 8008380:	f005 f8c0 	bl	800d504 <siscanf>
 8008384:	2800      	cmp	r0, #0
 8008386:	dddf      	ble.n	8008348 <_tzset_unlocked_r+0x34>
 8008388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838a:	18e7      	adds	r7, r4, r3
 800838c:	5ce3      	ldrb	r3, [r4, r3]
 800838e:	2b2d      	cmp	r3, #45	; 0x2d
 8008390:	d149      	bne.n	8008426 <_tzset_unlocked_r+0x112>
 8008392:	3701      	adds	r7, #1
 8008394:	f04f 34ff 	mov.w	r4, #4294967295
 8008398:	f10d 0a20 	add.w	sl, sp, #32
 800839c:	f10d 0b1e 	add.w	fp, sp, #30
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80083a8:	4994      	ldr	r1, [pc, #592]	; (80085fc <_tzset_unlocked_r+0x2e8>)
 80083aa:	9603      	str	r6, [sp, #12]
 80083ac:	f8cd b000 	str.w	fp, [sp]
 80083b0:	4633      	mov	r3, r6
 80083b2:	aa07      	add	r2, sp, #28
 80083b4:	4638      	mov	r0, r7
 80083b6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80083ba:	f8ad 8020 	strh.w	r8, [sp, #32]
 80083be:	f005 f8a1 	bl	800d504 <siscanf>
 80083c2:	4540      	cmp	r0, r8
 80083c4:	ddc0      	ble.n	8008348 <_tzset_unlocked_r+0x34>
 80083c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80083ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80083ce:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8008608 <_tzset_unlocked_r+0x2f4>
 80083d2:	213c      	movs	r1, #60	; 0x3c
 80083d4:	fb01 2203 	mla	r2, r1, r3, r2
 80083d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80083dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80083e0:	fb01 2303 	mla	r3, r1, r3, r2
 80083e4:	435c      	muls	r4, r3
 80083e6:	62ac      	str	r4, [r5, #40]	; 0x28
 80083e8:	4c81      	ldr	r4, [pc, #516]	; (80085f0 <_tzset_unlocked_r+0x2dc>)
 80083ea:	4b82      	ldr	r3, [pc, #520]	; (80085f4 <_tzset_unlocked_r+0x2e0>)
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	4981      	ldr	r1, [pc, #516]	; (80085f8 <_tzset_unlocked_r+0x2e4>)
 80083f2:	441f      	add	r7, r3
 80083f4:	464a      	mov	r2, r9
 80083f6:	4633      	mov	r3, r6
 80083f8:	4638      	mov	r0, r7
 80083fa:	f005 f883 	bl	800d504 <siscanf>
 80083fe:	4540      	cmp	r0, r8
 8008400:	dc16      	bgt.n	8008430 <_tzset_unlocked_r+0x11c>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	4b77      	ldr	r3, [pc, #476]	; (80085e4 <_tzset_unlocked_r+0x2d0>)
 8008408:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	4b77      	ldr	r3, [pc, #476]	; (80085ec <_tzset_unlocked_r+0x2d8>)
 800840e:	f8c3 8000 	str.w	r8, [r3]
 8008412:	e799      	b.n	8008348 <_tzset_unlocked_r+0x34>
 8008414:	f7f7 fedc 	bl	80001d0 <strcmp>
 8008418:	2800      	cmp	r0, #0
 800841a:	d19b      	bne.n	8008354 <_tzset_unlocked_r+0x40>
 800841c:	e794      	b.n	8008348 <_tzset_unlocked_r+0x34>
 800841e:	4621      	mov	r1, r4
 8008420:	f005 f901 	bl	800d626 <strcpy>
 8008424:	e7a3      	b.n	800836e <_tzset_unlocked_r+0x5a>
 8008426:	2b2b      	cmp	r3, #43	; 0x2b
 8008428:	bf08      	it	eq
 800842a:	3701      	addeq	r7, #1
 800842c:	2401      	movs	r4, #1
 800842e:	e7b3      	b.n	8008398 <_tzset_unlocked_r+0x84>
 8008430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008432:	f8c4 9004 	str.w	r9, [r4, #4]
 8008436:	18fc      	adds	r4, r7, r3
 8008438:	5cfb      	ldrb	r3, [r7, r3]
 800843a:	2b2d      	cmp	r3, #45	; 0x2d
 800843c:	f040 808b 	bne.w	8008556 <_tzset_unlocked_r+0x242>
 8008440:	3401      	adds	r4, #1
 8008442:	f04f 37ff 	mov.w	r7, #4294967295
 8008446:	2300      	movs	r3, #0
 8008448:	f8ad 301c 	strh.w	r3, [sp, #28]
 800844c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008450:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008454:	930a      	str	r3, [sp, #40]	; 0x28
 8008456:	e9cd a602 	strd	sl, r6, [sp, #8]
 800845a:	e9cd b600 	strd	fp, r6, [sp]
 800845e:	4967      	ldr	r1, [pc, #412]	; (80085fc <_tzset_unlocked_r+0x2e8>)
 8008460:	4633      	mov	r3, r6
 8008462:	aa07      	add	r2, sp, #28
 8008464:	4620      	mov	r0, r4
 8008466:	f005 f84d 	bl	800d504 <siscanf>
 800846a:	2800      	cmp	r0, #0
 800846c:	dc78      	bgt.n	8008560 <_tzset_unlocked_r+0x24c>
 800846e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8008470:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	652f      	str	r7, [r5, #80]	; 0x50
 8008478:	441c      	add	r4, r3
 800847a:	462f      	mov	r7, r5
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	7823      	ldrb	r3, [r4, #0]
 8008482:	2b2c      	cmp	r3, #44	; 0x2c
 8008484:	bf08      	it	eq
 8008486:	3401      	addeq	r4, #1
 8008488:	f894 8000 	ldrb.w	r8, [r4]
 800848c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8008490:	d178      	bne.n	8008584 <_tzset_unlocked_r+0x270>
 8008492:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8008496:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800849a:	ab09      	add	r3, sp, #36	; 0x24
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	4958      	ldr	r1, [pc, #352]	; (8008600 <_tzset_unlocked_r+0x2ec>)
 80084a0:	9603      	str	r6, [sp, #12]
 80084a2:	4633      	mov	r3, r6
 80084a4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80084a8:	4620      	mov	r0, r4
 80084aa:	f005 f82b 	bl	800d504 <siscanf>
 80084ae:	2803      	cmp	r0, #3
 80084b0:	f47f af4a 	bne.w	8008348 <_tzset_unlocked_r+0x34>
 80084b4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80084b8:	1e4b      	subs	r3, r1, #1
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	f63f af44 	bhi.w	8008348 <_tzset_unlocked_r+0x34>
 80084c0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80084c4:	1e53      	subs	r3, r2, #1
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	f63f af3e 	bhi.w	8008348 <_tzset_unlocked_r+0x34>
 80084cc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	f63f af39 	bhi.w	8008348 <_tzset_unlocked_r+0x34>
 80084d6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80084da:	f887 8008 	strb.w	r8, [r7, #8]
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e2:	eb04 0803 	add.w	r8, r4, r3
 80084e6:	2302      	movs	r3, #2
 80084e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80084ec:	2300      	movs	r3, #0
 80084ee:	f8ad 301e 	strh.w	r3, [sp, #30]
 80084f2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80084f6:	930a      	str	r3, [sp, #40]	; 0x28
 80084f8:	f898 3000 	ldrb.w	r3, [r8]
 80084fc:	2b2f      	cmp	r3, #47	; 0x2f
 80084fe:	d109      	bne.n	8008514 <_tzset_unlocked_r+0x200>
 8008500:	e9cd a602 	strd	sl, r6, [sp, #8]
 8008504:	e9cd b600 	strd	fp, r6, [sp]
 8008508:	493e      	ldr	r1, [pc, #248]	; (8008604 <_tzset_unlocked_r+0x2f0>)
 800850a:	4633      	mov	r3, r6
 800850c:	aa07      	add	r2, sp, #28
 800850e:	4640      	mov	r0, r8
 8008510:	f004 fff8 	bl	800d504 <siscanf>
 8008514:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008518:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800851c:	213c      	movs	r1, #60	; 0x3c
 800851e:	fb01 2203 	mla	r2, r1, r3, r2
 8008522:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008526:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800852a:	fb01 2303 	mla	r3, r1, r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008532:	3728      	adds	r7, #40	; 0x28
 8008534:	4444      	add	r4, r8
 8008536:	f1b9 0f00 	cmp.w	r9, #0
 800853a:	d020      	beq.n	800857e <_tzset_unlocked_r+0x26a>
 800853c:	6868      	ldr	r0, [r5, #4]
 800853e:	f7ff fe2f 	bl	80081a0 <__tzcalc_limits>
 8008542:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <_tzset_unlocked_r+0x2d0>)
 8008544:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	4a27      	ldr	r2, [pc, #156]	; (80085ec <_tzset_unlocked_r+0x2d8>)
 800854e:	bf18      	it	ne
 8008550:	2301      	movne	r3, #1
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	e6f8      	b.n	8008348 <_tzset_unlocked_r+0x34>
 8008556:	2b2b      	cmp	r3, #43	; 0x2b
 8008558:	bf08      	it	eq
 800855a:	3401      	addeq	r4, #1
 800855c:	2701      	movs	r7, #1
 800855e:	e772      	b.n	8008446 <_tzset_unlocked_r+0x132>
 8008560:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008564:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008568:	213c      	movs	r1, #60	; 0x3c
 800856a:	fb01 2203 	mla	r2, r1, r3, r2
 800856e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008572:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008576:	fb01 2303 	mla	r3, r1, r3, r2
 800857a:	435f      	muls	r7, r3
 800857c:	e77a      	b.n	8008474 <_tzset_unlocked_r+0x160>
 800857e:	f04f 0901 	mov.w	r9, #1
 8008582:	e77d      	b.n	8008480 <_tzset_unlocked_r+0x16c>
 8008584:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8008588:	bf06      	itte	eq
 800858a:	3401      	addeq	r4, #1
 800858c:	4643      	moveq	r3, r8
 800858e:	2344      	movne	r3, #68	; 0x44
 8008590:	220a      	movs	r2, #10
 8008592:	a90b      	add	r1, sp, #44	; 0x2c
 8008594:	4620      	mov	r0, r4
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	f006 f83a 	bl	800e610 <strtoul>
 800859c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80085a6:	45a0      	cmp	r8, r4
 80085a8:	d114      	bne.n	80085d4 <_tzset_unlocked_r+0x2c0>
 80085aa:	234d      	movs	r3, #77	; 0x4d
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	d107      	bne.n	80085c2 <_tzset_unlocked_r+0x2ae>
 80085b2:	722b      	strb	r3, [r5, #8]
 80085b4:	2103      	movs	r1, #3
 80085b6:	2302      	movs	r3, #2
 80085b8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80085bc:	f8c5 9014 	str.w	r9, [r5, #20]
 80085c0:	e791      	b.n	80084e6 <_tzset_unlocked_r+0x1d2>
 80085c2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80085c6:	220b      	movs	r2, #11
 80085c8:	2301      	movs	r3, #1
 80085ca:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80085ce:	2300      	movs	r3, #0
 80085d0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80085d2:	e788      	b.n	80084e6 <_tzset_unlocked_r+0x1d2>
 80085d4:	b280      	uxth	r0, r0
 80085d6:	723b      	strb	r3, [r7, #8]
 80085d8:	6178      	str	r0, [r7, #20]
 80085da:	e784      	b.n	80084e6 <_tzset_unlocked_r+0x1d2>
 80085dc:	08011cb4 	.word	0x08011cb4
 80085e0:	20000aa4 	.word	0x20000aa4
 80085e4:	20000aac 	.word	0x20000aac
 80085e8:	08011cb7 	.word	0x08011cb7
 80085ec:	20000aa8 	.word	0x20000aa8
 80085f0:	20000858 	.word	0x20000858
 80085f4:	20000a97 	.word	0x20000a97
 80085f8:	08011cbb 	.word	0x08011cbb
 80085fc:	08011cde 	.word	0x08011cde
 8008600:	08011cca 	.word	0x08011cca
 8008604:	08011cdd 	.word	0x08011cdd
 8008608:	20000a8c 	.word	0x20000a8c
 800860c:	00000000 	.word	0x00000000

08008610 <_vfprintf_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b04 	vpush	{d8-d9}
 8008618:	b0cf      	sub	sp, #316	; 0x13c
 800861a:	4689      	mov	r9, r1
 800861c:	9203      	str	r2, [sp, #12]
 800861e:	461c      	mov	r4, r3
 8008620:	461e      	mov	r6, r3
 8008622:	4682      	mov	sl, r0
 8008624:	f003 ff6a 	bl	800c4fc <_localeconv_r>
 8008628:	6803      	ldr	r3, [r0, #0]
 800862a:	9313      	str	r3, [sp, #76]	; 0x4c
 800862c:	4618      	mov	r0, r3
 800862e:	f7f7 fdd9 	bl	80001e4 <strlen>
 8008632:	900e      	str	r0, [sp, #56]	; 0x38
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d005      	beq.n	8008646 <_vfprintf_r+0x36>
 800863a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800863e:	b913      	cbnz	r3, 8008646 <_vfprintf_r+0x36>
 8008640:	4650      	mov	r0, sl
 8008642:	f003 fc15 	bl	800be70 <__sinit>
 8008646:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800864a:	07d8      	lsls	r0, r3, #31
 800864c:	d407      	bmi.n	800865e <_vfprintf_r+0x4e>
 800864e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008652:	0599      	lsls	r1, r3, #22
 8008654:	d403      	bmi.n	800865e <_vfprintf_r+0x4e>
 8008656:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800865a:	f7fe f87a 	bl	8006752 <__retarget_lock_acquire_recursive>
 800865e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8008662:	049a      	lsls	r2, r3, #18
 8008664:	d409      	bmi.n	800867a <_vfprintf_r+0x6a>
 8008666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800866a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800866e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008676:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800867a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800867e:	071f      	lsls	r7, r3, #28
 8008680:	d502      	bpl.n	8008688 <_vfprintf_r+0x78>
 8008682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008686:	b9d3      	cbnz	r3, 80086be <_vfprintf_r+0xae>
 8008688:	4649      	mov	r1, r9
 800868a:	4650      	mov	r0, sl
 800868c:	f002 fbec 	bl	800ae68 <__swsetup_r>
 8008690:	b1a8      	cbz	r0, 80086be <_vfprintf_r+0xae>
 8008692:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008696:	07dd      	lsls	r5, r3, #31
 8008698:	d508      	bpl.n	80086ac <_vfprintf_r+0x9c>
 800869a:	f04f 33ff 	mov.w	r3, #4294967295
 800869e:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80086a2:	b04f      	add	sp, #316	; 0x13c
 80086a4:	ecbd 8b04 	vpop	{d8-d9}
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086b0:	059c      	lsls	r4, r3, #22
 80086b2:	d4f2      	bmi.n	800869a <_vfprintf_r+0x8a>
 80086b4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80086b8:	f7fe f84d 	bl	8006756 <__retarget_lock_release_recursive>
 80086bc:	e7ed      	b.n	800869a <_vfprintf_r+0x8a>
 80086be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086c2:	f003 021a 	and.w	r2, r3, #26
 80086c6:	2a0a      	cmp	r2, #10
 80086c8:	d115      	bne.n	80086f6 <_vfprintf_r+0xe6>
 80086ca:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	db11      	blt.n	80086f6 <_vfprintf_r+0xe6>
 80086d2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80086d6:	07d0      	lsls	r0, r2, #31
 80086d8:	d405      	bmi.n	80086e6 <_vfprintf_r+0xd6>
 80086da:	0599      	lsls	r1, r3, #22
 80086dc:	d403      	bmi.n	80086e6 <_vfprintf_r+0xd6>
 80086de:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80086e2:	f7fe f838 	bl	8006756 <__retarget_lock_release_recursive>
 80086e6:	9a03      	ldr	r2, [sp, #12]
 80086e8:	4623      	mov	r3, r4
 80086ea:	4649      	mov	r1, r9
 80086ec:	4650      	mov	r0, sl
 80086ee:	f001 f9c5 	bl	8009a7c <__sbprintf>
 80086f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80086f4:	e7d4      	b.n	80086a0 <_vfprintf_r+0x90>
 80086f6:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8008960 <_vfprintf_r+0x350>
 80086fa:	2500      	movs	r5, #0
 80086fc:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8008700:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008704:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8008708:	ac25      	add	r4, sp, #148	; 0x94
 800870a:	9422      	str	r4, [sp, #136]	; 0x88
 800870c:	9505      	str	r5, [sp, #20]
 800870e:	950a      	str	r5, [sp, #40]	; 0x28
 8008710:	9512      	str	r5, [sp, #72]	; 0x48
 8008712:	9514      	str	r5, [sp, #80]	; 0x50
 8008714:	950f      	str	r5, [sp, #60]	; 0x3c
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	461d      	mov	r5, r3
 800871a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800871e:	b10a      	cbz	r2, 8008724 <_vfprintf_r+0x114>
 8008720:	2a25      	cmp	r2, #37	; 0x25
 8008722:	d1f9      	bne.n	8008718 <_vfprintf_r+0x108>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	1aef      	subs	r7, r5, r3
 8008728:	d00d      	beq.n	8008746 <_vfprintf_r+0x136>
 800872a:	e9c4 3700 	strd	r3, r7, [r4]
 800872e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008730:	443b      	add	r3, r7
 8008732:	9324      	str	r3, [sp, #144]	; 0x90
 8008734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008736:	3301      	adds	r3, #1
 8008738:	2b07      	cmp	r3, #7
 800873a:	9323      	str	r3, [sp, #140]	; 0x8c
 800873c:	dc79      	bgt.n	8008832 <_vfprintf_r+0x222>
 800873e:	3408      	adds	r4, #8
 8008740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008742:	443b      	add	r3, r7
 8008744:	930f      	str	r3, [sp, #60]	; 0x3c
 8008746:	782b      	ldrb	r3, [r5, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f001 8156 	beq.w	80099fa <_vfprintf_r+0x13ea>
 800874e:	2300      	movs	r3, #0
 8008750:	3501      	adds	r5, #1
 8008752:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008756:	f04f 38ff 	mov.w	r8, #4294967295
 800875a:	9310      	str	r3, [sp, #64]	; 0x40
 800875c:	469b      	mov	fp, r3
 800875e:	270a      	movs	r7, #10
 8008760:	212b      	movs	r1, #43	; 0x2b
 8008762:	462a      	mov	r2, r5
 8008764:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008768:	9307      	str	r3, [sp, #28]
 800876a:	4613      	mov	r3, r2
 800876c:	930b      	str	r3, [sp, #44]	; 0x2c
 800876e:	9b07      	ldr	r3, [sp, #28]
 8008770:	3b20      	subs	r3, #32
 8008772:	2b5a      	cmp	r3, #90	; 0x5a
 8008774:	f200 85c0 	bhi.w	80092f8 <_vfprintf_r+0xce8>
 8008778:	e8df f013 	tbh	[pc, r3, lsl #1]
 800877c:	05be007e 	.word	0x05be007e
 8008780:	008605be 	.word	0x008605be
 8008784:	05be05be 	.word	0x05be05be
 8008788:	006505be 	.word	0x006505be
 800878c:	05be05be 	.word	0x05be05be
 8008790:	00930089 	.word	0x00930089
 8008794:	009005be 	.word	0x009005be
 8008798:	05be0096 	.word	0x05be0096
 800879c:	00b200af 	.word	0x00b200af
 80087a0:	00b200b2 	.word	0x00b200b2
 80087a4:	00b200b2 	.word	0x00b200b2
 80087a8:	00b200b2 	.word	0x00b200b2
 80087ac:	00b200b2 	.word	0x00b200b2
 80087b0:	05be05be 	.word	0x05be05be
 80087b4:	05be05be 	.word	0x05be05be
 80087b8:	05be05be 	.word	0x05be05be
 80087bc:	012105be 	.word	0x012105be
 80087c0:	00df05be 	.word	0x00df05be
 80087c4:	012100f6 	.word	0x012100f6
 80087c8:	01210121 	.word	0x01210121
 80087cc:	05be05be 	.word	0x05be05be
 80087d0:	05be05be 	.word	0x05be05be
 80087d4:	05be00c2 	.word	0x05be00c2
 80087d8:	049005be 	.word	0x049005be
 80087dc:	05be05be 	.word	0x05be05be
 80087e0:	04d705be 	.word	0x04d705be
 80087e4:	04fb05be 	.word	0x04fb05be
 80087e8:	05be05be 	.word	0x05be05be
 80087ec:	05be051a 	.word	0x05be051a
 80087f0:	05be05be 	.word	0x05be05be
 80087f4:	05be05be 	.word	0x05be05be
 80087f8:	05be05be 	.word	0x05be05be
 80087fc:	012105be 	.word	0x012105be
 8008800:	00df05be 	.word	0x00df05be
 8008804:	012100f8 	.word	0x012100f8
 8008808:	01210121 	.word	0x01210121
 800880c:	00f800c5 	.word	0x00f800c5
 8008810:	05be00d9 	.word	0x05be00d9
 8008814:	05be00d2 	.word	0x05be00d2
 8008818:	0492046d 	.word	0x0492046d
 800881c:	00d904c6 	.word	0x00d904c6
 8008820:	04d705be 	.word	0x04d705be
 8008824:	04fd007c 	.word	0x04fd007c
 8008828:	05be05be 	.word	0x05be05be
 800882c:	05be0537 	.word	0x05be0537
 8008830:	007c      	.short	0x007c
 8008832:	aa22      	add	r2, sp, #136	; 0x88
 8008834:	4649      	mov	r1, r9
 8008836:	4650      	mov	r0, sl
 8008838:	f007 fd49 	bl	80102ce <__sprint_r>
 800883c:	2800      	cmp	r0, #0
 800883e:	f040 8130 	bne.w	8008aa2 <_vfprintf_r+0x492>
 8008842:	ac25      	add	r4, sp, #148	; 0x94
 8008844:	e77c      	b.n	8008740 <_vfprintf_r+0x130>
 8008846:	4650      	mov	r0, sl
 8008848:	f003 fe58 	bl	800c4fc <_localeconv_r>
 800884c:	6843      	ldr	r3, [r0, #4]
 800884e:	9314      	str	r3, [sp, #80]	; 0x50
 8008850:	4618      	mov	r0, r3
 8008852:	f7f7 fcc7 	bl	80001e4 <strlen>
 8008856:	9012      	str	r0, [sp, #72]	; 0x48
 8008858:	4650      	mov	r0, sl
 800885a:	f003 fe4f 	bl	800c4fc <_localeconv_r>
 800885e:	6883      	ldr	r3, [r0, #8]
 8008860:	930a      	str	r3, [sp, #40]	; 0x28
 8008862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008864:	212b      	movs	r1, #43	; 0x2b
 8008866:	b12b      	cbz	r3, 8008874 <_vfprintf_r+0x264>
 8008868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886a:	b11b      	cbz	r3, 8008874 <_vfprintf_r+0x264>
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	b10b      	cbz	r3, 8008874 <_vfprintf_r+0x264>
 8008870:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8008874:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008876:	e774      	b.n	8008762 <_vfprintf_r+0x152>
 8008878:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f9      	bne.n	8008874 <_vfprintf_r+0x264>
 8008880:	2320      	movs	r3, #32
 8008882:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008886:	e7f5      	b.n	8008874 <_vfprintf_r+0x264>
 8008888:	f04b 0b01 	orr.w	fp, fp, #1
 800888c:	e7f2      	b.n	8008874 <_vfprintf_r+0x264>
 800888e:	f856 3b04 	ldr.w	r3, [r6], #4
 8008892:	9310      	str	r3, [sp, #64]	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	daed      	bge.n	8008874 <_vfprintf_r+0x264>
 8008898:	425b      	negs	r3, r3
 800889a:	9310      	str	r3, [sp, #64]	; 0x40
 800889c:	f04b 0b04 	orr.w	fp, fp, #4
 80088a0:	e7e8      	b.n	8008874 <_vfprintf_r+0x264>
 80088a2:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80088a6:	e7e5      	b.n	8008874 <_vfprintf_r+0x264>
 80088a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ae:	9207      	str	r2, [sp, #28]
 80088b0:	2a2a      	cmp	r2, #42	; 0x2a
 80088b2:	d10f      	bne.n	80088d4 <_vfprintf_r+0x2c4>
 80088b4:	f856 0b04 	ldr.w	r0, [r6], #4
 80088b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ba:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 80088be:	e7d9      	b.n	8008874 <_vfprintf_r+0x264>
 80088c0:	fb07 2808 	mla	r8, r7, r8, r2
 80088c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c8:	9207      	str	r2, [sp, #28]
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	3a30      	subs	r2, #48	; 0x30
 80088ce:	2a09      	cmp	r2, #9
 80088d0:	d9f6      	bls.n	80088c0 <_vfprintf_r+0x2b0>
 80088d2:	e74b      	b.n	800876c <_vfprintf_r+0x15c>
 80088d4:	f04f 0800 	mov.w	r8, #0
 80088d8:	e7f7      	b.n	80088ca <_vfprintf_r+0x2ba>
 80088da:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80088de:	e7c9      	b.n	8008874 <_vfprintf_r+0x264>
 80088e0:	2200      	movs	r2, #0
 80088e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e4:	9210      	str	r2, [sp, #64]	; 0x40
 80088e6:	9a07      	ldr	r2, [sp, #28]
 80088e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088ea:	3a30      	subs	r2, #48	; 0x30
 80088ec:	fb07 2200 	mla	r2, r7, r0, r2
 80088f0:	9210      	str	r2, [sp, #64]	; 0x40
 80088f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f6:	9207      	str	r2, [sp, #28]
 80088f8:	3a30      	subs	r2, #48	; 0x30
 80088fa:	2a09      	cmp	r2, #9
 80088fc:	d9f3      	bls.n	80088e6 <_vfprintf_r+0x2d6>
 80088fe:	e735      	b.n	800876c <_vfprintf_r+0x15c>
 8008900:	f04b 0b08 	orr.w	fp, fp, #8
 8008904:	e7b6      	b.n	8008874 <_vfprintf_r+0x264>
 8008906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b68      	cmp	r3, #104	; 0x68
 800890c:	bf01      	itttt	eq
 800890e:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8008910:	3301      	addeq	r3, #1
 8008912:	930b      	streq	r3, [sp, #44]	; 0x2c
 8008914:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008918:	bf18      	it	ne
 800891a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800891e:	e7a9      	b.n	8008874 <_vfprintf_r+0x264>
 8008920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b6c      	cmp	r3, #108	; 0x6c
 8008926:	d105      	bne.n	8008934 <_vfprintf_r+0x324>
 8008928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892a:	3301      	adds	r3, #1
 800892c:	930b      	str	r3, [sp, #44]	; 0x2c
 800892e:	f04b 0b20 	orr.w	fp, fp, #32
 8008932:	e79f      	b.n	8008874 <_vfprintf_r+0x264>
 8008934:	f04b 0b10 	orr.w	fp, fp, #16
 8008938:	e79c      	b.n	8008874 <_vfprintf_r+0x264>
 800893a:	4632      	mov	r2, r6
 800893c:	2000      	movs	r0, #0
 800893e:	f852 3b04 	ldr.w	r3, [r2], #4
 8008942:	9206      	str	r2, [sp, #24]
 8008944:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008948:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800894c:	ab35      	add	r3, sp, #212	; 0xd4
 800894e:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8008952:	9004      	str	r0, [sp, #16]
 8008954:	f04f 0801 	mov.w	r8, #1
 8008958:	4606      	mov	r6, r0
 800895a:	4605      	mov	r5, r0
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	e1c3      	b.n	8008ce8 <_vfprintf_r+0x6d8>
	...
 8008968:	f04b 0b10 	orr.w	fp, fp, #16
 800896c:	f01b 0f20 	tst.w	fp, #32
 8008970:	d012      	beq.n	8008998 <_vfprintf_r+0x388>
 8008972:	3607      	adds	r6, #7
 8008974:	f026 0307 	bic.w	r3, r6, #7
 8008978:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	2e00      	cmp	r6, #0
 8008980:	f177 0300 	sbcs.w	r3, r7, #0
 8008984:	da06      	bge.n	8008994 <_vfprintf_r+0x384>
 8008986:	4276      	negs	r6, r6
 8008988:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800898c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008990:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008994:	2301      	movs	r3, #1
 8008996:	e392      	b.n	80090be <_vfprintf_r+0xaae>
 8008998:	1d33      	adds	r3, r6, #4
 800899a:	f01b 0f10 	tst.w	fp, #16
 800899e:	9306      	str	r3, [sp, #24]
 80089a0:	d002      	beq.n	80089a8 <_vfprintf_r+0x398>
 80089a2:	6836      	ldr	r6, [r6, #0]
 80089a4:	17f7      	asrs	r7, r6, #31
 80089a6:	e7ea      	b.n	800897e <_vfprintf_r+0x36e>
 80089a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80089ac:	6836      	ldr	r6, [r6, #0]
 80089ae:	d001      	beq.n	80089b4 <_vfprintf_r+0x3a4>
 80089b0:	b236      	sxth	r6, r6
 80089b2:	e7f7      	b.n	80089a4 <_vfprintf_r+0x394>
 80089b4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80089b8:	bf18      	it	ne
 80089ba:	b276      	sxtbne	r6, r6
 80089bc:	e7f2      	b.n	80089a4 <_vfprintf_r+0x394>
 80089be:	3607      	adds	r6, #7
 80089c0:	f026 0307 	bic.w	r3, r6, #7
 80089c4:	ecb3 7b02 	vldmia	r3!, {d7}
 80089c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80089cc:	9306      	str	r3, [sp, #24]
 80089ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089d0:	ee09 3a10 	vmov	s18, r3
 80089d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089da:	ee09 3a90 	vmov	s19, r3
 80089de:	f04f 32ff 	mov.w	r2, #4294967295
 80089e2:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <_vfprintf_r+0x4b8>)
 80089e4:	ec51 0b19 	vmov	r0, r1, d9
 80089e8:	f7f8 f8b0 	bl	8000b4c <__aeabi_dcmpun>
 80089ec:	bb20      	cbnz	r0, 8008a38 <_vfprintf_r+0x428>
 80089ee:	4b36      	ldr	r3, [pc, #216]	; (8008ac8 <_vfprintf_r+0x4b8>)
 80089f0:	ec51 0b19 	vmov	r0, r1, d9
 80089f4:	f04f 32ff 	mov.w	r2, #4294967295
 80089f8:	f7f8 f88a 	bl	8000b10 <__aeabi_dcmple>
 80089fc:	b9e0      	cbnz	r0, 8008a38 <_vfprintf_r+0x428>
 80089fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	f7f8 f879 	bl	8000afc <__aeabi_dcmplt>
 8008a0a:	b110      	cbz	r0, 8008a12 <_vfprintf_r+0x402>
 8008a0c:	232d      	movs	r3, #45	; 0x2d
 8008a0e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008a12:	4a2e      	ldr	r2, [pc, #184]	; (8008acc <_vfprintf_r+0x4bc>)
 8008a14:	482e      	ldr	r0, [pc, #184]	; (8008ad0 <_vfprintf_r+0x4c0>)
 8008a16:	9907      	ldr	r1, [sp, #28]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	2947      	cmp	r1, #71	; 0x47
 8008a1c:	bfc8      	it	gt
 8008a1e:	4603      	movgt	r3, r0
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	f04f 0803 	mov.w	r8, #3
 8008a2e:	461e      	mov	r6, r3
 8008a30:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008a34:	461d      	mov	r5, r3
 8008a36:	e157      	b.n	8008ce8 <_vfprintf_r+0x6d8>
 8008a38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f7f8 f884 	bl	8000b4c <__aeabi_dcmpun>
 8008a44:	b140      	cbz	r0, 8008a58 <_vfprintf_r+0x448>
 8008a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a48:	4a22      	ldr	r2, [pc, #136]	; (8008ad4 <_vfprintf_r+0x4c4>)
 8008a4a:	4823      	ldr	r0, [pc, #140]	; (8008ad8 <_vfprintf_r+0x4c8>)
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bfbc      	itt	lt
 8008a50:	232d      	movlt	r3, #45	; 0x2d
 8008a52:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8008a56:	e7de      	b.n	8008a16 <_vfprintf_r+0x406>
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	f023 0320 	bic.w	r3, r3, #32
 8008a5e:	2b41      	cmp	r3, #65	; 0x41
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	d13b      	bne.n	8008adc <_vfprintf_r+0x4cc>
 8008a64:	2330      	movs	r3, #48	; 0x30
 8008a66:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008a6a:	9b07      	ldr	r3, [sp, #28]
 8008a6c:	2b61      	cmp	r3, #97	; 0x61
 8008a6e:	bf0c      	ite	eq
 8008a70:	2378      	moveq	r3, #120	; 0x78
 8008a72:	2358      	movne	r3, #88	; 0x58
 8008a74:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8008a78:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008a7c:	f04b 0b02 	orr.w	fp, fp, #2
 8008a80:	f340 8209 	ble.w	8008e96 <_vfprintf_r+0x886>
 8008a84:	f108 0101 	add.w	r1, r8, #1
 8008a88:	4650      	mov	r0, sl
 8008a8a:	f7fd fe75 	bl	8006778 <_malloc_r>
 8008a8e:	9003      	str	r0, [sp, #12]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	f040 8204 	bne.w	8008e9e <_vfprintf_r+0x88e>
 8008a96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9e:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008aa2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	d407      	bmi.n	8008aba <_vfprintf_r+0x4aa>
 8008aaa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008aae:	059a      	lsls	r2, r3, #22
 8008ab0:	d403      	bmi.n	8008aba <_vfprintf_r+0x4aa>
 8008ab2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8008ab6:	f7fd fe4e 	bl	8006756 <__retarget_lock_release_recursive>
 8008aba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008abe:	065b      	lsls	r3, r3, #25
 8008ac0:	f57f adee 	bpl.w	80086a0 <_vfprintf_r+0x90>
 8008ac4:	e5e9      	b.n	800869a <_vfprintf_r+0x8a>
 8008ac6:	bf00      	nop
 8008ac8:	7fefffff 	.word	0x7fefffff
 8008acc:	08011c60 	.word	0x08011c60
 8008ad0:	08011c64 	.word	0x08011c64
 8008ad4:	08011c68 	.word	0x08011c68
 8008ad8:	08011c6c 	.word	0x08011c6c
 8008adc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008ae0:	f000 81e0 	beq.w	8008ea4 <_vfprintf_r+0x894>
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	2b47      	cmp	r3, #71	; 0x47
 8008ae8:	f040 81e0 	bne.w	8008eac <_vfprintf_r+0x89c>
 8008aec:	f1b8 0f00 	cmp.w	r8, #0
 8008af0:	f040 81dc 	bne.w	8008eac <_vfprintf_r+0x89c>
 8008af4:	f8cd 8010 	str.w	r8, [sp, #16]
 8008af8:	f04f 0801 	mov.w	r8, #1
 8008afc:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008b00:	9311      	str	r3, [sp, #68]	; 0x44
 8008b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f280 81d3 	bge.w	8008eb0 <_vfprintf_r+0x8a0>
 8008b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b0c:	ee08 3a10 	vmov	s16, r3
 8008b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b16:	ee08 3a90 	vmov	s17, r3
 8008b1a:	232d      	movs	r3, #45	; 0x2d
 8008b1c:	9318      	str	r3, [sp, #96]	; 0x60
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	2b41      	cmp	r3, #65	; 0x41
 8008b22:	f040 81e3 	bne.w	8008eec <_vfprintf_r+0x8dc>
 8008b26:	eeb0 0a48 	vmov.f32	s0, s16
 8008b2a:	eef0 0a68 	vmov.f32	s1, s17
 8008b2e:	a81c      	add	r0, sp, #112	; 0x70
 8008b30:	f004 fc50 	bl	800d3d4 <frexp>
 8008b34:	2200      	movs	r2, #0
 8008b36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b3a:	ec51 0b10 	vmov	r0, r1, d0
 8008b3e:	f7f7 fd6b 	bl	8000618 <__aeabi_dmul>
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	f7f7 ffcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b4e:	b108      	cbz	r0, 8008b54 <_vfprintf_r+0x544>
 8008b50:	2301      	movs	r3, #1
 8008b52:	931c      	str	r3, [sp, #112]	; 0x70
 8008b54:	4bb7      	ldr	r3, [pc, #732]	; (8008e34 <_vfprintf_r+0x824>)
 8008b56:	4ab8      	ldr	r2, [pc, #736]	; (8008e38 <_vfprintf_r+0x828>)
 8008b58:	9907      	ldr	r1, [sp, #28]
 8008b5a:	9d03      	ldr	r5, [sp, #12]
 8008b5c:	2961      	cmp	r1, #97	; 0x61
 8008b5e:	bf18      	it	ne
 8008b60:	461a      	movne	r2, r3
 8008b62:	f108 33ff 	add.w	r3, r8, #4294967295
 8008b66:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	4bb4      	ldr	r3, [pc, #720]	; (8008e3c <_vfprintf_r+0x82c>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 fd51 	bl	8000618 <__aeabi_dmul>
 8008b76:	460f      	mov	r7, r1
 8008b78:	4606      	mov	r6, r0
 8008b7a:	f7f7 fffd 	bl	8000b78 <__aeabi_d2iz>
 8008b7e:	9019      	str	r0, [sp, #100]	; 0x64
 8008b80:	f7f7 fce0 	bl	8000544 <__aeabi_i2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 fb8c 	bl	80002a8 <__aeabi_dsub>
 8008b90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b94:	5c9b      	ldrb	r3, [r3, r2]
 8008b96:	f805 3b01 	strb.w	r3, [r5], #1
 8008b9a:	9b05      	ldr	r3, [sp, #20]
 8008b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	460f      	mov	r7, r1
 8008ba4:	d007      	beq.n	8008bb6 <_vfprintf_r+0x5a6>
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2300      	movs	r3, #0
 8008bae:	f7f7 ff9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d0d9      	beq.n	8008b6a <_vfprintf_r+0x55a>
 8008bb6:	4ba2      	ldr	r3, [pc, #648]	; (8008e40 <_vfprintf_r+0x830>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4630      	mov	r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 ffbb 	bl	8000b38 <__aeabi_dcmpgt>
 8008bc2:	b960      	cbnz	r0, 8008bde <_vfprintf_r+0x5ce>
 8008bc4:	4b9e      	ldr	r3, [pc, #632]	; (8008e40 <_vfprintf_r+0x830>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 ff8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f000 8186 	beq.w	8008ee2 <_vfprintf_r+0x8d2>
 8008bd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bd8:	07df      	lsls	r7, r3, #31
 8008bda:	f140 8182 	bpl.w	8008ee2 <_vfprintf_r+0x8d2>
 8008bde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be0:	9520      	str	r5, [sp, #128]	; 0x80
 8008be2:	7bd9      	ldrb	r1, [r3, #15]
 8008be4:	2030      	movs	r0, #48	; 0x30
 8008be6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008be8:	1e53      	subs	r3, r2, #1
 8008bea:	9320      	str	r3, [sp, #128]	; 0x80
 8008bec:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	f000 8165 	beq.w	8008ec0 <_vfprintf_r+0x8b0>
 8008bf6:	2b39      	cmp	r3, #57	; 0x39
 8008bf8:	bf0b      	itete	eq
 8008bfa:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008bfc:	3301      	addne	r3, #1
 8008bfe:	7a9b      	ldrbeq	r3, [r3, #10]
 8008c00:	b2db      	uxtbne	r3, r3
 8008c02:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	1aeb      	subs	r3, r5, r3
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	9b08      	ldr	r3, [sp, #32]
 8008c0e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008c10:	2b47      	cmp	r3, #71	; 0x47
 8008c12:	f040 81b3 	bne.w	8008f7c <_vfprintf_r+0x96c>
 8008c16:	1cee      	adds	r6, r5, #3
 8008c18:	db02      	blt.n	8008c20 <_vfprintf_r+0x610>
 8008c1a:	4545      	cmp	r5, r8
 8008c1c:	f340 81d5 	ble.w	8008fca <_vfprintf_r+0x9ba>
 8008c20:	9b07      	ldr	r3, [sp, #28]
 8008c22:	3b02      	subs	r3, #2
 8008c24:	9307      	str	r3, [sp, #28]
 8008c26:	9907      	ldr	r1, [sp, #28]
 8008c28:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008c2c:	f021 0120 	bic.w	r1, r1, #32
 8008c30:	2941      	cmp	r1, #65	; 0x41
 8008c32:	bf08      	it	eq
 8008c34:	320f      	addeq	r2, #15
 8008c36:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c3a:	bf06      	itte	eq
 8008c3c:	b2d2      	uxtbeq	r2, r2
 8008c3e:	2101      	moveq	r1, #1
 8008c40:	2100      	movne	r1, #0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	931c      	str	r3, [sp, #112]	; 0x70
 8008c46:	bfb8      	it	lt
 8008c48:	f1c5 0301 	rsblt	r3, r5, #1
 8008c4c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8008c50:	bfb4      	ite	lt
 8008c52:	222d      	movlt	r2, #45	; 0x2d
 8008c54:	222b      	movge	r2, #43	; 0x2b
 8008c56:	2b09      	cmp	r3, #9
 8008c58:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8008c5c:	f340 81a4 	ble.w	8008fa8 <_vfprintf_r+0x998>
 8008c60:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8008c64:	260a      	movs	r6, #10
 8008c66:	4611      	mov	r1, r2
 8008c68:	fb93 f5f6 	sdiv	r5, r3, r6
 8008c6c:	fb06 3015 	mls	r0, r6, r5, r3
 8008c70:	3030      	adds	r0, #48	; 0x30
 8008c72:	f801 0c01 	strb.w	r0, [r1, #-1]
 8008c76:	4618      	mov	r0, r3
 8008c78:	2863      	cmp	r0, #99	; 0x63
 8008c7a:	f102 32ff 	add.w	r2, r2, #4294967295
 8008c7e:	462b      	mov	r3, r5
 8008c80:	dcf1      	bgt.n	8008c66 <_vfprintf_r+0x656>
 8008c82:	3330      	adds	r3, #48	; 0x30
 8008c84:	1e88      	subs	r0, r1, #2
 8008c86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c8a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8008c8e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008c92:	4603      	mov	r3, r0
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	f0c0 8182 	bcc.w	8008f9e <_vfprintf_r+0x98e>
 8008c9a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8008c9e:	1a52      	subs	r2, r2, r1
 8008ca0:	42a8      	cmp	r0, r5
 8008ca2:	bf88      	it	hi
 8008ca4:	2200      	movhi	r2, #0
 8008ca6:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8008caa:	441a      	add	r2, r3
 8008cac:	ab1e      	add	r3, sp, #120	; 0x78
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	9a05      	ldr	r2, [sp, #20]
 8008cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8008cb4:	2a01      	cmp	r2, #1
 8008cb6:	eb03 0802 	add.w	r8, r3, r2
 8008cba:	dc02      	bgt.n	8008cc2 <_vfprintf_r+0x6b2>
 8008cbc:	f01b 0f01 	tst.w	fp, #1
 8008cc0:	d001      	beq.n	8008cc6 <_vfprintf_r+0x6b6>
 8008cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cc4:	4498      	add	r8, r3
 8008cc6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8008cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cce:	9311      	str	r3, [sp, #68]	; 0x44
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008cda:	b113      	cbz	r3, 8008ce2 <_vfprintf_r+0x6d2>
 8008cdc:	232d      	movs	r3, #45	; 0x2d
 8008cde:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008ce2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008ce6:	2600      	movs	r6, #0
 8008ce8:	4546      	cmp	r6, r8
 8008cea:	4633      	mov	r3, r6
 8008cec:	bfb8      	it	lt
 8008cee:	4643      	movlt	r3, r8
 8008cf0:	9311      	str	r3, [sp, #68]	; 0x44
 8008cf2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008cf6:	b113      	cbz	r3, 8008cfe <_vfprintf_r+0x6ee>
 8008cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8008cfe:	f01b 0302 	ands.w	r3, fp, #2
 8008d02:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d04:	bf1e      	ittt	ne
 8008d06:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008d08:	3302      	addne	r3, #2
 8008d0a:	9311      	strne	r3, [sp, #68]	; 0x44
 8008d0c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008d10:	9318      	str	r3, [sp, #96]	; 0x60
 8008d12:	d11f      	bne.n	8008d54 <_vfprintf_r+0x744>
 8008d14:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008d18:	1a9f      	subs	r7, r3, r2
 8008d1a:	2f00      	cmp	r7, #0
 8008d1c:	dd1a      	ble.n	8008d54 <_vfprintf_r+0x744>
 8008d1e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008d22:	4848      	ldr	r0, [pc, #288]	; (8008e44 <_vfprintf_r+0x834>)
 8008d24:	6020      	str	r0, [r4, #0]
 8008d26:	2f10      	cmp	r7, #16
 8008d28:	f103 0301 	add.w	r3, r3, #1
 8008d2c:	f104 0108 	add.w	r1, r4, #8
 8008d30:	f300 82f0 	bgt.w	8009314 <_vfprintf_r+0xd04>
 8008d34:	6067      	str	r7, [r4, #4]
 8008d36:	2b07      	cmp	r3, #7
 8008d38:	4417      	add	r7, r2
 8008d3a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008d3e:	f340 82fc 	ble.w	800933a <_vfprintf_r+0xd2a>
 8008d42:	aa22      	add	r2, sp, #136	; 0x88
 8008d44:	4649      	mov	r1, r9
 8008d46:	4650      	mov	r0, sl
 8008d48:	f007 fac1 	bl	80102ce <__sprint_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f040 8632 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8008d52:	ac25      	add	r4, sp, #148	; 0x94
 8008d54:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008d58:	b173      	cbz	r3, 8008d78 <_vfprintf_r+0x768>
 8008d5a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	2301      	movs	r3, #1
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d66:	3301      	adds	r3, #1
 8008d68:	9324      	str	r3, [sp, #144]	; 0x90
 8008d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	9323      	str	r3, [sp, #140]	; 0x8c
 8008d72:	f300 82e4 	bgt.w	800933e <_vfprintf_r+0xd2e>
 8008d76:	3408      	adds	r4, #8
 8008d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d7a:	b16b      	cbz	r3, 8008d98 <_vfprintf_r+0x788>
 8008d7c:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	2302      	movs	r3, #2
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d86:	3302      	adds	r3, #2
 8008d88:	9324      	str	r3, [sp, #144]	; 0x90
 8008d8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	2b07      	cmp	r3, #7
 8008d90:	9323      	str	r3, [sp, #140]	; 0x8c
 8008d92:	f300 82de 	bgt.w	8009352 <_vfprintf_r+0xd42>
 8008d96:	3408      	adds	r4, #8
 8008d98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008d9a:	2b80      	cmp	r3, #128	; 0x80
 8008d9c:	d11f      	bne.n	8008dde <_vfprintf_r+0x7ce>
 8008d9e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008da2:	1a9f      	subs	r7, r3, r2
 8008da4:	2f00      	cmp	r7, #0
 8008da6:	dd1a      	ble.n	8008dde <_vfprintf_r+0x7ce>
 8008da8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008dac:	4826      	ldr	r0, [pc, #152]	; (8008e48 <_vfprintf_r+0x838>)
 8008dae:	6020      	str	r0, [r4, #0]
 8008db0:	2f10      	cmp	r7, #16
 8008db2:	f103 0301 	add.w	r3, r3, #1
 8008db6:	f104 0108 	add.w	r1, r4, #8
 8008dba:	f300 82d4 	bgt.w	8009366 <_vfprintf_r+0xd56>
 8008dbe:	6067      	str	r7, [r4, #4]
 8008dc0:	2b07      	cmp	r3, #7
 8008dc2:	4417      	add	r7, r2
 8008dc4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008dc8:	f340 82e0 	ble.w	800938c <_vfprintf_r+0xd7c>
 8008dcc:	aa22      	add	r2, sp, #136	; 0x88
 8008dce:	4649      	mov	r1, r9
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	f007 fa7c 	bl	80102ce <__sprint_r>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 85ed 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8008ddc:	ac25      	add	r4, sp, #148	; 0x94
 8008dde:	eba6 0608 	sub.w	r6, r6, r8
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	dd1a      	ble.n	8008e1c <_vfprintf_r+0x80c>
 8008de6:	4f18      	ldr	r7, [pc, #96]	; (8008e48 <_vfprintf_r+0x838>)
 8008de8:	6027      	str	r7, [r4, #0]
 8008dea:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008dee:	2e10      	cmp	r6, #16
 8008df0:	f103 0301 	add.w	r3, r3, #1
 8008df4:	f104 0108 	add.w	r1, r4, #8
 8008df8:	f300 82ca 	bgt.w	8009390 <_vfprintf_r+0xd80>
 8008dfc:	6066      	str	r6, [r4, #4]
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	4416      	add	r6, r2
 8008e02:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8008e06:	f340 82d6 	ble.w	80093b6 <_vfprintf_r+0xda6>
 8008e0a:	aa22      	add	r2, sp, #136	; 0x88
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4650      	mov	r0, sl
 8008e10:	f007 fa5d 	bl	80102ce <__sprint_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 85ce 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8008e1a:	ac25      	add	r4, sp, #148	; 0x94
 8008e1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e20:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008e22:	f040 82cf 	bne.w	80093c4 <_vfprintf_r+0xdb4>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	e9c4 3800 	strd	r3, r8, [r4]
 8008e2c:	4446      	add	r6, r8
 8008e2e:	9624      	str	r6, [sp, #144]	; 0x90
 8008e30:	e00c      	b.n	8008e4c <_vfprintf_r+0x83c>
 8008e32:	bf00      	nop
 8008e34:	08011c81 	.word	0x08011c81
 8008e38:	08011c70 	.word	0x08011c70
 8008e3c:	40300000 	.word	0x40300000
 8008e40:	3fe00000 	.word	0x3fe00000
 8008e44:	08011cf0 	.word	0x08011cf0
 8008e48:	08011d00 	.word	0x08011d00
 8008e4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e4e:	3301      	adds	r3, #1
 8008e50:	2b07      	cmp	r3, #7
 8008e52:	9323      	str	r3, [sp, #140]	; 0x8c
 8008e54:	f300 82fb 	bgt.w	800944e <_vfprintf_r+0xe3e>
 8008e58:	3408      	adds	r4, #8
 8008e5a:	f01b 0f04 	tst.w	fp, #4
 8008e5e:	f040 858c 	bne.w	800997a <_vfprintf_r+0x136a>
 8008e62:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008e66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	bfac      	ite	ge
 8008e6c:	189b      	addge	r3, r3, r2
 8008e6e:	185b      	addlt	r3, r3, r1
 8008e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e74:	b13b      	cbz	r3, 8008e86 <_vfprintf_r+0x876>
 8008e76:	aa22      	add	r2, sp, #136	; 0x88
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f007 fa27 	bl	80102ce <__sprint_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	f040 8598 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9323      	str	r3, [sp, #140]	; 0x8c
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 85ae 	bne.w	80099ee <_vfprintf_r+0x13de>
 8008e92:	ac25      	add	r4, sp, #148	; 0x94
 8008e94:	e0eb      	b.n	800906e <_vfprintf_r+0xa5e>
 8008e96:	ab35      	add	r3, sp, #212	; 0xd4
 8008e98:	9004      	str	r0, [sp, #16]
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	e62e      	b.n	8008afc <_vfprintf_r+0x4ec>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	e62b      	b.n	8008afc <_vfprintf_r+0x4ec>
 8008ea4:	9004      	str	r0, [sp, #16]
 8008ea6:	f04f 0806 	mov.w	r8, #6
 8008eaa:	e627      	b.n	8008afc <_vfprintf_r+0x4ec>
 8008eac:	9004      	str	r0, [sp, #16]
 8008eae:	e625      	b.n	8008afc <_vfprintf_r+0x4ec>
 8008eb0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	eeb0 8a47 	vmov.f32	s16, s14
 8008eba:	eef0 8a67 	vmov.f32	s17, s15
 8008ebe:	e62d      	b.n	8008b1c <_vfprintf_r+0x50c>
 8008ec0:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008ec4:	e68f      	b.n	8008be6 <_vfprintf_r+0x5d6>
 8008ec6:	f803 0b01 	strb.w	r0, [r3], #1
 8008eca:	1aca      	subs	r2, r1, r3
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	dafa      	bge.n	8008ec6 <_vfprintf_r+0x8b6>
 8008ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	f103 0301 	add.w	r3, r3, #1
 8008eda:	bfb8      	it	lt
 8008edc:	2300      	movlt	r3, #0
 8008ede:	441d      	add	r5, r3
 8008ee0:	e691      	b.n	8008c06 <_vfprintf_r+0x5f6>
 8008ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	18a9      	adds	r1, r5, r2
 8008ee8:	2030      	movs	r0, #48	; 0x30
 8008eea:	e7ee      	b.n	8008eca <_vfprintf_r+0x8ba>
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	2b46      	cmp	r3, #70	; 0x46
 8008ef0:	d005      	beq.n	8008efe <_vfprintf_r+0x8ee>
 8008ef2:	2b45      	cmp	r3, #69	; 0x45
 8008ef4:	d11b      	bne.n	8008f2e <_vfprintf_r+0x91e>
 8008ef6:	f108 0501 	add.w	r5, r8, #1
 8008efa:	2102      	movs	r1, #2
 8008efc:	e001      	b.n	8008f02 <_vfprintf_r+0x8f2>
 8008efe:	4645      	mov	r5, r8
 8008f00:	2103      	movs	r1, #3
 8008f02:	ab20      	add	r3, sp, #128	; 0x80
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	ab1d      	add	r3, sp, #116	; 0x74
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	ab1c      	add	r3, sp, #112	; 0x70
 8008f0e:	4650      	mov	r0, sl
 8008f10:	eeb0 0a48 	vmov.f32	s0, s16
 8008f14:	eef0 0a68 	vmov.f32	s1, s17
 8008f18:	f002 f8ca 	bl	800b0b0 <_dtoa_r>
 8008f1c:	9b08      	ldr	r3, [sp, #32]
 8008f1e:	9003      	str	r0, [sp, #12]
 8008f20:	2b47      	cmp	r3, #71	; 0x47
 8008f22:	d106      	bne.n	8008f32 <_vfprintf_r+0x922>
 8008f24:	f01b 0f01 	tst.w	fp, #1
 8008f28:	d103      	bne.n	8008f32 <_vfprintf_r+0x922>
 8008f2a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008f2c:	e66b      	b.n	8008c06 <_vfprintf_r+0x5f6>
 8008f2e:	4645      	mov	r5, r8
 8008f30:	e7e3      	b.n	8008efa <_vfprintf_r+0x8ea>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	195e      	adds	r6, r3, r5
 8008f36:	9b08      	ldr	r3, [sp, #32]
 8008f38:	2b46      	cmp	r3, #70	; 0x46
 8008f3a:	d10f      	bne.n	8008f5c <_vfprintf_r+0x94c>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b30      	cmp	r3, #48	; 0x30
 8008f42:	d109      	bne.n	8008f58 <_vfprintf_r+0x948>
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f7f7 fdcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f50:	b910      	cbnz	r0, 8008f58 <_vfprintf_r+0x948>
 8008f52:	f1c5 0501 	rsb	r5, r5, #1
 8008f56:	951c      	str	r5, [sp, #112]	; 0x70
 8008f58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f5a:	441e      	add	r6, r3
 8008f5c:	ec51 0b18 	vmov	r0, r1, d8
 8008f60:	2200      	movs	r2, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	f7f7 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f68:	b100      	cbz	r0, 8008f6c <_vfprintf_r+0x95c>
 8008f6a:	9620      	str	r6, [sp, #128]	; 0x80
 8008f6c:	2230      	movs	r2, #48	; 0x30
 8008f6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f70:	429e      	cmp	r6, r3
 8008f72:	d9da      	bls.n	8008f2a <_vfprintf_r+0x91a>
 8008f74:	1c59      	adds	r1, r3, #1
 8008f76:	9120      	str	r1, [sp, #128]	; 0x80
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	e7f8      	b.n	8008f6e <_vfprintf_r+0x95e>
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b46      	cmp	r3, #70	; 0x46
 8008f80:	f47f ae51 	bne.w	8008c26 <_vfprintf_r+0x616>
 8008f84:	f00b 0301 	and.w	r3, fp, #1
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	ea43 0308 	orr.w	r3, r3, r8
 8008f8e:	dd18      	ble.n	8008fc2 <_vfprintf_r+0x9b2>
 8008f90:	b383      	cbz	r3, 8008ff4 <_vfprintf_r+0x9e4>
 8008f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f94:	18eb      	adds	r3, r5, r3
 8008f96:	4498      	add	r8, r3
 8008f98:	2366      	movs	r3, #102	; 0x66
 8008f9a:	9307      	str	r3, [sp, #28]
 8008f9c:	e030      	b.n	8009000 <_vfprintf_r+0x9f0>
 8008f9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008fa2:	f802 6b01 	strb.w	r6, [r2], #1
 8008fa6:	e675      	b.n	8008c94 <_vfprintf_r+0x684>
 8008fa8:	b941      	cbnz	r1, 8008fbc <_vfprintf_r+0x9ac>
 8008faa:	2230      	movs	r2, #48	; 0x30
 8008fac:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008fb0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008fb4:	3330      	adds	r3, #48	; 0x30
 8008fb6:	f802 3b01 	strb.w	r3, [r2], #1
 8008fba:	e677      	b.n	8008cac <_vfprintf_r+0x69c>
 8008fbc:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008fc0:	e7f8      	b.n	8008fb4 <_vfprintf_r+0x9a4>
 8008fc2:	b1cb      	cbz	r3, 8008ff8 <_vfprintf_r+0x9e8>
 8008fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	e7e5      	b.n	8008f96 <_vfprintf_r+0x986>
 8008fca:	9b05      	ldr	r3, [sp, #20]
 8008fcc:	429d      	cmp	r5, r3
 8008fce:	db07      	blt.n	8008fe0 <_vfprintf_r+0x9d0>
 8008fd0:	f01b 0f01 	tst.w	fp, #1
 8008fd4:	d029      	beq.n	800902a <_vfprintf_r+0xa1a>
 8008fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fd8:	eb05 0803 	add.w	r8, r5, r3
 8008fdc:	2367      	movs	r3, #103	; 0x67
 8008fde:	e7dc      	b.n	8008f9a <_vfprintf_r+0x98a>
 8008fe0:	9b05      	ldr	r3, [sp, #20]
 8008fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	eb03 0802 	add.w	r8, r3, r2
 8008fea:	dcf7      	bgt.n	8008fdc <_vfprintf_r+0x9cc>
 8008fec:	f1c5 0301 	rsb	r3, r5, #1
 8008ff0:	4498      	add	r8, r3
 8008ff2:	e7f3      	b.n	8008fdc <_vfprintf_r+0x9cc>
 8008ff4:	46a8      	mov	r8, r5
 8008ff6:	e7cf      	b.n	8008f98 <_vfprintf_r+0x988>
 8008ff8:	2366      	movs	r3, #102	; 0x66
 8008ffa:	9307      	str	r3, [sp, #28]
 8008ffc:	f04f 0801 	mov.w	r8, #1
 8009000:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
 8009006:	d023      	beq.n	8009050 <_vfprintf_r+0xa40>
 8009008:	2300      	movs	r3, #0
 800900a:	2d00      	cmp	r5, #0
 800900c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009010:	f77f ae62 	ble.w	8008cd8 <_vfprintf_r+0x6c8>
 8009014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2bff      	cmp	r3, #255	; 0xff
 800901a:	d108      	bne.n	800902e <_vfprintf_r+0xa1e>
 800901c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009020:	4413      	add	r3, r2
 8009022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009024:	fb02 8803 	mla	r8, r2, r3, r8
 8009028:	e656      	b.n	8008cd8 <_vfprintf_r+0x6c8>
 800902a:	46a8      	mov	r8, r5
 800902c:	e7d6      	b.n	8008fdc <_vfprintf_r+0x9cc>
 800902e:	42ab      	cmp	r3, r5
 8009030:	daf4      	bge.n	800901c <_vfprintf_r+0xa0c>
 8009032:	1aed      	subs	r5, r5, r3
 8009034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	b133      	cbz	r3, 8009048 <_vfprintf_r+0xa38>
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	3301      	adds	r3, #1
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	3301      	adds	r3, #1
 8009044:	930a      	str	r3, [sp, #40]	; 0x28
 8009046:	e7e5      	b.n	8009014 <_vfprintf_r+0xa04>
 8009048:	9b08      	ldr	r3, [sp, #32]
 800904a:	3301      	adds	r3, #1
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	e7e1      	b.n	8009014 <_vfprintf_r+0xa04>
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	9308      	str	r3, [sp, #32]
 8009054:	e640      	b.n	8008cd8 <_vfprintf_r+0x6c8>
 8009056:	4632      	mov	r2, r6
 8009058:	f01b 0f20 	tst.w	fp, #32
 800905c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009060:	9206      	str	r2, [sp, #24]
 8009062:	d009      	beq.n	8009078 <_vfprintf_r+0xa68>
 8009064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009066:	4610      	mov	r0, r2
 8009068:	17d1      	asrs	r1, r2, #31
 800906a:	e9c3 0100 	strd	r0, r1, [r3]
 800906e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009070:	9e06      	ldr	r6, [sp, #24]
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	f7ff bb4f 	b.w	8008716 <_vfprintf_r+0x106>
 8009078:	f01b 0f10 	tst.w	fp, #16
 800907c:	d002      	beq.n	8009084 <_vfprintf_r+0xa74>
 800907e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e7f4      	b.n	800906e <_vfprintf_r+0xa5e>
 8009084:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009088:	d002      	beq.n	8009090 <_vfprintf_r+0xa80>
 800908a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	e7ee      	b.n	800906e <_vfprintf_r+0xa5e>
 8009090:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009094:	d0f3      	beq.n	800907e <_vfprintf_r+0xa6e>
 8009096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	e7e8      	b.n	800906e <_vfprintf_r+0xa5e>
 800909c:	f04b 0b10 	orr.w	fp, fp, #16
 80090a0:	f01b 0f20 	tst.w	fp, #32
 80090a4:	d01e      	beq.n	80090e4 <_vfprintf_r+0xad4>
 80090a6:	3607      	adds	r6, #7
 80090a8:	f026 0307 	bic.w	r3, r6, #7
 80090ac:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80090b0:	9306      	str	r3, [sp, #24]
 80090b2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80090b6:	2300      	movs	r3, #0
 80090b8:	2200      	movs	r2, #0
 80090ba:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80090be:	f1b8 3fff 	cmp.w	r8, #4294967295
 80090c2:	f000 84a9 	beq.w	8009a18 <_vfprintf_r+0x1408>
 80090c6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 80090ca:	9204      	str	r2, [sp, #16]
 80090cc:	ea56 0207 	orrs.w	r2, r6, r7
 80090d0:	f040 84a8 	bne.w	8009a24 <_vfprintf_r+0x1414>
 80090d4:	f1b8 0f00 	cmp.w	r8, #0
 80090d8:	f000 8104 	beq.w	80092e4 <_vfprintf_r+0xcd4>
 80090dc:	2b01      	cmp	r3, #1
 80090de:	f040 84a4 	bne.w	8009a2a <_vfprintf_r+0x141a>
 80090e2:	e09a      	b.n	800921a <_vfprintf_r+0xc0a>
 80090e4:	1d33      	adds	r3, r6, #4
 80090e6:	f01b 0f10 	tst.w	fp, #16
 80090ea:	9306      	str	r3, [sp, #24]
 80090ec:	d001      	beq.n	80090f2 <_vfprintf_r+0xae2>
 80090ee:	6836      	ldr	r6, [r6, #0]
 80090f0:	e003      	b.n	80090fa <_vfprintf_r+0xaea>
 80090f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80090f6:	d002      	beq.n	80090fe <_vfprintf_r+0xaee>
 80090f8:	8836      	ldrh	r6, [r6, #0]
 80090fa:	2700      	movs	r7, #0
 80090fc:	e7d9      	b.n	80090b2 <_vfprintf_r+0xaa2>
 80090fe:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009102:	d0f4      	beq.n	80090ee <_vfprintf_r+0xade>
 8009104:	7836      	ldrb	r6, [r6, #0]
 8009106:	e7f8      	b.n	80090fa <_vfprintf_r+0xaea>
 8009108:	4633      	mov	r3, r6
 800910a:	2278      	movs	r2, #120	; 0x78
 800910c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009110:	9306      	str	r3, [sp, #24]
 8009112:	f647 0330 	movw	r3, #30768	; 0x7830
 8009116:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800911a:	4ba8      	ldr	r3, [pc, #672]	; (80093bc <_vfprintf_r+0xdac>)
 800911c:	9316      	str	r3, [sp, #88]	; 0x58
 800911e:	2700      	movs	r7, #0
 8009120:	f04b 0b02 	orr.w	fp, fp, #2
 8009124:	2302      	movs	r3, #2
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	e7c6      	b.n	80090b8 <_vfprintf_r+0xaa8>
 800912a:	4632      	mov	r2, r6
 800912c:	2500      	movs	r5, #0
 800912e:	f852 3b04 	ldr.w	r3, [r2], #4
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009138:	9206      	str	r2, [sp, #24]
 800913a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800913e:	d010      	beq.n	8009162 <_vfprintf_r+0xb52>
 8009140:	9803      	ldr	r0, [sp, #12]
 8009142:	4642      	mov	r2, r8
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 f85b 	bl	8000200 <memchr>
 800914a:	9004      	str	r0, [sp, #16]
 800914c:	2800      	cmp	r0, #0
 800914e:	f000 80df 	beq.w	8009310 <_vfprintf_r+0xd00>
 8009152:	9a03      	ldr	r2, [sp, #12]
 8009154:	9504      	str	r5, [sp, #16]
 8009156:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800915a:	eba0 0802 	sub.w	r8, r0, r2
 800915e:	462e      	mov	r6, r5
 8009160:	e5c2      	b.n	8008ce8 <_vfprintf_r+0x6d8>
 8009162:	9803      	ldr	r0, [sp, #12]
 8009164:	f7f7 f83e 	bl	80001e4 <strlen>
 8009168:	462e      	mov	r6, r5
 800916a:	4680      	mov	r8, r0
 800916c:	9504      	str	r5, [sp, #16]
 800916e:	4633      	mov	r3, r6
 8009170:	e45e      	b.n	8008a30 <_vfprintf_r+0x420>
 8009172:	f04b 0b10 	orr.w	fp, fp, #16
 8009176:	f01b 0f20 	tst.w	fp, #32
 800917a:	d007      	beq.n	800918c <_vfprintf_r+0xb7c>
 800917c:	3607      	adds	r6, #7
 800917e:	f026 0307 	bic.w	r3, r6, #7
 8009182:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009186:	9306      	str	r3, [sp, #24]
 8009188:	2301      	movs	r3, #1
 800918a:	e795      	b.n	80090b8 <_vfprintf_r+0xaa8>
 800918c:	1d33      	adds	r3, r6, #4
 800918e:	f01b 0f10 	tst.w	fp, #16
 8009192:	9306      	str	r3, [sp, #24]
 8009194:	d001      	beq.n	800919a <_vfprintf_r+0xb8a>
 8009196:	6836      	ldr	r6, [r6, #0]
 8009198:	e003      	b.n	80091a2 <_vfprintf_r+0xb92>
 800919a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800919e:	d002      	beq.n	80091a6 <_vfprintf_r+0xb96>
 80091a0:	8836      	ldrh	r6, [r6, #0]
 80091a2:	2700      	movs	r7, #0
 80091a4:	e7f0      	b.n	8009188 <_vfprintf_r+0xb78>
 80091a6:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80091aa:	d0f4      	beq.n	8009196 <_vfprintf_r+0xb86>
 80091ac:	7836      	ldrb	r6, [r6, #0]
 80091ae:	e7f8      	b.n	80091a2 <_vfprintf_r+0xb92>
 80091b0:	4b83      	ldr	r3, [pc, #524]	; (80093c0 <_vfprintf_r+0xdb0>)
 80091b2:	9316      	str	r3, [sp, #88]	; 0x58
 80091b4:	f01b 0f20 	tst.w	fp, #32
 80091b8:	d019      	beq.n	80091ee <_vfprintf_r+0xbde>
 80091ba:	3607      	adds	r6, #7
 80091bc:	f026 0307 	bic.w	r3, r6, #7
 80091c0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	f01b 0f01 	tst.w	fp, #1
 80091ca:	d00a      	beq.n	80091e2 <_vfprintf_r+0xbd2>
 80091cc:	ea56 0307 	orrs.w	r3, r6, r7
 80091d0:	d007      	beq.n	80091e2 <_vfprintf_r+0xbd2>
 80091d2:	2330      	movs	r3, #48	; 0x30
 80091d4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80091d8:	9b07      	ldr	r3, [sp, #28]
 80091da:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80091de:	f04b 0b02 	orr.w	fp, fp, #2
 80091e2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80091e6:	2302      	movs	r3, #2
 80091e8:	e766      	b.n	80090b8 <_vfprintf_r+0xaa8>
 80091ea:	4b74      	ldr	r3, [pc, #464]	; (80093bc <_vfprintf_r+0xdac>)
 80091ec:	e7e1      	b.n	80091b2 <_vfprintf_r+0xba2>
 80091ee:	1d33      	adds	r3, r6, #4
 80091f0:	f01b 0f10 	tst.w	fp, #16
 80091f4:	9306      	str	r3, [sp, #24]
 80091f6:	d001      	beq.n	80091fc <_vfprintf_r+0xbec>
 80091f8:	6836      	ldr	r6, [r6, #0]
 80091fa:	e003      	b.n	8009204 <_vfprintf_r+0xbf4>
 80091fc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009200:	d002      	beq.n	8009208 <_vfprintf_r+0xbf8>
 8009202:	8836      	ldrh	r6, [r6, #0]
 8009204:	2700      	movs	r7, #0
 8009206:	e7de      	b.n	80091c6 <_vfprintf_r+0xbb6>
 8009208:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800920c:	d0f4      	beq.n	80091f8 <_vfprintf_r+0xbe8>
 800920e:	7836      	ldrb	r6, [r6, #0]
 8009210:	e7f8      	b.n	8009204 <_vfprintf_r+0xbf4>
 8009212:	2f00      	cmp	r7, #0
 8009214:	bf08      	it	eq
 8009216:	2e0a      	cmpeq	r6, #10
 8009218:	d206      	bcs.n	8009228 <_vfprintf_r+0xc18>
 800921a:	3630      	adds	r6, #48	; 0x30
 800921c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8009220:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8009224:	f000 bc23 	b.w	8009a6e <_vfprintf_r+0x145e>
 8009228:	2300      	movs	r3, #0
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	ad4e      	add	r5, sp, #312	; 0x138
 8009230:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8009234:	1e6b      	subs	r3, r5, #1
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	220a      	movs	r2, #10
 800923a:	2300      	movs	r3, #0
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f7 fd82 	bl	8000d48 <__aeabi_uldivmod>
 8009244:	9b05      	ldr	r3, [sp, #20]
 8009246:	3230      	adds	r2, #48	; 0x30
 8009248:	3301      	adds	r3, #1
 800924a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800924e:	9305      	str	r3, [sp, #20]
 8009250:	f1bb 0f00 	cmp.w	fp, #0
 8009254:	d019      	beq.n	800928a <_vfprintf_r+0xc7a>
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	9a05      	ldr	r2, [sp, #20]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d114      	bne.n	800928a <_vfprintf_r+0xc7a>
 8009260:	2aff      	cmp	r2, #255	; 0xff
 8009262:	d012      	beq.n	800928a <_vfprintf_r+0xc7a>
 8009264:	2f00      	cmp	r7, #0
 8009266:	bf08      	it	eq
 8009268:	2e0a      	cmpeq	r6, #10
 800926a:	d30e      	bcc.n	800928a <_vfprintf_r+0xc7a>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009270:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	4618      	mov	r0, r3
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	f004 f9ef 	bl	800d65a <strncpy>
 800927c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800927e:	785d      	ldrb	r5, [r3, #1]
 8009280:	b1e5      	cbz	r5, 80092bc <_vfprintf_r+0xcac>
 8009282:	3301      	adds	r3, #1
 8009284:	930a      	str	r3, [sp, #40]	; 0x28
 8009286:	2300      	movs	r3, #0
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	220a      	movs	r2, #10
 800928c:	2300      	movs	r3, #0
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f7 fd59 	bl	8000d48 <__aeabi_uldivmod>
 8009296:	2f00      	cmp	r7, #0
 8009298:	bf08      	it	eq
 800929a:	2e0a      	cmpeq	r6, #10
 800929c:	d20a      	bcs.n	80092b4 <_vfprintf_r+0xca4>
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80092a4:	aa4e      	add	r2, sp, #312	; 0x138
 80092a6:	4646      	mov	r6, r8
 80092a8:	eba2 0803 	sub.w	r8, r2, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	f7ff bbbe 	b.w	8008a30 <_vfprintf_r+0x420>
 80092b4:	9d03      	ldr	r5, [sp, #12]
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	e7bb      	b.n	8009234 <_vfprintf_r+0xc24>
 80092bc:	9505      	str	r5, [sp, #20]
 80092be:	e7e4      	b.n	800928a <_vfprintf_r+0xc7a>
 80092c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092c2:	f006 030f 	and.w	r3, r6, #15
 80092c6:	5cd3      	ldrb	r3, [r2, r3]
 80092c8:	9a03      	ldr	r2, [sp, #12]
 80092ca:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80092ce:	0933      	lsrs	r3, r6, #4
 80092d0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80092d4:	9203      	str	r2, [sp, #12]
 80092d6:	093a      	lsrs	r2, r7, #4
 80092d8:	461e      	mov	r6, r3
 80092da:	4617      	mov	r7, r2
 80092dc:	ea56 0307 	orrs.w	r3, r6, r7
 80092e0:	d1ee      	bne.n	80092c0 <_vfprintf_r+0xcb0>
 80092e2:	e7dc      	b.n	800929e <_vfprintf_r+0xc8e>
 80092e4:	b933      	cbnz	r3, 80092f4 <_vfprintf_r+0xce4>
 80092e6:	f01b 0f01 	tst.w	fp, #1
 80092ea:	d003      	beq.n	80092f4 <_vfprintf_r+0xce4>
 80092ec:	2330      	movs	r3, #48	; 0x30
 80092ee:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80092f2:	e795      	b.n	8009220 <_vfprintf_r+0xc10>
 80092f4:	ab4e      	add	r3, sp, #312	; 0x138
 80092f6:	e3ba      	b.n	8009a6e <_vfprintf_r+0x145e>
 80092f8:	9b07      	ldr	r3, [sp, #28]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 837d 	beq.w	80099fa <_vfprintf_r+0x13ea>
 8009300:	2000      	movs	r0, #0
 8009302:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009306:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800930a:	9606      	str	r6, [sp, #24]
 800930c:	f7ff bb1e 	b.w	800894c <_vfprintf_r+0x33c>
 8009310:	9e04      	ldr	r6, [sp, #16]
 8009312:	e72c      	b.n	800916e <_vfprintf_r+0xb5e>
 8009314:	2010      	movs	r0, #16
 8009316:	4402      	add	r2, r0
 8009318:	2b07      	cmp	r3, #7
 800931a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800931e:	6060      	str	r0, [r4, #4]
 8009320:	dd08      	ble.n	8009334 <_vfprintf_r+0xd24>
 8009322:	aa22      	add	r2, sp, #136	; 0x88
 8009324:	4649      	mov	r1, r9
 8009326:	4650      	mov	r0, sl
 8009328:	f006 ffd1 	bl	80102ce <__sprint_r>
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 8342 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009332:	a925      	add	r1, sp, #148	; 0x94
 8009334:	3f10      	subs	r7, #16
 8009336:	460c      	mov	r4, r1
 8009338:	e4f1      	b.n	8008d1e <_vfprintf_r+0x70e>
 800933a:	460c      	mov	r4, r1
 800933c:	e50a      	b.n	8008d54 <_vfprintf_r+0x744>
 800933e:	aa22      	add	r2, sp, #136	; 0x88
 8009340:	4649      	mov	r1, r9
 8009342:	4650      	mov	r0, sl
 8009344:	f006 ffc3 	bl	80102ce <__sprint_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	f040 8334 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800934e:	ac25      	add	r4, sp, #148	; 0x94
 8009350:	e512      	b.n	8008d78 <_vfprintf_r+0x768>
 8009352:	aa22      	add	r2, sp, #136	; 0x88
 8009354:	4649      	mov	r1, r9
 8009356:	4650      	mov	r0, sl
 8009358:	f006 ffb9 	bl	80102ce <__sprint_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 832a 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009362:	ac25      	add	r4, sp, #148	; 0x94
 8009364:	e518      	b.n	8008d98 <_vfprintf_r+0x788>
 8009366:	2010      	movs	r0, #16
 8009368:	4402      	add	r2, r0
 800936a:	2b07      	cmp	r3, #7
 800936c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009370:	6060      	str	r0, [r4, #4]
 8009372:	dd08      	ble.n	8009386 <_vfprintf_r+0xd76>
 8009374:	aa22      	add	r2, sp, #136	; 0x88
 8009376:	4649      	mov	r1, r9
 8009378:	4650      	mov	r0, sl
 800937a:	f006 ffa8 	bl	80102ce <__sprint_r>
 800937e:	2800      	cmp	r0, #0
 8009380:	f040 8319 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009384:	a925      	add	r1, sp, #148	; 0x94
 8009386:	3f10      	subs	r7, #16
 8009388:	460c      	mov	r4, r1
 800938a:	e50d      	b.n	8008da8 <_vfprintf_r+0x798>
 800938c:	460c      	mov	r4, r1
 800938e:	e526      	b.n	8008dde <_vfprintf_r+0x7ce>
 8009390:	2010      	movs	r0, #16
 8009392:	4402      	add	r2, r0
 8009394:	2b07      	cmp	r3, #7
 8009396:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800939a:	6060      	str	r0, [r4, #4]
 800939c:	dd08      	ble.n	80093b0 <_vfprintf_r+0xda0>
 800939e:	aa22      	add	r2, sp, #136	; 0x88
 80093a0:	4649      	mov	r1, r9
 80093a2:	4650      	mov	r0, sl
 80093a4:	f006 ff93 	bl	80102ce <__sprint_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f040 8304 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80093ae:	a925      	add	r1, sp, #148	; 0x94
 80093b0:	3e10      	subs	r6, #16
 80093b2:	460c      	mov	r4, r1
 80093b4:	e518      	b.n	8008de8 <_vfprintf_r+0x7d8>
 80093b6:	460c      	mov	r4, r1
 80093b8:	e530      	b.n	8008e1c <_vfprintf_r+0x80c>
 80093ba:	bf00      	nop
 80093bc:	08011c70 	.word	0x08011c70
 80093c0:	08011c81 	.word	0x08011c81
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	2b65      	cmp	r3, #101	; 0x65
 80093c8:	f340 8242 	ble.w	8009850 <_vfprintf_r+0x1240>
 80093cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	f7f7 fb88 	bl	8000ae8 <__aeabi_dcmpeq>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d068      	beq.n	80094ae <_vfprintf_r+0xe9e>
 80093dc:	4b6d      	ldr	r3, [pc, #436]	; (8009594 <_vfprintf_r+0xf84>)
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	2301      	movs	r3, #1
 80093e2:	441e      	add	r6, r3
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093e8:	9624      	str	r6, [sp, #144]	; 0x90
 80093ea:	3301      	adds	r3, #1
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80093f0:	dc37      	bgt.n	8009462 <_vfprintf_r+0xe52>
 80093f2:	3408      	adds	r4, #8
 80093f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80093f6:	9a05      	ldr	r2, [sp, #20]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	db03      	blt.n	8009404 <_vfprintf_r+0xdf4>
 80093fc:	f01b 0f01 	tst.w	fp, #1
 8009400:	f43f ad2b 	beq.w	8008e5a <_vfprintf_r+0x84a>
 8009404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800940a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009410:	4413      	add	r3, r2
 8009412:	9324      	str	r3, [sp, #144]	; 0x90
 8009414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009416:	3301      	adds	r3, #1
 8009418:	2b07      	cmp	r3, #7
 800941a:	9323      	str	r3, [sp, #140]	; 0x8c
 800941c:	dc2b      	bgt.n	8009476 <_vfprintf_r+0xe66>
 800941e:	3408      	adds	r4, #8
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	1e5d      	subs	r5, r3, #1
 8009424:	2d00      	cmp	r5, #0
 8009426:	f77f ad18 	ble.w	8008e5a <_vfprintf_r+0x84a>
 800942a:	4e5b      	ldr	r6, [pc, #364]	; (8009598 <_vfprintf_r+0xf88>)
 800942c:	2710      	movs	r7, #16
 800942e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009432:	2d10      	cmp	r5, #16
 8009434:	f103 0301 	add.w	r3, r3, #1
 8009438:	f104 0108 	add.w	r1, r4, #8
 800943c:	6026      	str	r6, [r4, #0]
 800943e:	dc24      	bgt.n	800948a <_vfprintf_r+0xe7a>
 8009440:	6065      	str	r5, [r4, #4]
 8009442:	2b07      	cmp	r3, #7
 8009444:	4415      	add	r5, r2
 8009446:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800944a:	f340 8293 	ble.w	8009974 <_vfprintf_r+0x1364>
 800944e:	aa22      	add	r2, sp, #136	; 0x88
 8009450:	4649      	mov	r1, r9
 8009452:	4650      	mov	r0, sl
 8009454:	f006 ff3b 	bl	80102ce <__sprint_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	f040 82ac 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800945e:	ac25      	add	r4, sp, #148	; 0x94
 8009460:	e4fb      	b.n	8008e5a <_vfprintf_r+0x84a>
 8009462:	aa22      	add	r2, sp, #136	; 0x88
 8009464:	4649      	mov	r1, r9
 8009466:	4650      	mov	r0, sl
 8009468:	f006 ff31 	bl	80102ce <__sprint_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	f040 82a2 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009472:	ac25      	add	r4, sp, #148	; 0x94
 8009474:	e7be      	b.n	80093f4 <_vfprintf_r+0xde4>
 8009476:	aa22      	add	r2, sp, #136	; 0x88
 8009478:	4649      	mov	r1, r9
 800947a:	4650      	mov	r0, sl
 800947c:	f006 ff27 	bl	80102ce <__sprint_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	f040 8298 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009486:	ac25      	add	r4, sp, #148	; 0x94
 8009488:	e7ca      	b.n	8009420 <_vfprintf_r+0xe10>
 800948a:	3210      	adds	r2, #16
 800948c:	2b07      	cmp	r3, #7
 800948e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009492:	6067      	str	r7, [r4, #4]
 8009494:	dd08      	ble.n	80094a8 <_vfprintf_r+0xe98>
 8009496:	aa22      	add	r2, sp, #136	; 0x88
 8009498:	4649      	mov	r1, r9
 800949a:	4650      	mov	r0, sl
 800949c:	f006 ff17 	bl	80102ce <__sprint_r>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f040 8288 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80094a6:	a925      	add	r1, sp, #148	; 0x94
 80094a8:	3d10      	subs	r5, #16
 80094aa:	460c      	mov	r4, r1
 80094ac:	e7bf      	b.n	800942e <_vfprintf_r+0xe1e>
 80094ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dc73      	bgt.n	800959c <_vfprintf_r+0xf8c>
 80094b4:	4b37      	ldr	r3, [pc, #220]	; (8009594 <_vfprintf_r+0xf84>)
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	2301      	movs	r3, #1
 80094ba:	441e      	add	r6, r3
 80094bc:	6063      	str	r3, [r4, #4]
 80094be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094c0:	9624      	str	r6, [sp, #144]	; 0x90
 80094c2:	3301      	adds	r3, #1
 80094c4:	2b07      	cmp	r3, #7
 80094c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80094c8:	dc3d      	bgt.n	8009546 <_vfprintf_r+0xf36>
 80094ca:	3408      	adds	r4, #8
 80094cc:	9905      	ldr	r1, [sp, #20]
 80094ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80094d2:	430a      	orrs	r2, r1
 80094d4:	f00b 0101 	and.w	r1, fp, #1
 80094d8:	430a      	orrs	r2, r1
 80094da:	f43f acbe 	beq.w	8008e5a <_vfprintf_r+0x84a>
 80094de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094e0:	6022      	str	r2, [r4, #0]
 80094e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e4:	6062      	str	r2, [r4, #4]
 80094e6:	4413      	add	r3, r2
 80094e8:	9324      	str	r3, [sp, #144]	; 0x90
 80094ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ec:	3301      	adds	r3, #1
 80094ee:	2b07      	cmp	r3, #7
 80094f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80094f2:	dc32      	bgt.n	800955a <_vfprintf_r+0xf4a>
 80094f4:	3408      	adds	r4, #8
 80094f6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	da1b      	bge.n	8009534 <_vfprintf_r+0xf24>
 80094fc:	4e26      	ldr	r6, [pc, #152]	; (8009598 <_vfprintf_r+0xf88>)
 80094fe:	426d      	negs	r5, r5
 8009500:	4623      	mov	r3, r4
 8009502:	2710      	movs	r7, #16
 8009504:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009508:	2d10      	cmp	r5, #16
 800950a:	f102 0201 	add.w	r2, r2, #1
 800950e:	f104 0408 	add.w	r4, r4, #8
 8009512:	601e      	str	r6, [r3, #0]
 8009514:	dc2b      	bgt.n	800956e <_vfprintf_r+0xf5e>
 8009516:	605d      	str	r5, [r3, #4]
 8009518:	2a07      	cmp	r2, #7
 800951a:	440d      	add	r5, r1
 800951c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8009520:	dd08      	ble.n	8009534 <_vfprintf_r+0xf24>
 8009522:	aa22      	add	r2, sp, #136	; 0x88
 8009524:	4649      	mov	r1, r9
 8009526:	4650      	mov	r0, sl
 8009528:	f006 fed1 	bl	80102ce <__sprint_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	f040 8242 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009532:	ac25      	add	r4, sp, #148	; 0x94
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	9a05      	ldr	r2, [sp, #20]
 800953c:	6063      	str	r3, [r4, #4]
 800953e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009540:	4413      	add	r3, r2
 8009542:	9324      	str	r3, [sp, #144]	; 0x90
 8009544:	e482      	b.n	8008e4c <_vfprintf_r+0x83c>
 8009546:	aa22      	add	r2, sp, #136	; 0x88
 8009548:	4649      	mov	r1, r9
 800954a:	4650      	mov	r0, sl
 800954c:	f006 febf 	bl	80102ce <__sprint_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	f040 8230 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009556:	ac25      	add	r4, sp, #148	; 0x94
 8009558:	e7b8      	b.n	80094cc <_vfprintf_r+0xebc>
 800955a:	aa22      	add	r2, sp, #136	; 0x88
 800955c:	4649      	mov	r1, r9
 800955e:	4650      	mov	r0, sl
 8009560:	f006 feb5 	bl	80102ce <__sprint_r>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 8226 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800956a:	ac25      	add	r4, sp, #148	; 0x94
 800956c:	e7c3      	b.n	80094f6 <_vfprintf_r+0xee6>
 800956e:	3110      	adds	r1, #16
 8009570:	2a07      	cmp	r2, #7
 8009572:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8009576:	605f      	str	r7, [r3, #4]
 8009578:	dd08      	ble.n	800958c <_vfprintf_r+0xf7c>
 800957a:	aa22      	add	r2, sp, #136	; 0x88
 800957c:	4649      	mov	r1, r9
 800957e:	4650      	mov	r0, sl
 8009580:	f006 fea5 	bl	80102ce <__sprint_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	f040 8216 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800958a:	ac25      	add	r4, sp, #148	; 0x94
 800958c:	3d10      	subs	r5, #16
 800958e:	4623      	mov	r3, r4
 8009590:	e7b8      	b.n	8009504 <_vfprintf_r+0xef4>
 8009592:	bf00      	nop
 8009594:	08011c92 	.word	0x08011c92
 8009598:	08011d00 	.word	0x08011d00
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	42ab      	cmp	r3, r5
 80095a0:	bfa8      	it	ge
 80095a2:	462b      	movge	r3, r5
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	461f      	mov	r7, r3
 80095a8:	dd0b      	ble.n	80095c2 <_vfprintf_r+0xfb2>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	e9c4 3700 	strd	r3, r7, [r4]
 80095b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095b2:	3301      	adds	r3, #1
 80095b4:	443e      	add	r6, r7
 80095b6:	2b07      	cmp	r3, #7
 80095b8:	9624      	str	r6, [sp, #144]	; 0x90
 80095ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80095bc:	f300 808c 	bgt.w	80096d8 <_vfprintf_r+0x10c8>
 80095c0:	3408      	adds	r4, #8
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	bfac      	ite	ge
 80095c6:	1bee      	subge	r6, r5, r7
 80095c8:	462e      	movlt	r6, r5
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	dd1c      	ble.n	8009608 <_vfprintf_r+0xff8>
 80095ce:	4f9f      	ldr	r7, [pc, #636]	; (800984c <_vfprintf_r+0x123c>)
 80095d0:	f04f 0810 	mov.w	r8, #16
 80095d4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80095d8:	2e10      	cmp	r6, #16
 80095da:	f103 0301 	add.w	r3, r3, #1
 80095de:	f104 0108 	add.w	r1, r4, #8
 80095e2:	6027      	str	r7, [r4, #0]
 80095e4:	f300 8082 	bgt.w	80096ec <_vfprintf_r+0x10dc>
 80095e8:	6066      	str	r6, [r4, #4]
 80095ea:	2b07      	cmp	r3, #7
 80095ec:	4416      	add	r6, r2
 80095ee:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80095f2:	f340 808e 	ble.w	8009712 <_vfprintf_r+0x1102>
 80095f6:	aa22      	add	r2, sp, #136	; 0x88
 80095f8:	4649      	mov	r1, r9
 80095fa:	4650      	mov	r0, sl
 80095fc:	f006 fe67 	bl	80102ce <__sprint_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	f040 81d8 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009606:	ac25      	add	r4, sp, #148	; 0x94
 8009608:	9b03      	ldr	r3, [sp, #12]
 800960a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800960e:	441d      	add	r5, r3
 8009610:	d00d      	beq.n	800962e <_vfprintf_r+0x101e>
 8009612:	4e8e      	ldr	r6, [pc, #568]	; (800984c <_vfprintf_r+0x123c>)
 8009614:	2710      	movs	r7, #16
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d17c      	bne.n	8009716 <_vfprintf_r+0x1106>
 800961c:	9b08      	ldr	r3, [sp, #32]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d17c      	bne.n	800971c <_vfprintf_r+0x110c>
 8009622:	9b03      	ldr	r3, [sp, #12]
 8009624:	9a05      	ldr	r2, [sp, #20]
 8009626:	4413      	add	r3, r2
 8009628:	429d      	cmp	r5, r3
 800962a:	bf28      	it	cs
 800962c:	461d      	movcs	r5, r3
 800962e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009630:	9a05      	ldr	r2, [sp, #20]
 8009632:	4293      	cmp	r3, r2
 8009634:	db02      	blt.n	800963c <_vfprintf_r+0x102c>
 8009636:	f01b 0f01 	tst.w	fp, #1
 800963a:	d00e      	beq.n	800965a <_vfprintf_r+0x104a>
 800963c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009644:	6063      	str	r3, [r4, #4]
 8009646:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009648:	4413      	add	r3, r2
 800964a:	9324      	str	r3, [sp, #144]	; 0x90
 800964c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800964e:	3301      	adds	r3, #1
 8009650:	2b07      	cmp	r3, #7
 8009652:	9323      	str	r3, [sp, #140]	; 0x8c
 8009654:	f300 80e5 	bgt.w	8009822 <_vfprintf_r+0x1212>
 8009658:	3408      	adds	r4, #8
 800965a:	9905      	ldr	r1, [sp, #20]
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8009660:	440b      	add	r3, r1
 8009662:	1b8e      	subs	r6, r1, r6
 8009664:	1b5a      	subs	r2, r3, r5
 8009666:	4296      	cmp	r6, r2
 8009668:	bfa8      	it	ge
 800966a:	4616      	movge	r6, r2
 800966c:	2e00      	cmp	r6, #0
 800966e:	dd0b      	ble.n	8009688 <_vfprintf_r+0x1078>
 8009670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009672:	4433      	add	r3, r6
 8009674:	9324      	str	r3, [sp, #144]	; 0x90
 8009676:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009678:	3301      	adds	r3, #1
 800967a:	2b07      	cmp	r3, #7
 800967c:	e9c4 5600 	strd	r5, r6, [r4]
 8009680:	9323      	str	r3, [sp, #140]	; 0x8c
 8009682:	f300 80d8 	bgt.w	8009836 <_vfprintf_r+0x1226>
 8009686:	3408      	adds	r4, #8
 8009688:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800968a:	9b05      	ldr	r3, [sp, #20]
 800968c:	2e00      	cmp	r6, #0
 800968e:	eba3 0505 	sub.w	r5, r3, r5
 8009692:	bfa8      	it	ge
 8009694:	1bad      	subge	r5, r5, r6
 8009696:	2d00      	cmp	r5, #0
 8009698:	f77f abdf 	ble.w	8008e5a <_vfprintf_r+0x84a>
 800969c:	4e6b      	ldr	r6, [pc, #428]	; (800984c <_vfprintf_r+0x123c>)
 800969e:	2710      	movs	r7, #16
 80096a0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80096a4:	2d10      	cmp	r5, #16
 80096a6:	f103 0301 	add.w	r3, r3, #1
 80096aa:	f104 0108 	add.w	r1, r4, #8
 80096ae:	6026      	str	r6, [r4, #0]
 80096b0:	f77f aec6 	ble.w	8009440 <_vfprintf_r+0xe30>
 80096b4:	3210      	adds	r2, #16
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80096bc:	6067      	str	r7, [r4, #4]
 80096be:	dd08      	ble.n	80096d2 <_vfprintf_r+0x10c2>
 80096c0:	aa22      	add	r2, sp, #136	; 0x88
 80096c2:	4649      	mov	r1, r9
 80096c4:	4650      	mov	r0, sl
 80096c6:	f006 fe02 	bl	80102ce <__sprint_r>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f040 8173 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80096d0:	a925      	add	r1, sp, #148	; 0x94
 80096d2:	3d10      	subs	r5, #16
 80096d4:	460c      	mov	r4, r1
 80096d6:	e7e3      	b.n	80096a0 <_vfprintf_r+0x1090>
 80096d8:	aa22      	add	r2, sp, #136	; 0x88
 80096da:	4649      	mov	r1, r9
 80096dc:	4650      	mov	r0, sl
 80096de:	f006 fdf6 	bl	80102ce <__sprint_r>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f040 8167 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80096e8:	ac25      	add	r4, sp, #148	; 0x94
 80096ea:	e76a      	b.n	80095c2 <_vfprintf_r+0xfb2>
 80096ec:	3210      	adds	r2, #16
 80096ee:	2b07      	cmp	r3, #7
 80096f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80096f4:	f8c4 8004 	str.w	r8, [r4, #4]
 80096f8:	dd08      	ble.n	800970c <_vfprintf_r+0x10fc>
 80096fa:	aa22      	add	r2, sp, #136	; 0x88
 80096fc:	4649      	mov	r1, r9
 80096fe:	4650      	mov	r0, sl
 8009700:	f006 fde5 	bl	80102ce <__sprint_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	f040 8156 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800970a:	a925      	add	r1, sp, #148	; 0x94
 800970c:	3e10      	subs	r6, #16
 800970e:	460c      	mov	r4, r1
 8009710:	e760      	b.n	80095d4 <_vfprintf_r+0xfc4>
 8009712:	460c      	mov	r4, r1
 8009714:	e778      	b.n	8009608 <_vfprintf_r+0xff8>
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d052      	beq.n	80097c2 <_vfprintf_r+0x11b2>
 800971c:	9b08      	ldr	r3, [sp, #32]
 800971e:	3b01      	subs	r3, #1
 8009720:	9308      	str	r3, [sp, #32]
 8009722:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800972e:	4413      	add	r3, r2
 8009730:	9324      	str	r3, [sp, #144]	; 0x90
 8009732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009734:	3301      	adds	r3, #1
 8009736:	2b07      	cmp	r3, #7
 8009738:	9323      	str	r3, [sp, #140]	; 0x8c
 800973a:	dc49      	bgt.n	80097d0 <_vfprintf_r+0x11c0>
 800973c:	3408      	adds	r4, #8
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	9a05      	ldr	r2, [sp, #20]
 8009742:	eb03 0802 	add.w	r8, r3, r2
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	eba8 0805 	sub.w	r8, r8, r5
 800974e:	4598      	cmp	r8, r3
 8009750:	bfa8      	it	ge
 8009752:	4698      	movge	r8, r3
 8009754:	f1b8 0f00 	cmp.w	r8, #0
 8009758:	dd0a      	ble.n	8009770 <_vfprintf_r+0x1160>
 800975a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800975c:	4443      	add	r3, r8
 800975e:	9324      	str	r3, [sp, #144]	; 0x90
 8009760:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009762:	3301      	adds	r3, #1
 8009764:	2b07      	cmp	r3, #7
 8009766:	e9c4 5800 	strd	r5, r8, [r4]
 800976a:	9323      	str	r3, [sp, #140]	; 0x8c
 800976c:	dc3a      	bgt.n	80097e4 <_vfprintf_r+0x11d4>
 800976e:	3408      	adds	r4, #8
 8009770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f1b8 0f00 	cmp.w	r8, #0
 8009778:	bfac      	ite	ge
 800977a:	eba3 0808 	subge.w	r8, r3, r8
 800977e:	4698      	movlt	r8, r3
 8009780:	f1b8 0f00 	cmp.w	r8, #0
 8009784:	dd19      	ble.n	80097ba <_vfprintf_r+0x11aa>
 8009786:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800978a:	f1b8 0f10 	cmp.w	r8, #16
 800978e:	f102 0201 	add.w	r2, r2, #1
 8009792:	f104 0108 	add.w	r1, r4, #8
 8009796:	6026      	str	r6, [r4, #0]
 8009798:	dc2e      	bgt.n	80097f8 <_vfprintf_r+0x11e8>
 800979a:	4443      	add	r3, r8
 800979c:	2a07      	cmp	r2, #7
 800979e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80097a2:	f8c4 8004 	str.w	r8, [r4, #4]
 80097a6:	dd3a      	ble.n	800981e <_vfprintf_r+0x120e>
 80097a8:	aa22      	add	r2, sp, #136	; 0x88
 80097aa:	4649      	mov	r1, r9
 80097ac:	4650      	mov	r0, sl
 80097ae:	f006 fd8e 	bl	80102ce <__sprint_r>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f040 80ff 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80097b8:	ac25      	add	r4, sp, #148	; 0x94
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	441d      	add	r5, r3
 80097c0:	e729      	b.n	8009616 <_vfprintf_r+0x1006>
 80097c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c4:	3b01      	subs	r3, #1
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ca:	3b01      	subs	r3, #1
 80097cc:	9309      	str	r3, [sp, #36]	; 0x24
 80097ce:	e7a8      	b.n	8009722 <_vfprintf_r+0x1112>
 80097d0:	aa22      	add	r2, sp, #136	; 0x88
 80097d2:	4649      	mov	r1, r9
 80097d4:	4650      	mov	r0, sl
 80097d6:	f006 fd7a 	bl	80102ce <__sprint_r>
 80097da:	2800      	cmp	r0, #0
 80097dc:	f040 80eb 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80097e0:	ac25      	add	r4, sp, #148	; 0x94
 80097e2:	e7ac      	b.n	800973e <_vfprintf_r+0x112e>
 80097e4:	aa22      	add	r2, sp, #136	; 0x88
 80097e6:	4649      	mov	r1, r9
 80097e8:	4650      	mov	r0, sl
 80097ea:	f006 fd70 	bl	80102ce <__sprint_r>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f040 80e1 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 80097f4:	ac25      	add	r4, sp, #148	; 0x94
 80097f6:	e7bb      	b.n	8009770 <_vfprintf_r+0x1160>
 80097f8:	3310      	adds	r3, #16
 80097fa:	2a07      	cmp	r2, #7
 80097fc:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009800:	6067      	str	r7, [r4, #4]
 8009802:	dd08      	ble.n	8009816 <_vfprintf_r+0x1206>
 8009804:	aa22      	add	r2, sp, #136	; 0x88
 8009806:	4649      	mov	r1, r9
 8009808:	4650      	mov	r0, sl
 800980a:	f006 fd60 	bl	80102ce <__sprint_r>
 800980e:	2800      	cmp	r0, #0
 8009810:	f040 80d1 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009814:	a925      	add	r1, sp, #148	; 0x94
 8009816:	f1a8 0810 	sub.w	r8, r8, #16
 800981a:	460c      	mov	r4, r1
 800981c:	e7b3      	b.n	8009786 <_vfprintf_r+0x1176>
 800981e:	460c      	mov	r4, r1
 8009820:	e7cb      	b.n	80097ba <_vfprintf_r+0x11aa>
 8009822:	aa22      	add	r2, sp, #136	; 0x88
 8009824:	4649      	mov	r1, r9
 8009826:	4650      	mov	r0, sl
 8009828:	f006 fd51 	bl	80102ce <__sprint_r>
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 80c2 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009832:	ac25      	add	r4, sp, #148	; 0x94
 8009834:	e711      	b.n	800965a <_vfprintf_r+0x104a>
 8009836:	aa22      	add	r2, sp, #136	; 0x88
 8009838:	4649      	mov	r1, r9
 800983a:	4650      	mov	r0, sl
 800983c:	f006 fd47 	bl	80102ce <__sprint_r>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 80b8 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 8009846:	ac25      	add	r4, sp, #148	; 0x94
 8009848:	e71e      	b.n	8009688 <_vfprintf_r+0x1078>
 800984a:	bf00      	nop
 800984c:	08011d00 	.word	0x08011d00
 8009850:	9a05      	ldr	r2, [sp, #20]
 8009852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009854:	2a01      	cmp	r2, #1
 8009856:	9a03      	ldr	r2, [sp, #12]
 8009858:	6022      	str	r2, [r4, #0]
 800985a:	f106 0601 	add.w	r6, r6, #1
 800985e:	f103 0301 	add.w	r3, r3, #1
 8009862:	f04f 0201 	mov.w	r2, #1
 8009866:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800986a:	f104 0508 	add.w	r5, r4, #8
 800986e:	6062      	str	r2, [r4, #4]
 8009870:	dc02      	bgt.n	8009878 <_vfprintf_r+0x1268>
 8009872:	f01b 0f01 	tst.w	fp, #1
 8009876:	d078      	beq.n	800996a <_vfprintf_r+0x135a>
 8009878:	2b07      	cmp	r3, #7
 800987a:	dd08      	ble.n	800988e <_vfprintf_r+0x127e>
 800987c:	aa22      	add	r2, sp, #136	; 0x88
 800987e:	4649      	mov	r1, r9
 8009880:	4650      	mov	r0, sl
 8009882:	f006 fd24 	bl	80102ce <__sprint_r>
 8009886:	2800      	cmp	r0, #0
 8009888:	f040 8095 	bne.w	80099b6 <_vfprintf_r+0x13a6>
 800988c:	ad25      	add	r5, sp, #148	; 0x94
 800988e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009896:	606b      	str	r3, [r5, #4]
 8009898:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800989a:	4413      	add	r3, r2
 800989c:	9324      	str	r3, [sp, #144]	; 0x90
 800989e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098a0:	3301      	adds	r3, #1
 80098a2:	2b07      	cmp	r3, #7
 80098a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80098a6:	dc32      	bgt.n	800990e <_vfprintf_r+0x12fe>
 80098a8:	3508      	adds	r5, #8
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b0:	1e5c      	subs	r4, r3, #1
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	f7f7 f917 	bl	8000ae8 <__aeabi_dcmpeq>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d130      	bne.n	8009920 <_vfprintf_r+0x1310>
 80098be:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80098c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098c2:	9803      	ldr	r0, [sp, #12]
 80098c4:	9a05      	ldr	r2, [sp, #20]
 80098c6:	3101      	adds	r1, #1
 80098c8:	3b01      	subs	r3, #1
 80098ca:	3001      	adds	r0, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	2907      	cmp	r1, #7
 80098d0:	e9c5 0400 	strd	r0, r4, [r5]
 80098d4:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80098d8:	dd4a      	ble.n	8009970 <_vfprintf_r+0x1360>
 80098da:	aa22      	add	r2, sp, #136	; 0x88
 80098dc:	4649      	mov	r1, r9
 80098de:	4650      	mov	r0, sl
 80098e0:	f006 fcf5 	bl	80102ce <__sprint_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d166      	bne.n	80099b6 <_vfprintf_r+0x13a6>
 80098e8:	ad25      	add	r5, sp, #148	; 0x94
 80098ea:	ab1e      	add	r3, sp, #120	; 0x78
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098f2:	606b      	str	r3, [r5, #4]
 80098f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098f6:	4413      	add	r3, r2
 80098f8:	9324      	str	r3, [sp, #144]	; 0x90
 80098fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098fc:	3301      	adds	r3, #1
 80098fe:	2b07      	cmp	r3, #7
 8009900:	9323      	str	r3, [sp, #140]	; 0x8c
 8009902:	f73f ada4 	bgt.w	800944e <_vfprintf_r+0xe3e>
 8009906:	f105 0408 	add.w	r4, r5, #8
 800990a:	f7ff baa6 	b.w	8008e5a <_vfprintf_r+0x84a>
 800990e:	aa22      	add	r2, sp, #136	; 0x88
 8009910:	4649      	mov	r1, r9
 8009912:	4650      	mov	r0, sl
 8009914:	f006 fcdb 	bl	80102ce <__sprint_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	d14c      	bne.n	80099b6 <_vfprintf_r+0x13a6>
 800991c:	ad25      	add	r5, sp, #148	; 0x94
 800991e:	e7c4      	b.n	80098aa <_vfprintf_r+0x129a>
 8009920:	2c00      	cmp	r4, #0
 8009922:	dde2      	ble.n	80098ea <_vfprintf_r+0x12da>
 8009924:	4e53      	ldr	r6, [pc, #332]	; (8009a74 <_vfprintf_r+0x1464>)
 8009926:	2710      	movs	r7, #16
 8009928:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800992c:	2c10      	cmp	r4, #16
 800992e:	f103 0301 	add.w	r3, r3, #1
 8009932:	f105 0108 	add.w	r1, r5, #8
 8009936:	602e      	str	r6, [r5, #0]
 8009938:	dc07      	bgt.n	800994a <_vfprintf_r+0x133a>
 800993a:	606c      	str	r4, [r5, #4]
 800993c:	2b07      	cmp	r3, #7
 800993e:	4414      	add	r4, r2
 8009940:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8009944:	dcc9      	bgt.n	80098da <_vfprintf_r+0x12ca>
 8009946:	460d      	mov	r5, r1
 8009948:	e7cf      	b.n	80098ea <_vfprintf_r+0x12da>
 800994a:	3210      	adds	r2, #16
 800994c:	2b07      	cmp	r3, #7
 800994e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009952:	606f      	str	r7, [r5, #4]
 8009954:	dd06      	ble.n	8009964 <_vfprintf_r+0x1354>
 8009956:	aa22      	add	r2, sp, #136	; 0x88
 8009958:	4649      	mov	r1, r9
 800995a:	4650      	mov	r0, sl
 800995c:	f006 fcb7 	bl	80102ce <__sprint_r>
 8009960:	bb48      	cbnz	r0, 80099b6 <_vfprintf_r+0x13a6>
 8009962:	a925      	add	r1, sp, #148	; 0x94
 8009964:	3c10      	subs	r4, #16
 8009966:	460d      	mov	r5, r1
 8009968:	e7de      	b.n	8009928 <_vfprintf_r+0x1318>
 800996a:	2b07      	cmp	r3, #7
 800996c:	ddbd      	ble.n	80098ea <_vfprintf_r+0x12da>
 800996e:	e7b4      	b.n	80098da <_vfprintf_r+0x12ca>
 8009970:	3508      	adds	r5, #8
 8009972:	e7ba      	b.n	80098ea <_vfprintf_r+0x12da>
 8009974:	460c      	mov	r4, r1
 8009976:	f7ff ba70 	b.w	8008e5a <_vfprintf_r+0x84a>
 800997a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800997e:	1a9d      	subs	r5, r3, r2
 8009980:	2d00      	cmp	r5, #0
 8009982:	f77f aa6e 	ble.w	8008e62 <_vfprintf_r+0x852>
 8009986:	4e3c      	ldr	r6, [pc, #240]	; (8009a78 <_vfprintf_r+0x1468>)
 8009988:	2710      	movs	r7, #16
 800998a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800998e:	2d10      	cmp	r5, #16
 8009990:	f103 0301 	add.w	r3, r3, #1
 8009994:	6026      	str	r6, [r4, #0]
 8009996:	dc18      	bgt.n	80099ca <_vfprintf_r+0x13ba>
 8009998:	6065      	str	r5, [r4, #4]
 800999a:	2b07      	cmp	r3, #7
 800999c:	4415      	add	r5, r2
 800999e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80099a2:	f77f aa5e 	ble.w	8008e62 <_vfprintf_r+0x852>
 80099a6:	aa22      	add	r2, sp, #136	; 0x88
 80099a8:	4649      	mov	r1, r9
 80099aa:	4650      	mov	r0, sl
 80099ac:	f006 fc8f 	bl	80102ce <__sprint_r>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	f43f aa56 	beq.w	8008e62 <_vfprintf_r+0x852>
 80099b6:	9b04      	ldr	r3, [sp, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f43f a872 	beq.w	8008aa2 <_vfprintf_r+0x492>
 80099be:	4619      	mov	r1, r3
 80099c0:	4650      	mov	r0, sl
 80099c2:	f7fc fce1 	bl	8006388 <_free_r>
 80099c6:	f7ff b86c 	b.w	8008aa2 <_vfprintf_r+0x492>
 80099ca:	3210      	adds	r2, #16
 80099cc:	2b07      	cmp	r3, #7
 80099ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80099d2:	6067      	str	r7, [r4, #4]
 80099d4:	dc02      	bgt.n	80099dc <_vfprintf_r+0x13cc>
 80099d6:	3408      	adds	r4, #8
 80099d8:	3d10      	subs	r5, #16
 80099da:	e7d6      	b.n	800998a <_vfprintf_r+0x137a>
 80099dc:	aa22      	add	r2, sp, #136	; 0x88
 80099de:	4649      	mov	r1, r9
 80099e0:	4650      	mov	r0, sl
 80099e2:	f006 fc74 	bl	80102ce <__sprint_r>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d1e5      	bne.n	80099b6 <_vfprintf_r+0x13a6>
 80099ea:	ac25      	add	r4, sp, #148	; 0x94
 80099ec:	e7f4      	b.n	80099d8 <_vfprintf_r+0x13c8>
 80099ee:	9904      	ldr	r1, [sp, #16]
 80099f0:	4650      	mov	r0, sl
 80099f2:	f7fc fcc9 	bl	8006388 <_free_r>
 80099f6:	f7ff ba4c 	b.w	8008e92 <_vfprintf_r+0x882>
 80099fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099fc:	b91b      	cbnz	r3, 8009a06 <_vfprintf_r+0x13f6>
 80099fe:	2300      	movs	r3, #0
 8009a00:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a02:	f7ff b84e 	b.w	8008aa2 <_vfprintf_r+0x492>
 8009a06:	aa22      	add	r2, sp, #136	; 0x88
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	f006 fc5f 	bl	80102ce <__sprint_r>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d0f4      	beq.n	80099fe <_vfprintf_r+0x13ee>
 8009a14:	f7ff b845 	b.w	8008aa2 <_vfprintf_r+0x492>
 8009a18:	ea56 0207 	orrs.w	r2, r6, r7
 8009a1c:	f8cd b010 	str.w	fp, [sp, #16]
 8009a20:	f43f ab5c 	beq.w	80090dc <_vfprintf_r+0xacc>
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	f43f abf4 	beq.w	8009212 <_vfprintf_r+0xc02>
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	ab4e      	add	r3, sp, #312	; 0x138
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	f43f ac46 	beq.w	80092c0 <_vfprintf_r+0xcb0>
 8009a34:	9903      	ldr	r1, [sp, #12]
 8009a36:	f006 0307 	and.w	r3, r6, #7
 8009a3a:	460a      	mov	r2, r1
 8009a3c:	3330      	adds	r3, #48	; 0x30
 8009a3e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8009a42:	9203      	str	r2, [sp, #12]
 8009a44:	08f2      	lsrs	r2, r6, #3
 8009a46:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8009a4a:	08f8      	lsrs	r0, r7, #3
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	4607      	mov	r7, r0
 8009a50:	ea56 0207 	orrs.w	r2, r6, r7
 8009a54:	d1ee      	bne.n	8009a34 <_vfprintf_r+0x1424>
 8009a56:	9a04      	ldr	r2, [sp, #16]
 8009a58:	07d0      	lsls	r0, r2, #31
 8009a5a:	f57f ac20 	bpl.w	800929e <_vfprintf_r+0xc8e>
 8009a5e:	2b30      	cmp	r3, #48	; 0x30
 8009a60:	f43f ac1d 	beq.w	800929e <_vfprintf_r+0xc8e>
 8009a64:	9a03      	ldr	r2, [sp, #12]
 8009a66:	2330      	movs	r3, #48	; 0x30
 8009a68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a6c:	1e8b      	subs	r3, r1, #2
 8009a6e:	9303      	str	r3, [sp, #12]
 8009a70:	e415      	b.n	800929e <_vfprintf_r+0xc8e>
 8009a72:	bf00      	nop
 8009a74:	08011d00 	.word	0x08011d00
 8009a78:	08011cf0 	.word	0x08011cf0

08009a7c <__sbprintf>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	460c      	mov	r4, r1
 8009a80:	8989      	ldrh	r1, [r1, #12]
 8009a82:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8009a86:	f021 0102 	bic.w	r1, r1, #2
 8009a8a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009a8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009a90:	911b      	str	r1, [sp, #108]	; 0x6c
 8009a92:	89e1      	ldrh	r1, [r4, #14]
 8009a94:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009a98:	69e1      	ldr	r1, [r4, #28]
 8009a9a:	9109      	str	r1, [sp, #36]	; 0x24
 8009a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009a9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009aa0:	a91c      	add	r1, sp, #112	; 0x70
 8009aa2:	9102      	str	r1, [sp, #8]
 8009aa4:	9106      	str	r1, [sp, #24]
 8009aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009aaa:	4606      	mov	r6, r0
 8009aac:	9104      	str	r1, [sp, #16]
 8009aae:	9107      	str	r1, [sp, #28]
 8009ab0:	a818      	add	r0, sp, #96	; 0x60
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	e9cd 3200 	strd	r3, r2, [sp]
 8009ab8:	9108      	str	r1, [sp, #32]
 8009aba:	f7fc fe47 	bl	800674c <__retarget_lock_init_recursive>
 8009abe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ac2:	a902      	add	r1, sp, #8
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f7fe fda3 	bl	8008610 <_vfprintf_r>
 8009aca:	1e05      	subs	r5, r0, #0
 8009acc:	db07      	blt.n	8009ade <__sbprintf+0x62>
 8009ace:	a902      	add	r1, sp, #8
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f002 f94f 	bl	800bd74 <_fflush_r>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	bf18      	it	ne
 8009ada:	f04f 35ff 	movne.w	r5, #4294967295
 8009ade:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8009ae2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009ae4:	065b      	lsls	r3, r3, #25
 8009ae6:	bf42      	ittt	mi
 8009ae8:	89a3      	ldrhmi	r3, [r4, #12]
 8009aea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009aee:	81a3      	strhmi	r3, [r4, #12]
 8009af0:	f7fc fe2d 	bl	800674e <__retarget_lock_close_recursive>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009afa:	bd70      	pop	{r4, r5, r6, pc}

08009afc <__svfscanf_r>:
 8009afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	ed2d 8b02 	vpush	{d8}
 8009b04:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8009b08:	461e      	mov	r6, r3
 8009b0a:	af02      	add	r7, sp, #8
 8009b0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009b0e:	617a      	str	r2, [r7, #20]
 8009b10:	07da      	lsls	r2, r3, #31
 8009b12:	ee08 0a10 	vmov	s16, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	d405      	bmi.n	8009b26 <__svfscanf_r+0x2a>
 8009b1a:	898b      	ldrh	r3, [r1, #12]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <__svfscanf_r+0x2a>
 8009b20:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009b22:	f7fc fe16 	bl	8006752 <__retarget_lock_acquire_recursive>
 8009b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2a:	049d      	lsls	r5, r3, #18
 8009b2c:	d406      	bmi.n	8009b3c <__svfscanf_r+0x40>
 8009b2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b3a:	6663      	str	r3, [r4, #100]	; 0x64
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	637b      	str	r3, [r7, #52]	; 0x34
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009b50:	617a      	str	r2, [r7, #20]
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80d6 	beq.w	8009d06 <__svfscanf_r+0x20a>
 8009b5a:	4a91      	ldr	r2, [pc, #580]	; (8009da0 <__svfscanf_r+0x2a4>)
 8009b5c:	f813 8002 	ldrb.w	r8, [r3, r2]
 8009b60:	f018 0808 	ands.w	r8, r8, #8
 8009b64:	d019      	beq.n	8009b9a <__svfscanf_r+0x9e>
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	dd0e      	ble.n	8009b8a <__svfscanf_r+0x8e>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	498c      	ldr	r1, [pc, #560]	; (8009da0 <__svfscanf_r+0x2a4>)
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	5c8a      	ldrb	r2, [r1, r2]
 8009b74:	0710      	lsls	r0, r2, #28
 8009b76:	d5e8      	bpl.n	8009b4a <__svfscanf_r+0x4e>
 8009b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	3301      	adds	r3, #1
 8009b82:	3a01      	subs	r2, #1
 8009b84:	6062      	str	r2, [r4, #4]
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	e7ed      	b.n	8009b66 <__svfscanf_r+0x6a>
 8009b8a:	ee18 0a10 	vmov	r0, s16
 8009b8e:	4621      	mov	r1, r4
 8009b90:	f003 fb9e 	bl	800d2d0 <__srefill_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d0e9      	beq.n	8009b6c <__svfscanf_r+0x70>
 8009b98:	e7d7      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009b9a:	2b25      	cmp	r3, #37	; 0x25
 8009b9c:	d165      	bne.n	8009c6a <__svfscanf_r+0x16e>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8009ba4:	46c1      	mov	r9, r8
 8009ba6:	220a      	movs	r2, #10
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	781d      	ldrb	r5, [r3, #0]
 8009bac:	3101      	adds	r1, #1
 8009bae:	6179      	str	r1, [r7, #20]
 8009bb0:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8009bb4:	2955      	cmp	r1, #85	; 0x55
 8009bb6:	f200 80a6 	bhi.w	8009d06 <__svfscanf_r+0x20a>
 8009bba:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009bbe:	0056      	.short	0x0056
 8009bc0:	00a400a4 	.word	0x00a400a4
 8009bc4:	00a400a4 	.word	0x00a400a4
 8009bc8:	00a4007d 	.word	0x00a4007d
 8009bcc:	00a400a4 	.word	0x00a400a4
 8009bd0:	00a400a4 	.word	0x00a400a4
 8009bd4:	00d100d1 	.word	0x00d100d1
 8009bd8:	00d100d1 	.word	0x00d100d1
 8009bdc:	00d100d1 	.word	0x00d100d1
 8009be0:	00d100d1 	.word	0x00d100d1
 8009be4:	00d100d1 	.word	0x00d100d1
 8009be8:	00a400a4 	.word	0x00a400a4
 8009bec:	00a400a4 	.word	0x00a400a4
 8009bf0:	00a400a4 	.word	0x00a400a4
 8009bf4:	00f700a4 	.word	0x00f700a4
 8009bf8:	011b00a4 	.word	0x011b00a4
 8009bfc:	00f700db 	.word	0x00f700db
 8009c00:	00f700f7 	.word	0x00f700f7
 8009c04:	00a400a4 	.word	0x00a400a4
 8009c08:	00a400a4 	.word	0x00a400a4
 8009c0c:	00a400a1 	.word	0x00a400a1
 8009c10:	00df00a4 	.word	0x00df00a4
 8009c14:	00a400a4 	.word	0x00a400a4
 8009c18:	010d00a4 	.word	0x010d00a4
 8009c1c:	00a400a4 	.word	0x00a400a4
 8009c20:	00a400a4 	.word	0x00a400a4
 8009c24:	00a400eb 	.word	0x00a400eb
 8009c28:	011100a4 	.word	0x011100a4
 8009c2c:	00a400a4 	.word	0x00a400a4
 8009c30:	00a400a4 	.word	0x00a400a4
 8009c34:	00f700a4 	.word	0x00f700a4
 8009c38:	011d00a4 	.word	0x011d00a4
 8009c3c:	00f700dd 	.word	0x00f700dd
 8009c40:	00f700f7 	.word	0x00f700f7
 8009c44:	01470094 	.word	0x01470094
 8009c48:	00a400a1 	.word	0x00a400a1
 8009c4c:	00c40086 	.word	0x00c40086
 8009c50:	00e10124 	.word	0x00e10124
 8009c54:	00a40121 	.word	0x00a40121
 8009c58:	010f00a4 	.word	0x010f00a4
 8009c5c:	00e700c0 	.word	0x00e700c0
 8009c60:	00a400a4 	.word	0x00a400a4
 8009c64:	00a400eb 	.word	0x00a400eb
 8009c68:	00c0      	.short	0x00c0
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dd0f      	ble.n	8009c90 <__svfscanf_r+0x194>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	7819      	ldrb	r1, [r3, #0]
 8009c76:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d143      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009c7e:	6862      	ldr	r2, [r4, #4]
 8009c80:	3301      	adds	r3, #1
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c86:	3a01      	subs	r2, #1
 8009c88:	6062      	str	r2, [r4, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c8e:	e75c      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009c90:	ee18 0a10 	vmov	r0, s16
 8009c94:	4621      	mov	r1, r4
 8009c96:	f003 fb1b 	bl	800d2d0 <__srefill_r>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d0e8      	beq.n	8009c70 <__svfscanf_r+0x174>
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8110 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	bf18      	it	ne
 8009cb0:	f04f 33ff 	movne.w	r3, #4294967295
 8009cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cb6:	e026      	b.n	8009d06 <__svfscanf_r+0x20a>
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	ea53 0309 	orrs.w	r3, r3, r9
 8009cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8009cc0:	d121      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009cc2:	f04f 0910 	mov.w	r9, #16
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	e76e      	b.n	8009ba8 <__svfscanf_r+0xac>
 8009cca:	f019 0f0f 	tst.w	r9, #15
 8009cce:	d11a      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009cd0:	7859      	ldrb	r1, [r3, #1]
 8009cd2:	296c      	cmp	r1, #108	; 0x6c
 8009cd4:	d104      	bne.n	8009ce0 <__svfscanf_r+0x1e4>
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	617b      	str	r3, [r7, #20]
 8009cda:	f049 0902 	orr.w	r9, r9, #2
 8009cde:	e7f2      	b.n	8009cc6 <__svfscanf_r+0x1ca>
 8009ce0:	f049 0901 	orr.w	r9, r9, #1
 8009ce4:	e7ef      	b.n	8009cc6 <__svfscanf_r+0x1ca>
 8009ce6:	f019 0f0f 	tst.w	r9, #15
 8009cea:	d10c      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009cec:	7859      	ldrb	r1, [r3, #1]
 8009cee:	2968      	cmp	r1, #104	; 0x68
 8009cf0:	bf03      	ittte	eq
 8009cf2:	3302      	addeq	r3, #2
 8009cf4:	617b      	streq	r3, [r7, #20]
 8009cf6:	f049 0908 	orreq.w	r9, r9, #8
 8009cfa:	f049 0904 	orrne.w	r9, r9, #4
 8009cfe:	e7e2      	b.n	8009cc6 <__svfscanf_r+0x1ca>
 8009d00:	f019 0f0f 	tst.w	r9, #15
 8009d04:	d0e9      	beq.n	8009cda <__svfscanf_r+0x1de>
 8009d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d08:	07da      	lsls	r2, r3, #31
 8009d0a:	d405      	bmi.n	8009d18 <__svfscanf_r+0x21c>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	059b      	lsls	r3, r3, #22
 8009d10:	d402      	bmi.n	8009d18 <__svfscanf_r+0x21c>
 8009d12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d14:	f7fc fd1f 	bl	8006756 <__retarget_lock_release_recursive>
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	b143      	cbz	r3, 8009d2e <__svfscanf_r+0x232>
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f001 8083 	beq.w	800ae2a <__svfscanf_r+0x132e>
 8009d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f041 8081 	bne.w	800ae30 <__svfscanf_r+0x1334>
 8009d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d30:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8009d34:	46bd      	mov	sp, r7
 8009d36:	ecbd 8b02 	vpop	{d8}
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	f019 0f0f 	tst.w	r9, #15
 8009d42:	d0c0      	beq.n	8009cc6 <__svfscanf_r+0x1ca>
 8009d44:	e7df      	b.n	8009d06 <__svfscanf_r+0x20a>
 8009d46:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8009d4a:	d1dc      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d4e:	b921      	cbnz	r1, 8009d5a <__svfscanf_r+0x25e>
 8009d50:	b082      	sub	sp, #8
 8009d52:	a902      	add	r1, sp, #8
 8009d54:	e9c1 3300 	strd	r3, r3, [r1]
 8009d58:	6379      	str	r1, [r7, #52]	; 0x34
 8009d5a:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009d5e:	e7b2      	b.n	8009cc6 <__svfscanf_r+0x1ca>
 8009d60:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8009d64:	d1cf      	bne.n	8009d06 <__svfscanf_r+0x20a>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	fb02 5503 	mla	r5, r2, r3, r5
 8009d6c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009d70:	633b      	str	r3, [r7, #48]	; 0x30
 8009d72:	e7a8      	b.n	8009cc6 <__svfscanf_r+0x1ca>
 8009d74:	f049 0901 	orr.w	r9, r9, #1
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <__svfscanf_r+0x2a8>)
 8009d7a:	e008      	b.n	8009d8e <__svfscanf_r+0x292>
 8009d7c:	f049 0901 	orr.w	r9, r9, #1
 8009d80:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <__svfscanf_r+0x2ac>)
 8009d82:	61bb      	str	r3, [r7, #24]
 8009d84:	2308      	movs	r3, #8
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	2503      	movs	r5, #3
 8009d8a:	e010      	b.n	8009dae <__svfscanf_r+0x2b2>
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <__svfscanf_r+0x2ac>)
 8009d8e:	61bb      	str	r3, [r7, #24]
 8009d90:	230a      	movs	r3, #10
 8009d92:	e7f8      	b.n	8009d86 <__svfscanf_r+0x28a>
 8009d94:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8009d98:	4b03      	ldr	r3, [pc, #12]	; (8009da8 <__svfscanf_r+0x2ac>)
 8009d9a:	61bb      	str	r3, [r7, #24]
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	e7f2      	b.n	8009d86 <__svfscanf_r+0x28a>
 8009da0:	08011d92 	.word	0x08011d92
 8009da4:	0800e3e1 	.word	0x0800e3e1
 8009da8:	0800e60d 	.word	0x0800e60d
 8009dac:	2504      	movs	r5, #4
 8009dae:	6863      	ldr	r3, [r4, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dd4f      	ble.n	8009e54 <__svfscanf_r+0x358>
 8009db4:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009db8:	d105      	bne.n	8009dc6 <__svfscanf_r+0x2ca>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	49b3      	ldr	r1, [pc, #716]	; (800a08c <__svfscanf_r+0x590>)
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	5c52      	ldrb	r2, [r2, r1]
 8009dc2:	0711      	lsls	r1, r2, #28
 8009dc4:	d44e      	bmi.n	8009e64 <__svfscanf_r+0x368>
 8009dc6:	3d01      	subs	r5, #1
 8009dc8:	2d03      	cmp	r5, #3
 8009dca:	d85e      	bhi.n	8009e8a <__svfscanf_r+0x38e>
 8009dcc:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009dd0:	037401b9 	.word	0x037401b9
 8009dd4:	0611051e 	.word	0x0611051e
 8009dd8:	f049 0901 	orr.w	r9, r9, #1
 8009ddc:	2502      	movs	r5, #2
 8009dde:	e7e6      	b.n	8009dae <__svfscanf_r+0x2b2>
 8009de0:	6979      	ldr	r1, [r7, #20]
 8009de2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009de6:	f003 fb2d 	bl	800d444 <__sccl>
 8009dea:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009dee:	6178      	str	r0, [r7, #20]
 8009df0:	2501      	movs	r5, #1
 8009df2:	e7dc      	b.n	8009dae <__svfscanf_r+0x2b2>
 8009df4:	f049 0901 	orr.w	r9, r9, #1
 8009df8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	e7d6      	b.n	8009dae <__svfscanf_r+0x2b2>
 8009e00:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8009e04:	e7c8      	b.n	8009d98 <__svfscanf_r+0x29c>
 8009e06:	f019 0f10 	tst.w	r9, #16
 8009e0a:	f47f ae9e 	bne.w	8009b4a <__svfscanf_r+0x4e>
 8009e0e:	f019 0f08 	tst.w	r9, #8
 8009e12:	f856 1b04 	ldr.w	r1, [r6], #4
 8009e16:	d002      	beq.n	8009e1e <__svfscanf_r+0x322>
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	700b      	strb	r3, [r1, #0]
 8009e1c:	e695      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009e1e:	f019 0f04 	tst.w	r9, #4
 8009e22:	d002      	beq.n	8009e2a <__svfscanf_r+0x32e>
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	800b      	strh	r3, [r1, #0]
 8009e28:	e68f      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009e2a:	f019 0f01 	tst.w	r9, #1
 8009e2e:	d002      	beq.n	8009e36 <__svfscanf_r+0x33a>
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	600b      	str	r3, [r1, #0]
 8009e34:	e689      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009e36:	f019 0f02 	tst.w	r9, #2
 8009e3a:	d0f9      	beq.n	8009e30 <__svfscanf_r+0x334>
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8009e42:	461a      	mov	r2, r3
 8009e44:	464b      	mov	r3, r9
 8009e46:	e9c1 2300 	strd	r2, r3, [r1]
 8009e4a:	e67e      	b.n	8009b4a <__svfscanf_r+0x4e>
 8009e4c:	4b90      	ldr	r3, [pc, #576]	; (800a090 <__svfscanf_r+0x594>)
 8009e4e:	61bb      	str	r3, [r7, #24]
 8009e50:	2300      	movs	r3, #0
 8009e52:	e798      	b.n	8009d86 <__svfscanf_r+0x28a>
 8009e54:	ee18 0a10 	vmov	r0, s16
 8009e58:	4621      	mov	r1, r4
 8009e5a:	f003 fa39 	bl	800d2d0 <__srefill_r>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d0a8      	beq.n	8009db4 <__svfscanf_r+0x2b8>
 8009e62:	e71c      	b.n	8009c9e <__svfscanf_r+0x1a2>
 8009e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e66:	3201      	adds	r2, #1
 8009e68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	3a01      	subs	r2, #1
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	6062      	str	r2, [r4, #4]
 8009e72:	dd02      	ble.n	8009e7a <__svfscanf_r+0x37e>
 8009e74:	3301      	adds	r3, #1
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	e79f      	b.n	8009dba <__svfscanf_r+0x2be>
 8009e7a:	ee18 0a10 	vmov	r0, s16
 8009e7e:	4621      	mov	r1, r4
 8009e80:	f003 fa26 	bl	800d2d0 <__srefill_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d098      	beq.n	8009dba <__svfscanf_r+0x2be>
 8009e88:	e709      	b.n	8009c9e <__svfscanf_r+0x1a2>
 8009e8a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8009e8c:	2d01      	cmp	r5, #1
 8009e8e:	bf38      	it	cc
 8009e90:	2501      	movcc	r5, #1
 8009e92:	f019 0801 	ands.w	r8, r9, #1
 8009e96:	f009 0b10 	and.w	fp, r9, #16
 8009e9a:	f000 80d7 	beq.w	800a04c <__svfscanf_r+0x550>
 8009e9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ea2:	f040 809a 	bne.w	8009fda <__svfscanf_r+0x4de>
 8009ea6:	4633      	mov	r3, r6
 8009ea8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009eac:	f853 6b04 	ldr.w	r6, [r3], #4
 8009eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8009eb2:	f000 8099 	beq.w	8009fe8 <__svfscanf_r+0x4ec>
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	f43f af25 	beq.w	8009d06 <__svfscanf_r+0x20a>
 8009ebc:	2080      	movs	r0, #128	; 0x80
 8009ebe:	f7fc fc4b 	bl	8006758 <malloc>
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	b910      	cbnz	r0, 8009ecc <__svfscanf_r+0x3d0>
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eca:	e6f3      	b.n	8009cb4 <__svfscanf_r+0x1b8>
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	6030      	str	r0, [r6, #0]
 8009ed0:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8009ed4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8009ed8:	45ca      	cmp	sl, r9
 8009eda:	d311      	bcc.n	8009f00 <__svfscanf_r+0x404>
 8009edc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8009ee0:	4599      	cmp	r9, r3
 8009ee2:	d8f0      	bhi.n	8009ec6 <__svfscanf_r+0x3ca>
 8009ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee6:	f109 0908 	add.w	r9, r9, #8
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8009ef0:	f003 f836 	bl	800cf60 <realloc>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0e6      	beq.n	8009ec6 <__svfscanf_r+0x3ca>
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	6018      	str	r0, [r3, #0]
 8009efc:	f8a3 9004 	strh.w	r9, [r3, #4]
 8009f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f10a 0201 	add.w	r2, sl, #1
 8009f0a:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8009f0e:	80ca      	strh	r2, [r1, #6]
 8009f10:	46b2      	mov	sl, r6
 8009f12:	f04f 0920 	mov.w	r9, #32
 8009f16:	4646      	mov	r6, r8
 8009f18:	2200      	movs	r2, #0
 8009f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8009f1c:	f002 fae8 	bl	800c4f0 <__locale_mb_cur_max>
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	4290      	cmp	r0, r2
 8009f24:	f43f aebb 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 8009f28:	6821      	ldr	r1, [r4, #0]
 8009f2a:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8009f2e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009f32:	f80c 0002 	strb.w	r0, [ip, r2]
 8009f36:	1c53      	adds	r3, r2, #1
 8009f38:	6862      	ldr	r2, [r4, #4]
 8009f3a:	3a01      	subs	r2, #1
 8009f3c:	e9c4 1200 	strd	r1, r2, [r4]
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	2a03      	cmp	r2, #3
 8009f44:	d102      	bne.n	8009f4c <__svfscanf_r+0x450>
 8009f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f48:	2a04      	cmp	r2, #4
 8009f4a:	d007      	beq.n	8009f5c <__svfscanf_r+0x460>
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	2100      	movs	r1, #0
 8009f50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
 8009f56:	f7fc fe51 	bl	8006bfc <memset>
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f62:	9200      	str	r2, [sp, #0]
 8009f64:	ee18 0a10 	vmov	r0, s16
 8009f68:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	f002 fb35 	bl	800c5dc <_mbrtowc_r>
 8009f72:	1c42      	adds	r2, r0, #1
 8009f74:	6238      	str	r0, [r7, #32]
 8009f76:	f43f ae92 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d137      	bne.n	8009ff0 <__svfscanf_r+0x4f4>
 8009f80:	f1bb 0f00 	cmp.w	fp, #0
 8009f84:	d101      	bne.n	8009f8a <__svfscanf_r+0x48e>
 8009f86:	f8c6 b000 	str.w	fp, [r6]
 8009f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8c:	441a      	add	r2, r3
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d102      	bne.n	8009f9c <__svfscanf_r+0x4a0>
 8009f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d000      	beq.n	8009f9e <__svfscanf_r+0x4a2>
 8009f9c:	3d01      	subs	r5, #1
 8009f9e:	f1bb 0f00 	cmp.w	fp, #0
 8009fa2:	d118      	bne.n	8009fd6 <__svfscanf_r+0x4da>
 8009fa4:	f1ba 0f00 	cmp.w	sl, #0
 8009fa8:	d014      	beq.n	8009fd4 <__svfscanf_r+0x4d8>
 8009faa:	eba6 0308 	sub.w	r3, r6, r8
 8009fae:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8009fb2:	d80f      	bhi.n	8009fd4 <__svfscanf_r+0x4d8>
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
 8009fbc:	f002 ffd0 	bl	800cf60 <realloc>
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f43f af7f 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	f8ca 0000 	str.w	r0, [sl]
 8009fce:	18c6      	adds	r6, r0, r3
 8009fd0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009fd4:	3604      	adds	r6, #4
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e00d      	b.n	8009ff6 <__svfscanf_r+0x4fa>
 8009fda:	f04f 0900 	mov.w	r9, #0
 8009fde:	633e      	str	r6, [r7, #48]	; 0x30
 8009fe0:	46c8      	mov	r8, r9
 8009fe2:	46ca      	mov	sl, r9
 8009fe4:	464e      	mov	r6, r9
 8009fe6:	e797      	b.n	8009f18 <__svfscanf_r+0x41c>
 8009fe8:	46d9      	mov	r9, fp
 8009fea:	46d8      	mov	r8, fp
 8009fec:	46da      	mov	sl, fp
 8009fee:	e793      	b.n	8009f18 <__svfscanf_r+0x41c>
 8009ff0:	6a3a      	ldr	r2, [r7, #32]
 8009ff2:	3202      	adds	r2, #2
 8009ff4:	d1c9      	bne.n	8009f8a <__svfscanf_r+0x48e>
 8009ff6:	6862      	ldr	r2, [r4, #4]
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	dc15      	bgt.n	800a028 <__svfscanf_r+0x52c>
 8009ffc:	ee18 0a10 	vmov	r0, s16
 800a000:	4621      	mov	r1, r4
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
 800a004:	f003 f964 	bl	800d2d0 <__srefill_r>
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	b168      	cbz	r0, 800a028 <__svfscanf_r+0x52c>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f ae46 	bne.w	8009c9e <__svfscanf_r+0x1a2>
 800a012:	f1ba 0f00 	cmp.w	sl, #0
 800a016:	d10b      	bne.n	800a030 <__svfscanf_r+0x534>
 800a018:	f1bb 0f00 	cmp.w	fp, #0
 800a01c:	d102      	bne.n	800a024 <__svfscanf_r+0x528>
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	3301      	adds	r3, #1
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
 800a024:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a026:	e590      	b.n	8009b4a <__svfscanf_r+0x4e>
 800a028:	2d00      	cmp	r5, #0
 800a02a:	d0f2      	beq.n	800a012 <__svfscanf_r+0x516>
 800a02c:	461a      	mov	r2, r3
 800a02e:	e774      	b.n	8009f1a <__svfscanf_r+0x41e>
 800a030:	eba6 0108 	sub.w	r1, r6, r8
 800a034:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800a038:	d9ee      	bls.n	800a018 <__svfscanf_r+0x51c>
 800a03a:	f8da 0000 	ldr.w	r0, [sl]
 800a03e:	f002 ff8f 	bl	800cf60 <realloc>
 800a042:	2800      	cmp	r0, #0
 800a044:	d0e8      	beq.n	800a018 <__svfscanf_r+0x51c>
 800a046:	f8ca 0000 	str.w	r0, [sl]
 800a04a:	e7e5      	b.n	800a018 <__svfscanf_r+0x51c>
 800a04c:	f1bb 0f00 	cmp.w	fp, #0
 800a050:	d020      	beq.n	800a094 <__svfscanf_r+0x598>
 800a052:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a056:	429d      	cmp	r5, r3
 800a058:	dd11      	ble.n	800a07e <__svfscanf_r+0x582>
 800a05a:	4498      	add	r8, r3
 800a05c:	1aed      	subs	r5, r5, r3
 800a05e:	4413      	add	r3, r2
 800a060:	ee18 0a10 	vmov	r0, s16
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	4621      	mov	r1, r4
 800a068:	f003 f932 	bl	800d2d0 <__srefill_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d0f0      	beq.n	800a052 <__svfscanf_r+0x556>
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	f43f ae13 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	4443      	add	r3, r8
 800a07c:	e606      	b.n	8009c8c <__svfscanf_r+0x190>
 800a07e:	1b5b      	subs	r3, r3, r5
 800a080:	44a8      	add	r8, r5
 800a082:	4415      	add	r5, r2
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	6025      	str	r5, [r4, #0]
 800a088:	e7f6      	b.n	800a078 <__svfscanf_r+0x57c>
 800a08a:	bf00      	nop
 800a08c:	08011d92 	.word	0x08011d92
 800a090:	0800e3e1 	.word	0x0800e3e1
 800a094:	46b0      	mov	r8, r6
 800a096:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a09a:	f858 6b04 	ldr.w	r6, [r8], #4
 800a09e:	d02f      	beq.n	800a100 <__svfscanf_r+0x604>
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	f43f ae30 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7fc fb56 	bl	8006758 <malloc>
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f af09 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	6030      	str	r0, [r6, #0]
 800a0b8:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a0bc:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800a0c0:	45cb      	cmp	fp, r9
 800a0c2:	d313      	bcc.n	800a0ec <__svfscanf_r+0x5f0>
 800a0c4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a0c8:	4599      	cmp	r9, r3
 800a0ca:	f63f aefc 	bhi.w	8009ec6 <__svfscanf_r+0x3ca>
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d0:	f109 0908 	add.w	r9, r9, #8
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a0da:	f002 ff41 	bl	800cf60 <realloc>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f aef1 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e6:	6018      	str	r0, [r3, #0]
 800a0e8:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f10b 0201 	add.w	r2, fp, #1
 800a0f6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a0fa:	46b1      	mov	r9, r6
 800a0fc:	80ca      	strh	r2, [r1, #6]
 800a0fe:	4656      	mov	r6, sl
 800a100:	4631      	mov	r1, r6
 800a102:	ee18 0a10 	vmov	r0, s16
 800a106:	9400      	str	r4, [sp, #0]
 800a108:	462b      	mov	r3, r5
 800a10a:	2201      	movs	r2, #1
 800a10c:	f001 feec 	bl	800bee8 <_fread_r>
 800a110:	4606      	mov	r6, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f adc3 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	d009      	beq.n	800a132 <__svfscanf_r+0x636>
 800a11e:	4285      	cmp	r5, r0
 800a120:	d907      	bls.n	800a132 <__svfscanf_r+0x636>
 800a122:	4601      	mov	r1, r0
 800a124:	f8d9 0000 	ldr.w	r0, [r9]
 800a128:	f002 ff1a 	bl	800cf60 <realloc>
 800a12c:	b108      	cbz	r0, 800a132 <__svfscanf_r+0x636>
 800a12e:	f8c9 0000 	str.w	r0, [r9]
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	4433      	add	r3, r6
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	3301      	adds	r3, #1
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a13e:	4646      	mov	r6, r8
 800a140:	e503      	b.n	8009b4a <__svfscanf_r+0x4e>
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	2b00      	cmp	r3, #0
 800a146:	bf08      	it	eq
 800a148:	f04f 33ff 	moveq.w	r3, #4294967295
 800a14c:	f019 0501 	ands.w	r5, r9, #1
 800a150:	633b      	str	r3, [r7, #48]	; 0x30
 800a152:	f009 0b10 	and.w	fp, r9, #16
 800a156:	f000 8105 	beq.w	800a364 <__svfscanf_r+0x868>
 800a15a:	f1bb 0f00 	cmp.w	fp, #0
 800a15e:	f040 80a5 	bne.w	800a2ac <__svfscanf_r+0x7b0>
 800a162:	4633      	mov	r3, r6
 800a164:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a168:	f853 5b04 	ldr.w	r5, [r3], #4
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	f000 80a6 	beq.w	800a2be <__svfscanf_r+0x7c2>
 800a172:	2d00      	cmp	r5, #0
 800a174:	f43f adc7 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a178:	2080      	movs	r0, #128	; 0x80
 800a17a:	f7fc faed 	bl	8006758 <malloc>
 800a17e:	4680      	mov	r8, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	f43f aea0 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a188:	6028      	str	r0, [r5, #0]
 800a18a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a18e:	889e      	ldrh	r6, [r3, #4]
 800a190:	45b1      	cmp	r9, r6
 800a192:	d310      	bcc.n	800a1b6 <__svfscanf_r+0x6ba>
 800a194:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a198:	429e      	cmp	r6, r3
 800a19a:	f63f ae94 	bhi.w	8009ec6 <__svfscanf_r+0x3ca>
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	3608      	adds	r6, #8
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	00b1      	lsls	r1, r6, #2
 800a1a6:	f002 fedb 	bl	800cf60 <realloc>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	f43f ae8b 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	6018      	str	r0, [r3, #0]
 800a1b4:	809e      	strh	r6, [r3, #4]
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	627d      	str	r5, [r7, #36]	; 0x24
 800a1be:	f109 0201 	add.w	r2, r9, #1
 800a1c2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800a1c6:	80ca      	strh	r2, [r1, #6]
 800a1c8:	4645      	mov	r5, r8
 800a1ca:	f04f 0a20 	mov.w	sl, #32
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	f002 f98e 	bl	800c4f0 <__locale_mb_cur_max>
 800a1d4:	42b0      	cmp	r0, r6
 800a1d6:	f43f ad62 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e4:	558a      	strb	r2, [r1, r6]
 800a1e6:	6862      	ldr	r2, [r4, #4]
 800a1e8:	3a01      	subs	r2, #1
 800a1ea:	e9c4 3200 	strd	r3, r2, [r4]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	f106 0901 	add.w	r9, r6, #1
 800a1f6:	d102      	bne.n	800a1fe <__svfscanf_r+0x702>
 800a1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d005      	beq.n	800a20a <__svfscanf_r+0x70e>
 800a1fe:	2208      	movs	r2, #8
 800a200:	2100      	movs	r1, #0
 800a202:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a206:	f7fc fcf9 	bl	8006bfc <memset>
 800a20a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	ee18 0a10 	vmov	r0, s16
 800a214:	464b      	mov	r3, r9
 800a216:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a21a:	4629      	mov	r1, r5
 800a21c:	f002 f9de 	bl	800c5dc <_mbrtowc_r>
 800a220:	4603      	mov	r3, r0
 800a222:	6238      	str	r0, [r7, #32]
 800a224:	1c58      	adds	r0, r3, #1
 800a226:	f43f ad3a 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d14c      	bne.n	800a2c8 <__svfscanf_r+0x7cc>
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	682e      	ldr	r6, [r5, #0]
 800a232:	1c71      	adds	r1, r6, #1
 800a234:	d059      	beq.n	800a2ea <__svfscanf_r+0x7ee>
 800a236:	2208      	movs	r2, #8
 800a238:	2100      	movs	r1, #0
 800a23a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800a23e:	f7fc fcdd 	bl	8006bfc <memset>
 800a242:	4b9c      	ldr	r3, [pc, #624]	; (800a4b4 <__svfscanf_r+0x9b8>)
 800a244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	4632      	mov	r2, r6
 800a24c:	ee18 0a10 	vmov	r0, s16
 800a250:	68fe      	ldr	r6, [r7, #12]
 800a252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a256:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a25a:	47b0      	blx	r6
 800a25c:	2801      	cmp	r0, #1
 800a25e:	d146      	bne.n	800a2ee <__svfscanf_r+0x7f2>
 800a260:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a268:	5c9b      	ldrb	r3, [r3, r2]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d14b      	bne.n	800a306 <__svfscanf_r+0x80a>
 800a26e:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800a272:	f1b9 0f00 	cmp.w	r9, #0
 800a276:	d13c      	bne.n	800a2f2 <__svfscanf_r+0x7f6>
 800a278:	f1bb 0f00 	cmp.w	fp, #0
 800a27c:	d114      	bne.n	800a2a8 <__svfscanf_r+0x7ac>
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	f8c5 b000 	str.w	fp, [r5]
 800a284:	b16b      	cbz	r3, 800a2a2 <__svfscanf_r+0x7a6>
 800a286:	eba5 0108 	sub.w	r1, r5, r8
 800a28a:	108b      	asrs	r3, r1, #2
 800a28c:	3301      	adds	r3, #1
 800a28e:	459a      	cmp	sl, r3
 800a290:	d907      	bls.n	800a2a2 <__svfscanf_r+0x7a6>
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	3104      	adds	r1, #4
 800a296:	6818      	ldr	r0, [r3, #0]
 800a298:	f002 fe62 	bl	800cf60 <realloc>
 800a29c:	b108      	cbz	r0, 800a2a2 <__svfscanf_r+0x7a6>
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	6018      	str	r0, [r3, #0]
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2a8:	693e      	ldr	r6, [r7, #16]
 800a2aa:	e44e      	b.n	8009b4a <__svfscanf_r+0x4e>
 800a2ac:	f04f 0a00 	mov.w	sl, #0
 800a2b0:	613e      	str	r6, [r7, #16]
 800a2b2:	46d0      	mov	r8, sl
 800a2b4:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800a2b8:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800a2bc:	e787      	b.n	800a1ce <__svfscanf_r+0x6d2>
 800a2be:	46da      	mov	sl, fp
 800a2c0:	46d8      	mov	r8, fp
 800a2c2:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800a2c6:	e782      	b.n	800a1ce <__svfscanf_r+0x6d2>
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	3302      	adds	r3, #2
 800a2cc:	d1b0      	bne.n	800a230 <__svfscanf_r+0x734>
 800a2ce:	6863      	ldr	r3, [r4, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dc42      	bgt.n	800a35a <__svfscanf_r+0x85e>
 800a2d4:	ee18 0a10 	vmov	r0, s16
 800a2d8:	4621      	mov	r1, r4
 800a2da:	f002 fff9 	bl	800d2d0 <__srefill_r>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d03b      	beq.n	800a35a <__svfscanf_r+0x85e>
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	d0c7      	beq.n	800a278 <__svfscanf_r+0x77c>
 800a2e8:	e4d9      	b.n	8009c9e <__svfscanf_r+0x1a2>
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	e7ba      	b.n	800a264 <__svfscanf_r+0x768>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	e7b8      	b.n	800a264 <__svfscanf_r+0x768>
 800a2f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2f6:	ee18 0a10 	vmov	r0, s16
 800a2fa:	f816 1009 	ldrb.w	r1, [r6, r9]
 800a2fe:	4622      	mov	r2, r4
 800a300:	f005 ff56 	bl	80101b0 <_ungetc_r>
 800a304:	e7b5      	b.n	800a272 <__svfscanf_r+0x776>
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	444b      	add	r3, r9
 800a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d102      	bne.n	800a318 <__svfscanf_r+0x81c>
 800a312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a314:	2b04      	cmp	r3, #4
 800a316:	d002      	beq.n	800a31e <__svfscanf_r+0x822>
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	3b01      	subs	r3, #1
 800a31c:	633b      	str	r3, [r7, #48]	; 0x30
 800a31e:	f1bb 0f00 	cmp.w	fp, #0
 800a322:	d117      	bne.n	800a354 <__svfscanf_r+0x858>
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3504      	adds	r5, #4
 800a328:	b1a3      	cbz	r3, 800a354 <__svfscanf_r+0x858>
 800a32a:	eba5 0608 	sub.w	r6, r5, r8
 800a32e:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 800a332:	d80d      	bhi.n	800a350 <__svfscanf_r+0x854>
 800a334:	4640      	mov	r0, r8
 800a336:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800a33a:	f002 fe11 	bl	800cf60 <realloc>
 800a33e:	4680      	mov	r8, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	f43f adc0 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	1985      	adds	r5, r0, r6
 800a34a:	6018      	str	r0, [r3, #0]
 800a34c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800a350:	46d9      	mov	r9, fp
 800a352:	e7bc      	b.n	800a2ce <__svfscanf_r+0x7d2>
 800a354:	f04f 0900 	mov.w	r9, #0
 800a358:	e7b9      	b.n	800a2ce <__svfscanf_r+0x7d2>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d08b      	beq.n	800a278 <__svfscanf_r+0x77c>
 800a360:	464e      	mov	r6, r9
 800a362:	e735      	b.n	800a1d0 <__svfscanf_r+0x6d4>
 800a364:	f1bb 0f00 	cmp.w	fp, #0
 800a368:	d01d      	beq.n	800a3a6 <__svfscanf_r+0x8aa>
 800a36a:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a376:	b90a      	cbnz	r2, 800a37c <__svfscanf_r+0x880>
 800a378:	b995      	cbnz	r5, 800a3a0 <__svfscanf_r+0x8a4>
 800a37a:	e4c4      	b.n	8009d06 <__svfscanf_r+0x20a>
 800a37c:	3301      	adds	r3, #1
 800a37e:	6862      	ldr	r2, [r4, #4]
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	3501      	adds	r5, #1
 800a386:	3a01      	subs	r2, #1
 800a388:	42ab      	cmp	r3, r5
 800a38a:	6062      	str	r2, [r4, #4]
 800a38c:	d008      	beq.n	800a3a0 <__svfscanf_r+0x8a4>
 800a38e:	2a00      	cmp	r2, #0
 800a390:	dced      	bgt.n	800a36e <__svfscanf_r+0x872>
 800a392:	ee18 0a10 	vmov	r0, s16
 800a396:	4621      	mov	r1, r4
 800a398:	f002 ff9a 	bl	800d2d0 <__srefill_r>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0e6      	beq.n	800a36e <__svfscanf_r+0x872>
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	442b      	add	r3, r5
 800a3a4:	e472      	b.n	8009c8c <__svfscanf_r+0x190>
 800a3a6:	46b3      	mov	fp, r6
 800a3a8:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a3ac:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a3b0:	d07e      	beq.n	800a4b0 <__svfscanf_r+0x9b4>
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	f43f aca7 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a3b8:	2020      	movs	r0, #32
 800a3ba:	f7fc f9cd 	bl	8006758 <malloc>
 800a3be:	4680      	mov	r8, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f43f ad80 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	6030      	str	r0, [r6, #0]
 800a3ca:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a3ce:	889d      	ldrh	r5, [r3, #4]
 800a3d0:	45a9      	cmp	r9, r5
 800a3d2:	d310      	bcc.n	800a3f6 <__svfscanf_r+0x8fa>
 800a3d4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a3d8:	429d      	cmp	r5, r3
 800a3da:	f63f ad74 	bhi.w	8009ec6 <__svfscanf_r+0x3ca>
 800a3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e0:	3508      	adds	r5, #8
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	00a9      	lsls	r1, r5, #2
 800a3e6:	f002 fdbb 	bl	800cf60 <realloc>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	f43f ad6b 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	6018      	str	r0, [r3, #0]
 800a3f4:	809d      	strh	r5, [r3, #4]
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f109 0201 	add.w	r2, r9, #1
 800a400:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a404:	46b2      	mov	sl, r6
 800a406:	80ca      	strh	r2, [r1, #6]
 800a408:	4646      	mov	r6, r8
 800a40a:	f04f 0920 	mov.w	r9, #32
 800a40e:	4635      	mov	r5, r6
 800a410:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	781a      	ldrb	r2, [r3, #0]
 800a418:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a41c:	b36a      	cbz	r2, 800a47a <__svfscanf_r+0x97e>
 800a41e:	6862      	ldr	r2, [r4, #4]
 800a420:	3a01      	subs	r2, #1
 800a422:	6062      	str	r2, [r4, #4]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	6022      	str	r2, [r4, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f806 3b01 	strb.w	r3, [r6], #1
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d011      	beq.n	800a458 <__svfscanf_r+0x95c>
 800a434:	1b73      	subs	r3, r6, r5
 800a436:	454b      	cmp	r3, r9
 800a438:	d30e      	bcc.n	800a458 <__svfscanf_r+0x95c>
 800a43a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a43e:	4628      	mov	r0, r5
 800a440:	4649      	mov	r1, r9
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
 800a444:	f002 fd8c 	bl	800cf60 <realloc>
 800a448:	4605      	mov	r5, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f43f ad3b 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	f8ca 0000 	str.w	r0, [sl]
 800a456:	18c6      	adds	r6, r0, r3
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	3b01      	subs	r3, #1
 800a45c:	633b      	str	r3, [r7, #48]	; 0x30
 800a45e:	d00c      	beq.n	800a47a <__svfscanf_r+0x97e>
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dcd6      	bgt.n	800a414 <__svfscanf_r+0x918>
 800a466:	ee18 0a10 	vmov	r0, s16
 800a46a:	4621      	mov	r1, r4
 800a46c:	f002 ff30 	bl	800d2d0 <__srefill_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	d0cf      	beq.n	800a414 <__svfscanf_r+0x918>
 800a474:	42ae      	cmp	r6, r5
 800a476:	f43f ac12 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a47a:	1b75      	subs	r5, r6, r5
 800a47c:	f43f ac43 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a480:	2300      	movs	r3, #0
 800a482:	7033      	strb	r3, [r6, #0]
 800a484:	f1ba 0f00 	cmp.w	sl, #0
 800a488:	d009      	beq.n	800a49e <__svfscanf_r+0x9a2>
 800a48a:	1c69      	adds	r1, r5, #1
 800a48c:	4589      	cmp	r9, r1
 800a48e:	d906      	bls.n	800a49e <__svfscanf_r+0x9a2>
 800a490:	f8da 0000 	ldr.w	r0, [sl]
 800a494:	f002 fd64 	bl	800cf60 <realloc>
 800a498:	b108      	cbz	r0, 800a49e <__svfscanf_r+0x9a2>
 800a49a:	f8ca 0000 	str.w	r0, [sl]
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	442b      	add	r3, r5
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4aa:	465e      	mov	r6, fp
 800a4ac:	f7ff bb4d 	b.w	8009b4a <__svfscanf_r+0x4e>
 800a4b0:	46ca      	mov	sl, r9
 800a4b2:	e7ac      	b.n	800a40e <__svfscanf_r+0x912>
 800a4b4:	200008c0 	.word	0x200008c0
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bf08      	it	eq
 800a4be:	f04f 33ff 	moveq.w	r3, #4294967295
 800a4c2:	f019 0501 	ands.w	r5, r9, #1
 800a4c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a4c8:	f009 0810 	and.w	r8, r9, #16
 800a4cc:	f000 80fb 	beq.w	800a6c6 <__svfscanf_r+0xbca>
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	f040 80a0 	bne.w	800a618 <__svfscanf_r+0xb1c>
 800a4d8:	4633      	mov	r3, r6
 800a4da:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a4de:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e4:	f000 80a0 	beq.w	800a628 <__svfscanf_r+0xb2c>
 800a4e8:	2e00      	cmp	r6, #0
 800a4ea:	f43f ac0c 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a4ee:	2080      	movs	r0, #128	; 0x80
 800a4f0:	f7fc f932 	bl	8006758 <malloc>
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f ace5 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	6030      	str	r0, [r6, #0]
 800a500:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800a504:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800a508:	45ca      	cmp	sl, r9
 800a50a:	d313      	bcc.n	800a534 <__svfscanf_r+0xa38>
 800a50c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a510:	4599      	cmp	r9, r3
 800a512:	f63f acd8 	bhi.w	8009ec6 <__svfscanf_r+0x3ca>
 800a516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a518:	f109 0908 	add.w	r9, r9, #8
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a522:	f002 fd1d 	bl	800cf60 <realloc>
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f accd 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52e:	6018      	str	r0, [r3, #0]
 800a530:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f10a 0201 	add.w	r2, sl, #1
 800a53e:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800a542:	80ca      	strh	r2, [r1, #6]
 800a544:	46b2      	mov	sl, r6
 800a546:	f04f 0920 	mov.w	r9, #32
 800a54a:	462e      	mov	r6, r5
 800a54c:	2200      	movs	r2, #0
 800a54e:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	49ac      	ldr	r1, [pc, #688]	; (800a808 <__svfscanf_r+0xd0c>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	5c5b      	ldrb	r3, [r3, r1]
 800a55a:	0718      	lsls	r0, r3, #28
 800a55c:	d441      	bmi.n	800a5e2 <__svfscanf_r+0xae6>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2b00      	cmp	r3, #0
 800a562:	d03e      	beq.n	800a5e2 <__svfscanf_r+0xae6>
 800a564:	613a      	str	r2, [r7, #16]
 800a566:	f001 ffc3 	bl	800c4f0 <__locale_mb_cur_max>
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4290      	cmp	r0, r2
 800a56e:	f43f ab96 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800a578:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a57c:	f80c 0002 	strb.w	r0, [ip, r2]
 800a580:	1c53      	adds	r3, r2, #1
 800a582:	6862      	ldr	r2, [r4, #4]
 800a584:	3a01      	subs	r2, #1
 800a586:	e9c4 1200 	strd	r1, r2, [r4]
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	2a03      	cmp	r2, #3
 800a58e:	d103      	bne.n	800a598 <__svfscanf_r+0xa9c>
 800a590:	f8db 2000 	ldr.w	r2, [fp]
 800a594:	2a04      	cmp	r2, #4
 800a596:	d006      	beq.n	800a5a6 <__svfscanf_r+0xaaa>
 800a598:	2208      	movs	r2, #8
 800a59a:	2100      	movs	r1, #0
 800a59c:	4658      	mov	r0, fp
 800a59e:	623b      	str	r3, [r7, #32]
 800a5a0:	f7fc fb2c 	bl	8006bfc <memset>
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	f8cd b000 	str.w	fp, [sp]
 800a5aa:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a5ae:	ee18 0a10 	vmov	r0, s16
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	f002 f811 	bl	800c5dc <_mbrtowc_r>
 800a5ba:	1c42      	adds	r2, r0, #1
 800a5bc:	6238      	str	r0, [r7, #32]
 800a5be:	f43f ab6e 	beq.w	8009c9e <__svfscanf_r+0x1a2>
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d133      	bne.n	800a630 <__svfscanf_r+0xb34>
 800a5c8:	6030      	str	r0, [r6, #0]
 800a5ca:	6830      	ldr	r0, [r6, #0]
 800a5cc:	613b      	str	r3, [r7, #16]
 800a5ce:	f001 ff81 	bl	800c4d4 <iswspace>
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d049      	beq.n	800a66e <__svfscanf_r+0xb72>
 800a5da:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d13a      	bne.n	800a658 <__svfscanf_r+0xb5c>
 800a5e2:	f1b8 0f00 	cmp.w	r8, #0
 800a5e6:	d114      	bne.n	800a612 <__svfscanf_r+0xb16>
 800a5e8:	f8c6 8000 	str.w	r8, [r6]
 800a5ec:	f1ba 0f00 	cmp.w	sl, #0
 800a5f0:	d00c      	beq.n	800a60c <__svfscanf_r+0xb10>
 800a5f2:	1b71      	subs	r1, r6, r5
 800a5f4:	108b      	asrs	r3, r1, #2
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	4599      	cmp	r9, r3
 800a5fa:	d907      	bls.n	800a60c <__svfscanf_r+0xb10>
 800a5fc:	f8da 0000 	ldr.w	r0, [sl]
 800a600:	3104      	adds	r1, #4
 800a602:	f002 fcad 	bl	800cf60 <realloc>
 800a606:	b108      	cbz	r0, 800a60c <__svfscanf_r+0xb10>
 800a608:	f8ca 0000 	str.w	r0, [sl]
 800a60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60e:	3301      	adds	r3, #1
 800a610:	62bb      	str	r3, [r7, #40]	; 0x28
 800a612:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800a614:	f7ff ba99 	b.w	8009b4a <__svfscanf_r+0x4e>
 800a618:	f04f 0900 	mov.w	r9, #0
 800a61c:	627e      	str	r6, [r7, #36]	; 0x24
 800a61e:	464d      	mov	r5, r9
 800a620:	46ca      	mov	sl, r9
 800a622:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 800a626:	e791      	b.n	800a54c <__svfscanf_r+0xa50>
 800a628:	46c1      	mov	r9, r8
 800a62a:	4645      	mov	r5, r8
 800a62c:	46c2      	mov	sl, r8
 800a62e:	e78d      	b.n	800a54c <__svfscanf_r+0xa50>
 800a630:	6a3a      	ldr	r2, [r7, #32]
 800a632:	3202      	adds	r2, #2
 800a634:	d1c9      	bne.n	800a5ca <__svfscanf_r+0xace>
 800a636:	461a      	mov	r2, r3
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	dc89      	bgt.n	800a552 <__svfscanf_r+0xa56>
 800a63e:	ee18 0a10 	vmov	r0, s16
 800a642:	4621      	mov	r1, r4
 800a644:	613a      	str	r2, [r7, #16]
 800a646:	f002 fe43 	bl	800d2d0 <__srefill_r>
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d080      	beq.n	800a552 <__svfscanf_r+0xa56>
 800a650:	2a00      	cmp	r2, #0
 800a652:	f47f ab24 	bne.w	8009c9e <__svfscanf_r+0x1a2>
 800a656:	e7c4      	b.n	800a5e2 <__svfscanf_r+0xae6>
 800a658:	3b01      	subs	r3, #1
 800a65a:	ee18 0a10 	vmov	r0, s16
 800a65e:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800a662:	633b      	str	r3, [r7, #48]	; 0x30
 800a664:	4622      	mov	r2, r4
 800a666:	f005 fda3 	bl	80101b0 <_ungetc_r>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	e7b7      	b.n	800a5de <__svfscanf_r+0xae2>
 800a66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a670:	4419      	add	r1, r3
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a676:	2b03      	cmp	r3, #3
 800a678:	d103      	bne.n	800a682 <__svfscanf_r+0xb86>
 800a67a:	f8db 3000 	ldr.w	r3, [fp]
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d002      	beq.n	800a688 <__svfscanf_r+0xb8c>
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	3b01      	subs	r3, #1
 800a686:	633b      	str	r3, [r7, #48]	; 0x30
 800a688:	f1b8 0f00 	cmp.w	r8, #0
 800a68c:	d1d4      	bne.n	800a638 <__svfscanf_r+0xb3c>
 800a68e:	3604      	adds	r6, #4
 800a690:	f1ba 0f00 	cmp.w	sl, #0
 800a694:	d015      	beq.n	800a6c2 <__svfscanf_r+0xbc6>
 800a696:	1b73      	subs	r3, r6, r5
 800a698:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a69c:	d80f      	bhi.n	800a6be <__svfscanf_r+0xbc2>
 800a69e:	4628      	mov	r0, r5
 800a6a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	f002 fc5b 	bl	800cf60 <realloc>
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	f43f ac0a 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f8ca 0000 	str.w	r0, [sl]
 800a6b8:	18c6      	adds	r6, r0, r3
 800a6ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a6be:	4642      	mov	r2, r8
 800a6c0:	e7ba      	b.n	800a638 <__svfscanf_r+0xb3c>
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	e7b8      	b.n	800a638 <__svfscanf_r+0xb3c>
 800a6c6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ca:	d01a      	beq.n	800a702 <__svfscanf_r+0xc06>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	494e      	ldr	r1, [pc, #312]	; (800a808 <__svfscanf_r+0xd0c>)
 800a6d0:	781a      	ldrb	r2, [r3, #0]
 800a6d2:	5c52      	ldrb	r2, [r2, r1]
 800a6d4:	0711      	lsls	r1, r2, #28
 800a6d6:	f53f ae63 	bmi.w	800a3a0 <__svfscanf_r+0x8a4>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	3501      	adds	r5, #1
 800a6e4:	3a01      	subs	r2, #1
 800a6e6:	42ab      	cmp	r3, r5
 800a6e8:	6062      	str	r2, [r4, #4]
 800a6ea:	f43f ae59 	beq.w	800a3a0 <__svfscanf_r+0x8a4>
 800a6ee:	2a00      	cmp	r2, #0
 800a6f0:	dcec      	bgt.n	800a6cc <__svfscanf_r+0xbd0>
 800a6f2:	ee18 0a10 	vmov	r0, s16
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f002 fdea 	bl	800d2d0 <__srefill_r>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d0e5      	beq.n	800a6cc <__svfscanf_r+0xbd0>
 800a700:	e64e      	b.n	800a3a0 <__svfscanf_r+0x8a4>
 800a702:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a706:	f856 5b04 	ldr.w	r5, [r6], #4
 800a70a:	d07b      	beq.n	800a804 <__svfscanf_r+0xd08>
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	f43f aafa 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a712:	2020      	movs	r0, #32
 800a714:	f7fc f820 	bl	8006758 <malloc>
 800a718:	4681      	mov	r9, r0
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f abd3 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800a728:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 800a72c:	45c2      	cmp	sl, r8
 800a72e:	d313      	bcc.n	800a758 <__svfscanf_r+0xc5c>
 800a730:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a734:	4598      	cmp	r8, r3
 800a736:	f63f abc6 	bhi.w	8009ec6 <__svfscanf_r+0x3ca>
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	f108 0808 	add.w	r8, r8, #8
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a746:	f002 fc0b 	bl	800cf60 <realloc>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f abbb 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a752:	6018      	str	r0, [r3, #0]
 800a754:	f8a3 8004 	strh.w	r8, [r3, #4]
 800a758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f10a 0201 	add.w	r2, sl, #1
 800a762:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800a766:	80ca      	strh	r2, [r1, #6]
 800a768:	46aa      	mov	sl, r5
 800a76a:	464d      	mov	r5, r9
 800a76c:	f04f 0920 	mov.w	r9, #32
 800a770:	46a8      	mov	r8, r5
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4924      	ldr	r1, [pc, #144]	; (800a808 <__svfscanf_r+0xd0c>)
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	5c52      	ldrb	r2, [r2, r1]
 800a77a:	0712      	lsls	r2, r2, #28
 800a77c:	d42a      	bmi.n	800a7d4 <__svfscanf_r+0xcd8>
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	3a01      	subs	r2, #1
 800a782:	6062      	str	r2, [r4, #4]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f805 3b01 	strb.w	r3, [r5], #1
 800a78e:	f1ba 0f00 	cmp.w	sl, #0
 800a792:	d011      	beq.n	800a7b8 <__svfscanf_r+0xcbc>
 800a794:	eba5 0b08 	sub.w	fp, r5, r8
 800a798:	45cb      	cmp	fp, r9
 800a79a:	d30d      	bcc.n	800a7b8 <__svfscanf_r+0xcbc>
 800a79c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f002 fbdc 	bl	800cf60 <realloc>
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f43f ab8b 	beq.w	8009ec6 <__svfscanf_r+0x3ca>
 800a7b0:	eb00 050b 	add.w	r5, r0, fp
 800a7b4:	f8ca 0000 	str.w	r0, [sl]
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	633b      	str	r3, [r7, #48]	; 0x30
 800a7be:	d009      	beq.n	800a7d4 <__svfscanf_r+0xcd8>
 800a7c0:	6863      	ldr	r3, [r4, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dcd5      	bgt.n	800a772 <__svfscanf_r+0xc76>
 800a7c6:	ee18 0a10 	vmov	r0, s16
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	f002 fd80 	bl	800d2d0 <__srefill_r>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d0ce      	beq.n	800a772 <__svfscanf_r+0xc76>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	702b      	strb	r3, [r5, #0]
 800a7d8:	eba5 0508 	sub.w	r5, r5, r8
 800a7dc:	f1ba 0f00 	cmp.w	sl, #0
 800a7e0:	d009      	beq.n	800a7f6 <__svfscanf_r+0xcfa>
 800a7e2:	1c69      	adds	r1, r5, #1
 800a7e4:	4589      	cmp	r9, r1
 800a7e6:	d906      	bls.n	800a7f6 <__svfscanf_r+0xcfa>
 800a7e8:	f8da 0000 	ldr.w	r0, [sl]
 800a7ec:	f002 fbb8 	bl	800cf60 <realloc>
 800a7f0:	b108      	cbz	r0, 800a7f6 <__svfscanf_r+0xcfa>
 800a7f2:	f8ca 0000 	str.w	r0, [sl]
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	442b      	add	r3, r5
 800a7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	3301      	adds	r3, #1
 800a800:	f7ff b9a2 	b.w	8009b48 <__svfscanf_r+0x4c>
 800a804:	46ca      	mov	sl, r9
 800a806:	e7b3      	b.n	800a770 <__svfscanf_r+0xc74>
 800a808:	08011d92 	.word	0x08011d92
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	3b01      	subs	r3, #1
 800a810:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a814:	bf81      	itttt	hi
 800a816:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800a818:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 800a81c:	eb03 0b00 	addhi.w	fp, r3, r0
 800a820:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a824:	bf88      	it	hi
 800a826:	633b      	strhi	r3, [r7, #48]	; 0x30
 800a828:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 800a82c:	f8df 9488 	ldr.w	r9, [pc, #1160]	; 800acb8 <__svfscanf_r+0x11bc>
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
 800a832:	bf98      	it	ls
 800a834:	f04f 0b00 	movls.w	fp, #0
 800a838:	f04f 0a00 	mov.w	sl, #0
 800a83c:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	7813      	ldrb	r3, [r2, #0]
 800a844:	2b39      	cmp	r3, #57	; 0x39
 800a846:	d80f      	bhi.n	800a868 <__svfscanf_r+0xd6c>
 800a848:	2b2a      	cmp	r3, #42	; 0x2a
 800a84a:	d91a      	bls.n	800a882 <__svfscanf_r+0xd86>
 800a84c:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a850:	290e      	cmp	r1, #14
 800a852:	d816      	bhi.n	800a882 <__svfscanf_r+0xd86>
 800a854:	e8df f001 	tbb	[pc, r1]
 800a858:	157f157f 	.word	0x157f157f
 800a85c:	70704215 	.word	0x70704215
 800a860:	70707070 	.word	0x70707070
 800a864:	7870      	.short	0x7870
 800a866:	78          	.byte	0x78
 800a867:	00          	.byte	0x00
 800a868:	2b66      	cmp	r3, #102	; 0x66
 800a86a:	d835      	bhi.n	800a8d8 <__svfscanf_r+0xddc>
 800a86c:	2b60      	cmp	r3, #96	; 0x60
 800a86e:	d803      	bhi.n	800a878 <__svfscanf_r+0xd7c>
 800a870:	2b46      	cmp	r3, #70	; 0x46
 800a872:	d804      	bhi.n	800a87e <__svfscanf_r+0xd82>
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d904      	bls.n	800a882 <__svfscanf_r+0xd86>
 800a878:	69f9      	ldr	r1, [r7, #28]
 800a87a:	290a      	cmp	r1, #10
 800a87c:	e069      	b.n	800a952 <__svfscanf_r+0xe56>
 800a87e:	2b58      	cmp	r3, #88	; 0x58
 800a880:	d06f      	beq.n	800a962 <__svfscanf_r+0xe66>
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	05db      	lsls	r3, r3, #23
 800a886:	d512      	bpl.n	800a8ae <__svfscanf_r+0xdb2>
 800a888:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a88c:	4598      	cmp	r8, r3
 800a88e:	d909      	bls.n	800a8a4 <__svfscanf_r+0xda8>
 800a890:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800a894:	ee18 0a10 	vmov	r0, s16
 800a898:	4622      	mov	r2, r4
 800a89a:	f005 fc89 	bl	80101b0 <_ungetc_r>
 800a89e:	f108 39ff 	add.w	r9, r8, #4294967295
 800a8a2:	46c8      	mov	r8, r9
 800a8a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a8a8:	4598      	cmp	r8, r3
 800a8aa:	f43f aa2c 	beq.w	8009d06 <__svfscanf_r+0x20a>
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	f013 0210 	ands.w	r2, r3, #16
 800a8b4:	d175      	bne.n	800a9a2 <__svfscanf_r+0xea6>
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	69bd      	ldr	r5, [r7, #24]
 800a8ba:	f888 2000 	strb.w	r2, [r8]
 800a8be:	ee18 0a10 	vmov	r0, s16
 800a8c2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a8c6:	47a8      	blx	r5
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	069d      	lsls	r5, r3, #26
 800a8cc:	f106 0904 	add.w	r9, r6, #4
 800a8d0:	d55e      	bpl.n	800a990 <__svfscanf_r+0xe94>
 800a8d2:	6833      	ldr	r3, [r6, #0]
 800a8d4:	6018      	str	r0, [r3, #0]
 800a8d6:	e060      	b.n	800a99a <__svfscanf_r+0xe9e>
 800a8d8:	2b78      	cmp	r3, #120	; 0x78
 800a8da:	e7d1      	b.n	800a880 <__svfscanf_r+0xd84>
 800a8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8de:	0509      	lsls	r1, r1, #20
 800a8e0:	d50d      	bpl.n	800a8fe <__svfscanf_r+0xe02>
 800a8e2:	69f9      	ldr	r1, [r7, #28]
 800a8e4:	b929      	cbnz	r1, 800a8f2 <__svfscanf_r+0xdf6>
 800a8e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8e8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800a8ec:	6279      	str	r1, [r7, #36]	; 0x24
 800a8ee:	2108      	movs	r1, #8
 800a8f0:	61f9      	str	r1, [r7, #28]
 800a8f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8f4:	054d      	lsls	r5, r1, #21
 800a8f6:	d505      	bpl.n	800a904 <__svfscanf_r+0xe08>
 800a8f8:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 800a8fc:	6279      	str	r1, [r7, #36]	; 0x24
 800a8fe:	f808 3b01 	strb.w	r3, [r8], #1
 800a902:	e00d      	b.n	800a920 <__svfscanf_r+0xe24>
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
 800a90c:	f1bb 0f00 	cmp.w	fp, #0
 800a910:	d004      	beq.n	800a91c <__svfscanf_r+0xe20>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	3301      	adds	r3, #1
 800a916:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a91a:	633b      	str	r3, [r7, #48]	; 0x30
 800a91c:	f10a 0a01 	add.w	sl, sl, #1
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	3b01      	subs	r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	6063      	str	r3, [r4, #4]
 800a928:	dd2a      	ble.n	800a980 <__svfscanf_r+0xe84>
 800a92a:	3201      	adds	r2, #1
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	3b01      	subs	r3, #1
 800a932:	633b      	str	r3, [r7, #48]	; 0x30
 800a934:	d184      	bne.n	800a840 <__svfscanf_r+0xd44>
 800a936:	e7a4      	b.n	800a882 <__svfscanf_r+0xd86>
 800a938:	69f9      	ldr	r1, [r7, #28]
 800a93a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a93e:	61f9      	str	r1, [r7, #28]
 800a940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a942:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 800a946:	e7d9      	b.n	800a8fc <__svfscanf_r+0xe00>
 800a948:	69f9      	ldr	r1, [r7, #28]
 800a94a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a94e:	61f9      	str	r1, [r7, #28]
 800a950:	2908      	cmp	r1, #8
 800a952:	dcf5      	bgt.n	800a940 <__svfscanf_r+0xe44>
 800a954:	e795      	b.n	800a882 <__svfscanf_r+0xd86>
 800a956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a958:	0608      	lsls	r0, r1, #24
 800a95a:	d592      	bpl.n	800a882 <__svfscanf_r+0xd86>
 800a95c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a960:	e7cc      	b.n	800a8fc <__svfscanf_r+0xe00>
 800a962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a964:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 800a968:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a96c:	d189      	bne.n	800a882 <__svfscanf_r+0xd86>
 800a96e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a970:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 800a974:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 800a978:	6279      	str	r1, [r7, #36]	; 0x24
 800a97a:	2110      	movs	r1, #16
 800a97c:	61f9      	str	r1, [r7, #28]
 800a97e:	e7be      	b.n	800a8fe <__svfscanf_r+0xe02>
 800a980:	ee18 0a10 	vmov	r0, s16
 800a984:	4621      	mov	r1, r4
 800a986:	f002 fca3 	bl	800d2d0 <__srefill_r>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0cf      	beq.n	800a92e <__svfscanf_r+0xe32>
 800a98e:	e778      	b.n	800a882 <__svfscanf_r+0xd86>
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	0719      	lsls	r1, r3, #28
 800a994:	d50e      	bpl.n	800a9b4 <__svfscanf_r+0xeb8>
 800a996:	6833      	ldr	r3, [r6, #0]
 800a998:	7018      	strb	r0, [r3, #0]
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	3301      	adds	r3, #1
 800a99e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9a0:	464e      	mov	r6, r9
 800a9a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a9a6:	eba8 0803 	sub.w	r8, r8, r3
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	44c2      	add	sl, r8
 800a9ae:	4453      	add	r3, sl
 800a9b0:	f7ff b96c 	b.w	8009c8c <__svfscanf_r+0x190>
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	075a      	lsls	r2, r3, #29
 800a9b8:	d502      	bpl.n	800a9c0 <__svfscanf_r+0xec4>
 800a9ba:	6833      	ldr	r3, [r6, #0]
 800a9bc:	8018      	strh	r0, [r3, #0]
 800a9be:	e7ec      	b.n	800a99a <__svfscanf_r+0xe9e>
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	f013 0201 	ands.w	r2, r3, #1
 800a9c6:	d184      	bne.n	800a8d2 <__svfscanf_r+0xdd6>
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	079b      	lsls	r3, r3, #30
 800a9cc:	d581      	bpl.n	800a8d2 <__svfscanf_r+0xdd6>
 800a9ce:	4bb9      	ldr	r3, [pc, #740]	; (800acb4 <__svfscanf_r+0x11b8>)
 800a9d0:	69b9      	ldr	r1, [r7, #24]
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	ee18 0a10 	vmov	r0, s16
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a9de:	d105      	bne.n	800a9ec <__svfscanf_r+0xef0>
 800a9e0:	f003 feba 	bl	800e758 <_strtoull_r>
 800a9e4:	6833      	ldr	r3, [r6, #0]
 800a9e6:	e9c3 0100 	strd	r0, r1, [r3]
 800a9ea:	e7d6      	b.n	800a99a <__svfscanf_r+0xe9e>
 800a9ec:	f003 fd90 	bl	800e510 <_strtoll_r>
 800a9f0:	e7f8      	b.n	800a9e4 <__svfscanf_r+0xee8>
 800a9f2:	ee18 0a10 	vmov	r0, s16
 800a9f6:	f001 fd81 	bl	800c4fc <_localeconv_r>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6802      	ldr	r2, [r0, #0]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800aa04:	f04f 0b00 	mov.w	fp, #0
 800aa08:	bf88      	it	hi
 800aa0a:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800aa0c:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800aa10:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 800aa14:	bf81      	itttt	hi
 800aa16:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa1a:	f240 115d 	movwhi	r1, #349	; 0x15d
 800aa1e:	195b      	addhi	r3, r3, r5
 800aa20:	6339      	strhi	r1, [r7, #48]	; 0x30
 800aa22:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800aa26:	bf98      	it	ls
 800aa28:	2300      	movls	r3, #0
 800aa2a:	46da      	mov	sl, fp
 800aa2c:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800aa30:	6821      	ldr	r1, [r4, #0]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	7809      	ldrb	r1, [r1, #0]
 800aa36:	294e      	cmp	r1, #78	; 0x4e
 800aa38:	d862      	bhi.n	800ab00 <__svfscanf_r+0x1004>
 800aa3a:	2940      	cmp	r1, #64	; 0x40
 800aa3c:	d838      	bhi.n	800aab0 <__svfscanf_r+0xfb4>
 800aa3e:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
 800aa42:	fa5f fe8c 	uxtb.w	lr, ip
 800aa46:	f1be 0f0e 	cmp.w	lr, #14
 800aa4a:	d934      	bls.n	800aab6 <__svfscanf_r+0xfba>
 800aa4c:	f892 c000 	ldrb.w	ip, [r2]
 800aa50:	458c      	cmp	ip, r1
 800aa52:	f040 80b6 	bne.w	800abc2 <__svfscanf_r+0x10c6>
 800aa56:	05a8      	lsls	r0, r5, #22
 800aa58:	f140 80b3 	bpl.w	800abc2 <__svfscanf_r+0x10c6>
 800aa5c:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 800aa60:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800aa64:	e084      	b.n	800ab70 <__svfscanf_r+0x1074>
 800aa66:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
 800aa6a:	f1bc 0f0d 	cmp.w	ip, #13
 800aa6e:	d8ed      	bhi.n	800aa4c <__svfscanf_r+0xf50>
 800aa70:	a001      	add	r0, pc, #4	; (adr r0, 800aa78 <__svfscanf_r+0xf7c>)
 800aa72:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800abbd 	.word	0x0800abbd
 800aa7c:	0800aa4d 	.word	0x0800aa4d
 800aa80:	0800aa4d 	.word	0x0800aa4d
 800aa84:	0800aa4d 	.word	0x0800aa4d
 800aa88:	0800ac35 	.word	0x0800ac35
 800aa8c:	0800ac1d 	.word	0x0800ac1d
 800aa90:	0800aa4d 	.word	0x0800aa4d
 800aa94:	0800aa4d 	.word	0x0800aa4d
 800aa98:	0800abf1 	.word	0x0800abf1
 800aa9c:	0800aa4d 	.word	0x0800aa4d
 800aaa0:	0800aa4d 	.word	0x0800aa4d
 800aaa4:	0800aa4d 	.word	0x0800aa4d
 800aaa8:	0800aa4d 	.word	0x0800aa4d
 800aaac:	0800ab81 	.word	0x0800ab81
 800aab0:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 800aab4:	e7d9      	b.n	800aa6a <__svfscanf_r+0xf6e>
 800aab6:	f1bc 0f0e 	cmp.w	ip, #14
 800aaba:	d8c7      	bhi.n	800aa4c <__svfscanf_r+0xf50>
 800aabc:	a001      	add	r0, pc, #4	; (adr r0, 800aac4 <__svfscanf_r+0xfc8>)
 800aabe:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800ab77 	.word	0x0800ab77
 800aac8:	0800aa4d 	.word	0x0800aa4d
 800aacc:	0800ab77 	.word	0x0800ab77
 800aad0:	0800aa4d 	.word	0x0800aa4d
 800aad4:	0800aa4d 	.word	0x0800aa4d
 800aad8:	0800ab29 	.word	0x0800ab29
 800aadc:	0800ab67 	.word	0x0800ab67
 800aae0:	0800ab67 	.word	0x0800ab67
 800aae4:	0800ab67 	.word	0x0800ab67
 800aae8:	0800ab67 	.word	0x0800ab67
 800aaec:	0800ab67 	.word	0x0800ab67
 800aaf0:	0800ab67 	.word	0x0800ab67
 800aaf4:	0800ab67 	.word	0x0800ab67
 800aaf8:	0800ab67 	.word	0x0800ab67
 800aafc:	0800ab67 	.word	0x0800ab67
 800ab00:	296e      	cmp	r1, #110	; 0x6e
 800ab02:	d80c      	bhi.n	800ab1e <__svfscanf_r+0x1022>
 800ab04:	2960      	cmp	r1, #96	; 0x60
 800ab06:	d8ae      	bhi.n	800aa66 <__svfscanf_r+0xf6a>
 800ab08:	2954      	cmp	r1, #84	; 0x54
 800ab0a:	f000 808d 	beq.w	800ac28 <__svfscanf_r+0x112c>
 800ab0e:	2959      	cmp	r1, #89	; 0x59
 800ab10:	d19c      	bne.n	800aa4c <__svfscanf_r+0xf50>
 800ab12:	f1b8 0f07 	cmp.w	r8, #7
 800ab16:	d154      	bne.n	800abc2 <__svfscanf_r+0x10c6>
 800ab18:	f04f 0808 	mov.w	r8, #8
 800ab1c:	e028      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ab1e:	2974      	cmp	r1, #116	; 0x74
 800ab20:	f000 8082 	beq.w	800ac28 <__svfscanf_r+0x112c>
 800ab24:	2979      	cmp	r1, #121	; 0x79
 800ab26:	e7f3      	b.n	800ab10 <__svfscanf_r+0x1014>
 800ab28:	05e8      	lsls	r0, r5, #23
 800ab2a:	d51c      	bpl.n	800ab66 <__svfscanf_r+0x106a>
 800ab2c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ab30:	f10a 0a01 	add.w	sl, sl, #1
 800ab34:	b11b      	cbz	r3, 800ab3e <__svfscanf_r+0x1042>
 800ab36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab38:	3101      	adds	r1, #1
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	6339      	str	r1, [r7, #48]	; 0x30
 800ab3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab40:	3901      	subs	r1, #1
 800ab42:	6339      	str	r1, [r7, #48]	; 0x30
 800ab44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab46:	3101      	adds	r1, #1
 800ab48:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ab4a:	6861      	ldr	r1, [r4, #4]
 800ab4c:	3901      	subs	r1, #1
 800ab4e:	2900      	cmp	r1, #0
 800ab50:	6061      	str	r1, [r4, #4]
 800ab52:	f340 808e 	ble.w	800ac72 <__svfscanf_r+0x1176>
 800ab56:	68b8      	ldr	r0, [r7, #8]
 800ab58:	3001      	adds	r0, #1
 800ab5a:	6020      	str	r0, [r4, #0]
 800ab5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	f47f af66 	bne.w	800aa30 <__svfscanf_r+0xf34>
 800ab64:	e02d      	b.n	800abc2 <__svfscanf_r+0x10c6>
 800ab66:	eb1b 0f08 	cmn.w	fp, r8
 800ab6a:	d12a      	bne.n	800abc2 <__svfscanf_r+0x10c6>
 800ab6c:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800ab70:	f809 1b01 	strb.w	r1, [r9], #1
 800ab74:	e7e3      	b.n	800ab3e <__svfscanf_r+0x1042>
 800ab76:	0628      	lsls	r0, r5, #24
 800ab78:	d523      	bpl.n	800abc2 <__svfscanf_r+0x10c6>
 800ab7a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ab7e:	e7f7      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ab80:	f1bb 0f00 	cmp.w	fp, #0
 800ab84:	d10c      	bne.n	800aba0 <__svfscanf_r+0x10a4>
 800ab86:	f1ba 0f00 	cmp.w	sl, #0
 800ab8a:	d10c      	bne.n	800aba6 <__svfscanf_r+0x10aa>
 800ab8c:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800ab90:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800ab94:	d107      	bne.n	800aba6 <__svfscanf_r+0x10aa>
 800ab96:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ab9a:	f04f 0b01 	mov.w	fp, #1
 800ab9e:	e7e7      	b.n	800ab70 <__svfscanf_r+0x1074>
 800aba0:	f1bb 0f02 	cmp.w	fp, #2
 800aba4:	d05f      	beq.n	800ac66 <__svfscanf_r+0x116a>
 800aba6:	f1b8 0f01 	cmp.w	r8, #1
 800abaa:	d002      	beq.n	800abb2 <__svfscanf_r+0x10b6>
 800abac:	f1b8 0f04 	cmp.w	r8, #4
 800abb0:	d107      	bne.n	800abc2 <__svfscanf_r+0x10c6>
 800abb2:	f108 0801 	add.w	r8, r8, #1
 800abb6:	fa5f f888 	uxtb.w	r8, r8
 800abba:	e7d9      	b.n	800ab70 <__svfscanf_r+0x1074>
 800abbc:	f1bb 0f01 	cmp.w	fp, #1
 800abc0:	d054      	beq.n	800ac6c <__svfscanf_r+0x1170>
 800abc2:	f1ba 0f00 	cmp.w	sl, #0
 800abc6:	d001      	beq.n	800abcc <__svfscanf_r+0x10d0>
 800abc8:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800abcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abd0:	f1bb 0f01 	cmp.w	fp, #1
 800abd4:	d85a      	bhi.n	800ac8c <__svfscanf_r+0x1190>
 800abd6:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800abda:	45a9      	cmp	r9, r5
 800abdc:	f67f a893 	bls.w	8009d06 <__svfscanf_r+0x20a>
 800abe0:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800abe4:	ee18 0a10 	vmov	r0, s16
 800abe8:	4622      	mov	r2, r4
 800abea:	f005 fae1 	bl	80101b0 <_ungetc_r>
 800abee:	e7f4      	b.n	800abda <__svfscanf_r+0x10de>
 800abf0:	f1b8 0f00 	cmp.w	r8, #0
 800abf4:	d10c      	bne.n	800ac10 <__svfscanf_r+0x1114>
 800abf6:	f1ba 0f00 	cmp.w	sl, #0
 800abfa:	d1e5      	bne.n	800abc8 <__svfscanf_r+0x10cc>
 800abfc:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800ac00:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800ac04:	d1e2      	bne.n	800abcc <__svfscanf_r+0x10d0>
 800ac06:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ac0a:	f04f 0801 	mov.w	r8, #1
 800ac0e:	e7af      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac10:	f1b8 0f03 	cmp.w	r8, #3
 800ac14:	d0cd      	beq.n	800abb2 <__svfscanf_r+0x10b6>
 800ac16:	f1b8 0f05 	cmp.w	r8, #5
 800ac1a:	e7c9      	b.n	800abb0 <__svfscanf_r+0x10b4>
 800ac1c:	f1b8 0f02 	cmp.w	r8, #2
 800ac20:	d1cf      	bne.n	800abc2 <__svfscanf_r+0x10c6>
 800ac22:	f04f 0803 	mov.w	r8, #3
 800ac26:	e7a3      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac28:	f1b8 0f06 	cmp.w	r8, #6
 800ac2c:	d1c9      	bne.n	800abc2 <__svfscanf_r+0x10c6>
 800ac2e:	f04f 0807 	mov.w	r8, #7
 800ac32:	e79d      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac34:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 800ac38:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800ac3c:	d004      	beq.n	800ac48 <__svfscanf_r+0x114c>
 800ac3e:	0568      	lsls	r0, r5, #21
 800ac40:	d5bf      	bpl.n	800abc2 <__svfscanf_r+0x10c6>
 800ac42:	f1ba 0f00 	cmp.w	sl, #0
 800ac46:	d0c1      	beq.n	800abcc <__svfscanf_r+0x10d0>
 800ac48:	05a8      	lsls	r0, r5, #22
 800ac4a:	bf58      	it	pl
 800ac4c:	6a78      	ldrpl	r0, [r7, #36]	; 0x24
 800ac4e:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ac52:	bf5c      	itt	pl
 800ac54:	ebaa 0000 	subpl.w	r0, sl, r0
 800ac58:	e9c7 9003 	strdpl	r9, r0, [r7, #12]
 800ac5c:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 800ac60:	f04f 0a00 	mov.w	sl, #0
 800ac64:	e784      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac66:	f04f 0b03 	mov.w	fp, #3
 800ac6a:	e781      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac6c:	f04f 0b02 	mov.w	fp, #2
 800ac70:	e77e      	b.n	800ab70 <__svfscanf_r+0x1074>
 800ac72:	ee18 0a10 	vmov	r0, s16
 800ac76:	4621      	mov	r1, r4
 800ac78:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800ac7c:	f002 fb28 	bl	800d2d0 <__srefill_r>
 800ac80:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f43f af69 	beq.w	800ab5c <__svfscanf_r+0x1060>
 800ac8a:	e79a      	b.n	800abc2 <__svfscanf_r+0x10c6>
 800ac8c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac90:	2b06      	cmp	r3, #6
 800ac92:	d82d      	bhi.n	800acf0 <__svfscanf_r+0x11f4>
 800ac94:	f1b8 0f02 	cmp.w	r8, #2
 800ac98:	d83b      	bhi.n	800ad12 <__svfscanf_r+0x1216>
 800ac9a:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ac9e:	45a9      	cmp	r9, r5
 800aca0:	f67f a831 	bls.w	8009d06 <__svfscanf_r+0x20a>
 800aca4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800aca8:	ee18 0a10 	vmov	r0, s16
 800acac:	4622      	mov	r2, r4
 800acae:	f005 fa7f 	bl	80101b0 <_ungetc_r>
 800acb2:	e7f4      	b.n	800ac9e <__svfscanf_r+0x11a2>
 800acb4:	0800e60d 	.word	0x0800e60d
 800acb8:	08011d16 	.word	0x08011d16
 800acbc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800acc0:	633b      	str	r3, [r7, #48]	; 0x30
 800acc2:	ee18 0a10 	vmov	r0, s16
 800acc6:	4622      	mov	r2, r4
 800acc8:	f005 fa72 	bl	80101b0 <_ungetc_r>
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acd2:	fa5f fb8b 	uxtb.w	fp, fp
 800acd6:	f1bb 0f02 	cmp.w	fp, #2
 800acda:	d1ef      	bne.n	800acbc <__svfscanf_r+0x11c0>
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	f1a8 0803 	sub.w	r8, r8, #3
 800ace2:	fa5f f888 	uxtb.w	r8, r8
 800ace6:	eba3 0308 	sub.w	r3, r3, r8
 800acea:	eba9 0908 	sub.w	r9, r9, r8
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acf0:	05ea      	lsls	r2, r5, #23
 800acf2:	d530      	bpl.n	800ad56 <__svfscanf_r+0x125a>
 800acf4:	056b      	lsls	r3, r5, #21
 800acf6:	d50f      	bpl.n	800ad18 <__svfscanf_r+0x121c>
 800acf8:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800acfc:	45a9      	cmp	r9, r5
 800acfe:	f67f a802 	bls.w	8009d06 <__svfscanf_r+0x20a>
 800ad02:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ad06:	ee18 0a10 	vmov	r0, s16
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	f005 fa50 	bl	80101b0 <_ungetc_r>
 800ad10:	e7f4      	b.n	800acfc <__svfscanf_r+0x1200>
 800ad12:	46c3      	mov	fp, r8
 800ad14:	464b      	mov	r3, r9
 800ad16:	e7da      	b.n	800acce <__svfscanf_r+0x11d2>
 800ad18:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	2965      	cmp	r1, #101	; 0x65
 800ad20:	f109 38ff 	add.w	r8, r9, #4294967295
 800ad24:	f103 3bff 	add.w	fp, r3, #4294967295
 800ad28:	d00d      	beq.n	800ad46 <__svfscanf_r+0x124a>
 800ad2a:	2945      	cmp	r1, #69	; 0x45
 800ad2c:	d00b      	beq.n	800ad46 <__svfscanf_r+0x124a>
 800ad2e:	ee18 0a10 	vmov	r0, s16
 800ad32:	4622      	mov	r2, r4
 800ad34:	f005 fa3c 	bl	80101b0 <_ungetc_r>
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800ad3e:	f1a9 0802 	sub.w	r8, r9, #2
 800ad42:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad46:	ee18 0a10 	vmov	r0, s16
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	f005 fa30 	bl	80101b0 <_ungetc_r>
 800ad50:	46c1      	mov	r9, r8
 800ad52:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800ad56:	f015 0210 	ands.w	r2, r5, #16
 800ad5a:	f47e aef6 	bne.w	8009b4a <__svfscanf_r+0x4e>
 800ad5e:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800ad62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad66:	f889 2000 	strb.w	r2, [r9]
 800ad6a:	d11a      	bne.n	800ada2 <__svfscanf_r+0x12a6>
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	4553      	cmp	r3, sl
 800ad70:	eba3 020a 	sub.w	r2, r3, sl
 800ad74:	d123      	bne.n	800adbe <__svfscanf_r+0x12c2>
 800ad76:	ee18 0a10 	vmov	r0, s16
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800ad80:	f003 faa4 	bl	800e2cc <_strtod_r>
 800ad84:	07e8      	lsls	r0, r5, #31
 800ad86:	ec59 8b10 	vmov	r8, r9, d0
 800ad8a:	f106 0a04 	add.w	sl, r6, #4
 800ad8e:	d521      	bpl.n	800add4 <__svfscanf_r+0x12d8>
 800ad90:	6833      	ldr	r3, [r6, #0]
 800ad92:	ed83 0b00 	vstr	d0, [r3]
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	3301      	adds	r3, #1
 800ad9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad9c:	4656      	mov	r6, sl
 800ad9e:	f7fe bed4 	b.w	8009b4a <__svfscanf_r+0x4e>
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0e6      	beq.n	800ad76 <__svfscanf_r+0x127a>
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	230a      	movs	r3, #10
 800adac:	ee18 0a10 	vmov	r0, s16
 800adb0:	3101      	adds	r1, #1
 800adb2:	f003 fb15 	bl	800e3e0 <_strtol_r>
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800adbc:	1ac2      	subs	r2, r0, r3
 800adbe:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800adc2:	4599      	cmp	r9, r3
 800adc4:	bf28      	it	cs
 800adc6:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800adca:	491b      	ldr	r1, [pc, #108]	; (800ae38 <__svfscanf_r+0x133c>)
 800adcc:	4648      	mov	r0, r9
 800adce:	f002 fbc5 	bl	800d55c <sprintf>
 800add2:	e7d0      	b.n	800ad76 <__svfscanf_r+0x127a>
 800add4:	07a9      	lsls	r1, r5, #30
 800add6:	6836      	ldr	r6, [r6, #0]
 800add8:	d502      	bpl.n	800ade0 <__svfscanf_r+0x12e4>
 800adda:	ed86 0b00 	vstr	d0, [r6]
 800adde:	e7da      	b.n	800ad96 <__svfscanf_r+0x129a>
 800ade0:	ee10 2a10 	vmov	r2, s0
 800ade4:	ee10 0a10 	vmov	r0, s0
 800ade8:	464b      	mov	r3, r9
 800adea:	4649      	mov	r1, r9
 800adec:	f7f5 feae 	bl	8000b4c <__aeabi_dcmpun>
 800adf0:	b128      	cbz	r0, 800adfe <__svfscanf_r+0x1302>
 800adf2:	4812      	ldr	r0, [pc, #72]	; (800ae3c <__svfscanf_r+0x1340>)
 800adf4:	f002 fb60 	bl	800d4b8 <nanf>
 800adf8:	ed86 0a00 	vstr	s0, [r6]
 800adfc:	e7cb      	b.n	800ad96 <__svfscanf_r+0x129a>
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 ff01 	bl	8000c08 <__aeabi_d2f>
 800ae06:	6030      	str	r0, [r6, #0]
 800ae08:	e7c5      	b.n	800ad96 <__svfscanf_r+0x129a>
 800ae0a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	f7fb fcaa 	bl	8006768 <free>
 800ae14:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ae18:	3401      	adds	r4, #1
 800ae1a:	601e      	str	r6, [r3, #0]
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	681d      	ldr	r5, [r3, #0]
 800ae20:	88db      	ldrh	r3, [r3, #6]
 800ae22:	42a3      	cmp	r3, r4
 800ae24:	dcf1      	bgt.n	800ae0a <__svfscanf_r+0x130e>
 800ae26:	f7fe bf7d 	b.w	8009d24 <__svfscanf_r+0x228>
 800ae2a:	2400      	movs	r4, #0
 800ae2c:	4626      	mov	r6, r4
 800ae2e:	e7f5      	b.n	800ae1c <__svfscanf_r+0x1320>
 800ae30:	f7fb fc9a 	bl	8006768 <free>
 800ae34:	f7fe bf7b 	b.w	8009d2e <__svfscanf_r+0x232>
 800ae38:	08011d10 	.word	0x08011d10
 800ae3c:	08011d57 	.word	0x08011d57

0800ae40 <_vfscanf_r>:
 800ae40:	b530      	push	{r4, r5, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	b085      	sub	sp, #20
 800ae46:	b148      	cbz	r0, 800ae5c <_vfscanf_r+0x1c>
 800ae48:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800ae4a:	b93d      	cbnz	r5, 800ae5c <_vfscanf_r+0x1c>
 800ae4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae50:	9101      	str	r1, [sp, #4]
 800ae52:	f001 f80d 	bl	800be70 <__sinit>
 800ae56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae5a:	9901      	ldr	r1, [sp, #4]
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	b005      	add	sp, #20
 800ae60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae64:	f7fe be4a 	b.w	8009afc <__svfscanf_r>

0800ae68 <__swsetup_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4b2a      	ldr	r3, [pc, #168]	; (800af14 <__swsetup_r+0xac>)
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	460c      	mov	r4, r1
 800ae72:	b118      	cbz	r0, 800ae7c <__swsetup_r+0x14>
 800ae74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ae76:	b90b      	cbnz	r3, 800ae7c <__swsetup_r+0x14>
 800ae78:	f000 fffa 	bl	800be70 <__sinit>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae82:	0718      	lsls	r0, r3, #28
 800ae84:	d422      	bmi.n	800aecc <__swsetup_r+0x64>
 800ae86:	06d9      	lsls	r1, r3, #27
 800ae88:	d407      	bmi.n	800ae9a <__swsetup_r+0x32>
 800ae8a:	2309      	movs	r3, #9
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e034      	b.n	800af04 <__swsetup_r+0x9c>
 800ae9a:	0758      	lsls	r0, r3, #29
 800ae9c:	d512      	bpl.n	800aec4 <__swsetup_r+0x5c>
 800ae9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aea0:	b141      	cbz	r1, 800aeb4 <__swsetup_r+0x4c>
 800aea2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800aea6:	4299      	cmp	r1, r3
 800aea8:	d002      	beq.n	800aeb0 <__swsetup_r+0x48>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7fb fa6c 	bl	8006388 <_free_r>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	2300      	movs	r3, #0
 800aebe:	6063      	str	r3, [r4, #4]
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f043 0308 	orr.w	r3, r3, #8
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	b94b      	cbnz	r3, 800aee4 <__swsetup_r+0x7c>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeda:	d003      	beq.n	800aee4 <__swsetup_r+0x7c>
 800aedc:	4621      	mov	r1, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	f001 fb3c 	bl	800c55c <__smakebuf_r>
 800aee4:	89a0      	ldrh	r0, [r4, #12]
 800aee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeea:	f010 0301 	ands.w	r3, r0, #1
 800aeee:	d00a      	beq.n	800af06 <__swsetup_r+0x9e>
 800aef0:	2300      	movs	r3, #0
 800aef2:	60a3      	str	r3, [r4, #8]
 800aef4:	6963      	ldr	r3, [r4, #20]
 800aef6:	425b      	negs	r3, r3
 800aef8:	61a3      	str	r3, [r4, #24]
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	b943      	cbnz	r3, 800af10 <__swsetup_r+0xa8>
 800aefe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af02:	d1c4      	bne.n	800ae8e <__swsetup_r+0x26>
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	0781      	lsls	r1, r0, #30
 800af08:	bf58      	it	pl
 800af0a:	6963      	ldrpl	r3, [r4, #20]
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	e7f4      	b.n	800aefa <__swsetup_r+0x92>
 800af10:	2000      	movs	r0, #0
 800af12:	e7f7      	b.n	800af04 <__swsetup_r+0x9c>
 800af14:	2000001c 	.word	0x2000001c

0800af18 <register_fini>:
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <register_fini+0xc>)
 800af1a:	b113      	cbz	r3, 800af22 <register_fini+0xa>
 800af1c:	4802      	ldr	r0, [pc, #8]	; (800af28 <register_fini+0x10>)
 800af1e:	f000 b833 	b.w	800af88 <atexit>
 800af22:	4770      	bx	lr
 800af24:	00000000 	.word	0x00000000
 800af28:	0800bec1 	.word	0x0800bec1

0800af2c <asctime>:
 800af2c:	4b02      	ldr	r3, [pc, #8]	; (800af38 <asctime+0xc>)
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	3160      	adds	r1, #96	; 0x60
 800af32:	f000 b803 	b.w	800af3c <asctime_r>
 800af36:	bf00      	nop
 800af38:	2000001c 	.word	0x2000001c

0800af3c <asctime_r>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	460c      	mov	r4, r1
 800af40:	6941      	ldr	r1, [r0, #20]
 800af42:	6903      	ldr	r3, [r0, #16]
 800af44:	6982      	ldr	r2, [r0, #24]
 800af46:	b086      	sub	sp, #24
 800af48:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800af4c:	9104      	str	r1, [sp, #16]
 800af4e:	6801      	ldr	r1, [r0, #0]
 800af50:	9103      	str	r1, [sp, #12]
 800af52:	6841      	ldr	r1, [r0, #4]
 800af54:	9102      	str	r1, [sp, #8]
 800af56:	6881      	ldr	r1, [r0, #8]
 800af58:	9101      	str	r1, [sp, #4]
 800af5a:	68c1      	ldr	r1, [r0, #12]
 800af5c:	9100      	str	r1, [sp, #0]
 800af5e:	4907      	ldr	r1, [pc, #28]	; (800af7c <asctime_r+0x40>)
 800af60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800af64:	440b      	add	r3, r1
 800af66:	4906      	ldr	r1, [pc, #24]	; (800af80 <asctime_r+0x44>)
 800af68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800af6c:	440a      	add	r2, r1
 800af6e:	4620      	mov	r0, r4
 800af70:	4904      	ldr	r1, [pc, #16]	; (800af84 <asctime_r+0x48>)
 800af72:	f002 faa7 	bl	800d4c4 <siprintf>
 800af76:	4620      	mov	r0, r4
 800af78:	b006      	add	sp, #24
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	08011d6d 	.word	0x08011d6d
 800af80:	08011d58 	.word	0x08011d58
 800af84:	08011d38 	.word	0x08011d38

0800af88 <atexit>:
 800af88:	2300      	movs	r3, #0
 800af8a:	4601      	mov	r1, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	4618      	mov	r0, r3
 800af90:	f005 beb8 	b.w	8010d04 <__register_exitproc>

0800af94 <quorem>:
 800af94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	6903      	ldr	r3, [r0, #16]
 800af9a:	690c      	ldr	r4, [r1, #16]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	4607      	mov	r7, r0
 800afa0:	f2c0 8081 	blt.w	800b0a6 <quorem+0x112>
 800afa4:	3c01      	subs	r4, #1
 800afa6:	f101 0814 	add.w	r8, r1, #20
 800afaa:	f100 0514 	add.w	r5, r0, #20
 800afae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afbc:	3301      	adds	r3, #1
 800afbe:	429a      	cmp	r2, r3
 800afc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afc8:	fbb2 f6f3 	udiv	r6, r2, r3
 800afcc:	d331      	bcc.n	800b032 <quorem+0x9e>
 800afce:	f04f 0e00 	mov.w	lr, #0
 800afd2:	4640      	mov	r0, r8
 800afd4:	46ac      	mov	ip, r5
 800afd6:	46f2      	mov	sl, lr
 800afd8:	f850 2b04 	ldr.w	r2, [r0], #4
 800afdc:	b293      	uxth	r3, r2
 800afde:	fb06 e303 	mla	r3, r6, r3, lr
 800afe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	ebaa 0303 	sub.w	r3, sl, r3
 800afec:	0c12      	lsrs	r2, r2, #16
 800afee:	f8dc a000 	ldr.w	sl, [ip]
 800aff2:	fb06 e202 	mla	r2, r6, r2, lr
 800aff6:	fa13 f38a 	uxtah	r3, r3, sl
 800affa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800affe:	fa1f fa82 	uxth.w	sl, r2
 800b002:	f8dc 2000 	ldr.w	r2, [ip]
 800b006:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b00a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b00e:	b29b      	uxth	r3, r3
 800b010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b014:	4581      	cmp	r9, r0
 800b016:	f84c 3b04 	str.w	r3, [ip], #4
 800b01a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b01e:	d2db      	bcs.n	800afd8 <quorem+0x44>
 800b020:	f855 300b 	ldr.w	r3, [r5, fp]
 800b024:	b92b      	cbnz	r3, 800b032 <quorem+0x9e>
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	3b04      	subs	r3, #4
 800b02a:	429d      	cmp	r5, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	d32e      	bcc.n	800b08e <quorem+0xfa>
 800b030:	613c      	str	r4, [r7, #16]
 800b032:	4638      	mov	r0, r7
 800b034:	f001 fda0 	bl	800cb78 <__mcmp>
 800b038:	2800      	cmp	r0, #0
 800b03a:	db24      	blt.n	800b086 <quorem+0xf2>
 800b03c:	3601      	adds	r6, #1
 800b03e:	4628      	mov	r0, r5
 800b040:	f04f 0c00 	mov.w	ip, #0
 800b044:	f858 2b04 	ldr.w	r2, [r8], #4
 800b048:	f8d0 e000 	ldr.w	lr, [r0]
 800b04c:	b293      	uxth	r3, r2
 800b04e:	ebac 0303 	sub.w	r3, ip, r3
 800b052:	0c12      	lsrs	r2, r2, #16
 800b054:	fa13 f38e 	uxtah	r3, r3, lr
 800b058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b060:	b29b      	uxth	r3, r3
 800b062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b066:	45c1      	cmp	r9, r8
 800b068:	f840 3b04 	str.w	r3, [r0], #4
 800b06c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b070:	d2e8      	bcs.n	800b044 <quorem+0xb0>
 800b072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b07a:	b922      	cbnz	r2, 800b086 <quorem+0xf2>
 800b07c:	3b04      	subs	r3, #4
 800b07e:	429d      	cmp	r5, r3
 800b080:	461a      	mov	r2, r3
 800b082:	d30a      	bcc.n	800b09a <quorem+0x106>
 800b084:	613c      	str	r4, [r7, #16]
 800b086:	4630      	mov	r0, r6
 800b088:	b003      	add	sp, #12
 800b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08e:	6812      	ldr	r2, [r2, #0]
 800b090:	3b04      	subs	r3, #4
 800b092:	2a00      	cmp	r2, #0
 800b094:	d1cc      	bne.n	800b030 <quorem+0x9c>
 800b096:	3c01      	subs	r4, #1
 800b098:	e7c7      	b.n	800b02a <quorem+0x96>
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	3b04      	subs	r3, #4
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d1f0      	bne.n	800b084 <quorem+0xf0>
 800b0a2:	3c01      	subs	r4, #1
 800b0a4:	e7eb      	b.n	800b07e <quorem+0xea>
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	e7ee      	b.n	800b088 <quorem+0xf4>
 800b0aa:	0000      	movs	r0, r0
 800b0ac:	0000      	movs	r0, r0
	...

0800b0b0 <_dtoa_r>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	ed2d 8b02 	vpush	{d8}
 800b0b8:	b095      	sub	sp, #84	; 0x54
 800b0ba:	ec57 6b10 	vmov	r6, r7, d0
 800b0be:	9105      	str	r1, [sp, #20]
 800b0c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b0c2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ce:	b141      	cbz	r1, 800b0e2 <_dtoa_r+0x32>
 800b0d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0d2:	604a      	str	r2, [r1, #4]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4093      	lsls	r3, r2
 800b0d8:	608b      	str	r3, [r1, #8]
 800b0da:	f001 faf8 	bl	800c6ce <_Bfree>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6423      	str	r3, [r4, #64]	; 0x40
 800b0e2:	1e3b      	subs	r3, r7, #0
 800b0e4:	bfb9      	ittee	lt
 800b0e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0ea:	9303      	strlt	r3, [sp, #12]
 800b0ec:	2300      	movge	r3, #0
 800b0ee:	602b      	strge	r3, [r5, #0]
 800b0f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0f4:	4ba2      	ldr	r3, [pc, #648]	; (800b380 <_dtoa_r+0x2d0>)
 800b0f6:	bfbc      	itt	lt
 800b0f8:	2201      	movlt	r2, #1
 800b0fa:	602a      	strlt	r2, [r5, #0]
 800b0fc:	ea33 0309 	bics.w	r3, r3, r9
 800b100:	d11b      	bne.n	800b13a <_dtoa_r+0x8a>
 800b102:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b104:	f242 730f 	movw	r3, #9999	; 0x270f
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b10e:	4333      	orrs	r3, r6
 800b110:	f000 8578 	beq.w	800bc04 <_dtoa_r+0xb54>
 800b114:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b116:	b90b      	cbnz	r3, 800b11c <_dtoa_r+0x6c>
 800b118:	4b9a      	ldr	r3, [pc, #616]	; (800b384 <_dtoa_r+0x2d4>)
 800b11a:	e024      	b.n	800b166 <_dtoa_r+0xb6>
 800b11c:	4b99      	ldr	r3, [pc, #612]	; (800b384 <_dtoa_r+0x2d4>)
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	3303      	adds	r3, #3
 800b122:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	9800      	ldr	r0, [sp, #0]
 800b128:	b015      	add	sp, #84	; 0x54
 800b12a:	ecbd 8b02 	vpop	{d8}
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	4b95      	ldr	r3, [pc, #596]	; (800b388 <_dtoa_r+0x2d8>)
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	e7f3      	b.n	800b122 <_dtoa_r+0x72>
 800b13a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	ec51 0b17 	vmov	r0, r1, d7
 800b144:	2300      	movs	r3, #0
 800b146:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b14a:	f7f5 fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 800b14e:	4680      	mov	r8, r0
 800b150:	b158      	cbz	r0, 800b16a <_dtoa_r+0xba>
 800b152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b154:	2301      	movs	r3, #1
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 854f 	beq.w	800bbfe <_dtoa_r+0xb4e>
 800b160:	488a      	ldr	r0, [pc, #552]	; (800b38c <_dtoa_r+0x2dc>)
 800b162:	6018      	str	r0, [r3, #0]
 800b164:	1e43      	subs	r3, r0, #1
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	e7dd      	b.n	800b126 <_dtoa_r+0x76>
 800b16a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b16e:	aa12      	add	r2, sp, #72	; 0x48
 800b170:	a913      	add	r1, sp, #76	; 0x4c
 800b172:	4620      	mov	r0, r4
 800b174:	f001 fe20 	bl	800cdb8 <__d2b>
 800b178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b17c:	4683      	mov	fp, r0
 800b17e:	2d00      	cmp	r5, #0
 800b180:	d07c      	beq.n	800b27c <_dtoa_r+0x1cc>
 800b182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b184:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b190:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b194:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b198:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b19c:	4b7c      	ldr	r3, [pc, #496]	; (800b390 <_dtoa_r+0x2e0>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	f7f5 f880 	bl	80002a8 <__aeabi_dsub>
 800b1a8:	a36f      	add	r3, pc, #444	; (adr r3, 800b368 <_dtoa_r+0x2b8>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa33 	bl	8000618 <__aeabi_dmul>
 800b1b2:	a36f      	add	r3, pc, #444	; (adr r3, 800b370 <_dtoa_r+0x2c0>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f878 	bl	80002ac <__adddf3>
 800b1bc:	4606      	mov	r6, r0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	f7f5 f9bf 	bl	8000544 <__aeabi_i2d>
 800b1c6:	a36c      	add	r3, pc, #432	; (adr r3, 800b378 <_dtoa_r+0x2c8>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 fa24 	bl	8000618 <__aeabi_dmul>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	f7f5 f868 	bl	80002ac <__adddf3>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	f7f5 fcca 	bl	8000b78 <__aeabi_d2iz>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 fc85 	bl	8000afc <__aeabi_dcmplt>
 800b1f2:	b148      	cbz	r0, 800b208 <_dtoa_r+0x158>
 800b1f4:	4650      	mov	r0, sl
 800b1f6:	f7f5 f9a5 	bl	8000544 <__aeabi_i2d>
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	f7f5 fc73 	bl	8000ae8 <__aeabi_dcmpeq>
 800b202:	b908      	cbnz	r0, 800b208 <_dtoa_r+0x158>
 800b204:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b208:	f1ba 0f16 	cmp.w	sl, #22
 800b20c:	d854      	bhi.n	800b2b8 <_dtoa_r+0x208>
 800b20e:	4b61      	ldr	r3, [pc, #388]	; (800b394 <_dtoa_r+0x2e4>)
 800b210:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b21c:	f7f5 fc6e 	bl	8000afc <__aeabi_dcmplt>
 800b220:	2800      	cmp	r0, #0
 800b222:	d04b      	beq.n	800b2bc <_dtoa_r+0x20c>
 800b224:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b228:	2300      	movs	r3, #0
 800b22a:	930e      	str	r3, [sp, #56]	; 0x38
 800b22c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b22e:	1b5d      	subs	r5, r3, r5
 800b230:	1e6b      	subs	r3, r5, #1
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	bf43      	ittte	mi
 800b236:	2300      	movmi	r3, #0
 800b238:	f1c5 0801 	rsbmi	r8, r5, #1
 800b23c:	9304      	strmi	r3, [sp, #16]
 800b23e:	f04f 0800 	movpl.w	r8, #0
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	db3b      	blt.n	800b2c0 <_dtoa_r+0x210>
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b24e:	4453      	add	r3, sl
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	2300      	movs	r3, #0
 800b254:	9306      	str	r3, [sp, #24]
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	2b09      	cmp	r3, #9
 800b25a:	d86a      	bhi.n	800b332 <_dtoa_r+0x282>
 800b25c:	2b05      	cmp	r3, #5
 800b25e:	bfc4      	itt	gt
 800b260:	3b04      	subgt	r3, #4
 800b262:	9305      	strgt	r3, [sp, #20]
 800b264:	9b05      	ldr	r3, [sp, #20]
 800b266:	f1a3 0302 	sub.w	r3, r3, #2
 800b26a:	bfcc      	ite	gt
 800b26c:	2500      	movgt	r5, #0
 800b26e:	2501      	movle	r5, #1
 800b270:	2b03      	cmp	r3, #3
 800b272:	d86a      	bhi.n	800b34a <_dtoa_r+0x29a>
 800b274:	e8df f003 	tbb	[pc, r3]
 800b278:	5b4d4f2c 	.word	0x5b4d4f2c
 800b27c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b280:	441d      	add	r5, r3
 800b282:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b286:	2b20      	cmp	r3, #32
 800b288:	bfc1      	itttt	gt
 800b28a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b28e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b292:	fa09 f303 	lslgt.w	r3, r9, r3
 800b296:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b29a:	bfda      	itte	le
 800b29c:	f1c3 0320 	rsble	r3, r3, #32
 800b2a0:	fa06 f003 	lslle.w	r0, r6, r3
 800b2a4:	4318      	orrgt	r0, r3
 800b2a6:	f7f5 f93d 	bl	8000524 <__aeabi_ui2d>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2b2:	3d01      	subs	r5, #1
 800b2b4:	9310      	str	r3, [sp, #64]	; 0x40
 800b2b6:	e771      	b.n	800b19c <_dtoa_r+0xec>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e7b6      	b.n	800b22a <_dtoa_r+0x17a>
 800b2bc:	900e      	str	r0, [sp, #56]	; 0x38
 800b2be:	e7b5      	b.n	800b22c <_dtoa_r+0x17c>
 800b2c0:	f1ca 0300 	rsb	r3, sl, #0
 800b2c4:	9306      	str	r3, [sp, #24]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	eba8 080a 	sub.w	r8, r8, sl
 800b2cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b2ce:	e7c2      	b.n	800b256 <_dtoa_r+0x1a6>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9308      	str	r3, [sp, #32]
 800b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dc3a      	bgt.n	800b350 <_dtoa_r+0x2a0>
 800b2da:	f04f 0901 	mov.w	r9, #1
 800b2de:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6462      	str	r2, [r4, #68]	; 0x44
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	f102 0014 	add.w	r0, r2, #20
 800b2f2:	4298      	cmp	r0, r3
 800b2f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b2f6:	d931      	bls.n	800b35c <_dtoa_r+0x2ac>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 f9c3 	bl	800c684 <_Balloc>
 800b2fe:	9000      	str	r0, [sp, #0]
 800b300:	2800      	cmp	r0, #0
 800b302:	d14d      	bne.n	800b3a0 <_dtoa_r+0x2f0>
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <_dtoa_r+0x2e8>)
 800b306:	4602      	mov	r2, r0
 800b308:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b30c:	4823      	ldr	r0, [pc, #140]	; (800b39c <_dtoa_r+0x2ec>)
 800b30e:	f005 fd39 	bl	8010d84 <__assert_func>
 800b312:	2301      	movs	r3, #1
 800b314:	e7dd      	b.n	800b2d2 <_dtoa_r+0x222>
 800b316:	2300      	movs	r3, #0
 800b318:	9308      	str	r3, [sp, #32]
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	eb0a 0903 	add.w	r9, sl, r3
 800b320:	f109 0301 	add.w	r3, r9, #1
 800b324:	2b01      	cmp	r3, #1
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	bfb8      	it	lt
 800b32a:	2301      	movlt	r3, #1
 800b32c:	e7dc      	b.n	800b2e8 <_dtoa_r+0x238>
 800b32e:	2301      	movs	r3, #1
 800b330:	e7f2      	b.n	800b318 <_dtoa_r+0x268>
 800b332:	2501      	movs	r5, #1
 800b334:	2300      	movs	r3, #0
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	9508      	str	r5, [sp, #32]
 800b33a:	f04f 39ff 	mov.w	r9, #4294967295
 800b33e:	2200      	movs	r2, #0
 800b340:	f8cd 9004 	str.w	r9, [sp, #4]
 800b344:	2312      	movs	r3, #18
 800b346:	9209      	str	r2, [sp, #36]	; 0x24
 800b348:	e7ce      	b.n	800b2e8 <_dtoa_r+0x238>
 800b34a:	2301      	movs	r3, #1
 800b34c:	9308      	str	r3, [sp, #32]
 800b34e:	e7f4      	b.n	800b33a <_dtoa_r+0x28a>
 800b350:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b354:	f8cd 9004 	str.w	r9, [sp, #4]
 800b358:	464b      	mov	r3, r9
 800b35a:	e7c5      	b.n	800b2e8 <_dtoa_r+0x238>
 800b35c:	3101      	adds	r1, #1
 800b35e:	6461      	str	r1, [r4, #68]	; 0x44
 800b360:	0052      	lsls	r2, r2, #1
 800b362:	e7c4      	b.n	800b2ee <_dtoa_r+0x23e>
 800b364:	f3af 8000 	nop.w
 800b368:	636f4361 	.word	0x636f4361
 800b36c:	3fd287a7 	.word	0x3fd287a7
 800b370:	8b60c8b3 	.word	0x8b60c8b3
 800b374:	3fc68a28 	.word	0x3fc68a28
 800b378:	509f79fb 	.word	0x509f79fb
 800b37c:	3fd34413 	.word	0x3fd34413
 800b380:	7ff00000 	.word	0x7ff00000
 800b384:	08011e92 	.word	0x08011e92
 800b388:	08011e96 	.word	0x08011e96
 800b38c:	08011c93 	.word	0x08011c93
 800b390:	3ff80000 	.word	0x3ff80000
 800b394:	08011fa8 	.word	0x08011fa8
 800b398:	08011e9f 	.word	0x08011e9f
 800b39c:	08011eb0 	.word	0x08011eb0
 800b3a0:	9b00      	ldr	r3, [sp, #0]
 800b3a2:	6423      	str	r3, [r4, #64]	; 0x40
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	2b0e      	cmp	r3, #14
 800b3a8:	f200 80ad 	bhi.w	800b506 <_dtoa_r+0x456>
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	f000 80aa 	beq.w	800b506 <_dtoa_r+0x456>
 800b3b2:	f1ba 0f00 	cmp.w	sl, #0
 800b3b6:	dd36      	ble.n	800b426 <_dtoa_r+0x376>
 800b3b8:	4ac2      	ldr	r2, [pc, #776]	; (800b6c4 <_dtoa_r+0x614>)
 800b3ba:	f00a 030f 	and.w	r3, sl, #15
 800b3be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3c2:	ed93 7b00 	vldr	d7, [r3]
 800b3c6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b3ca:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b3ce:	eeb0 8a47 	vmov.f32	s16, s14
 800b3d2:	eef0 8a67 	vmov.f32	s17, s15
 800b3d6:	d016      	beq.n	800b406 <_dtoa_r+0x356>
 800b3d8:	4bbb      	ldr	r3, [pc, #748]	; (800b6c8 <_dtoa_r+0x618>)
 800b3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3e2:	f7f5 fa43 	bl	800086c <__aeabi_ddiv>
 800b3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ea:	f007 070f 	and.w	r7, r7, #15
 800b3ee:	2503      	movs	r5, #3
 800b3f0:	4eb5      	ldr	r6, [pc, #724]	; (800b6c8 <_dtoa_r+0x618>)
 800b3f2:	b957      	cbnz	r7, 800b40a <_dtoa_r+0x35a>
 800b3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f8:	ec53 2b18 	vmov	r2, r3, d8
 800b3fc:	f7f5 fa36 	bl	800086c <__aeabi_ddiv>
 800b400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b404:	e029      	b.n	800b45a <_dtoa_r+0x3aa>
 800b406:	2502      	movs	r5, #2
 800b408:	e7f2      	b.n	800b3f0 <_dtoa_r+0x340>
 800b40a:	07f9      	lsls	r1, r7, #31
 800b40c:	d508      	bpl.n	800b420 <_dtoa_r+0x370>
 800b40e:	ec51 0b18 	vmov	r0, r1, d8
 800b412:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b416:	f7f5 f8ff 	bl	8000618 <__aeabi_dmul>
 800b41a:	ec41 0b18 	vmov	d8, r0, r1
 800b41e:	3501      	adds	r5, #1
 800b420:	107f      	asrs	r7, r7, #1
 800b422:	3608      	adds	r6, #8
 800b424:	e7e5      	b.n	800b3f2 <_dtoa_r+0x342>
 800b426:	f000 80a6 	beq.w	800b576 <_dtoa_r+0x4c6>
 800b42a:	f1ca 0600 	rsb	r6, sl, #0
 800b42e:	4ba5      	ldr	r3, [pc, #660]	; (800b6c4 <_dtoa_r+0x614>)
 800b430:	4fa5      	ldr	r7, [pc, #660]	; (800b6c8 <_dtoa_r+0x618>)
 800b432:	f006 020f 	and.w	r2, r6, #15
 800b436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b442:	f7f5 f8e9 	bl	8000618 <__aeabi_dmul>
 800b446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b44a:	1136      	asrs	r6, r6, #4
 800b44c:	2300      	movs	r3, #0
 800b44e:	2502      	movs	r5, #2
 800b450:	2e00      	cmp	r6, #0
 800b452:	f040 8085 	bne.w	800b560 <_dtoa_r+0x4b0>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1d2      	bne.n	800b400 <_dtoa_r+0x350>
 800b45a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 808c 	beq.w	800b57a <_dtoa_r+0x4ca>
 800b462:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b466:	4b99      	ldr	r3, [pc, #612]	; (800b6cc <_dtoa_r+0x61c>)
 800b468:	2200      	movs	r2, #0
 800b46a:	4630      	mov	r0, r6
 800b46c:	4639      	mov	r1, r7
 800b46e:	f7f5 fb45 	bl	8000afc <__aeabi_dcmplt>
 800b472:	2800      	cmp	r0, #0
 800b474:	f000 8081 	beq.w	800b57a <_dtoa_r+0x4ca>
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d07d      	beq.n	800b57a <_dtoa_r+0x4ca>
 800b47e:	f1b9 0f00 	cmp.w	r9, #0
 800b482:	dd3c      	ble.n	800b4fe <_dtoa_r+0x44e>
 800b484:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	2200      	movs	r2, #0
 800b48c:	4b90      	ldr	r3, [pc, #576]	; (800b6d0 <_dtoa_r+0x620>)
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 f8c1 	bl	8000618 <__aeabi_dmul>
 800b496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b49a:	3501      	adds	r5, #1
 800b49c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b4a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7f5 f84d 	bl	8000544 <__aeabi_i2d>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	f7f5 f8b3 	bl	8000618 <__aeabi_dmul>
 800b4b2:	4b88      	ldr	r3, [pc, #544]	; (800b6d4 <_dtoa_r+0x624>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f7f4 fef9 	bl	80002ac <__adddf3>
 800b4ba:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b4be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c2:	9303      	str	r3, [sp, #12]
 800b4c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d15c      	bne.n	800b584 <_dtoa_r+0x4d4>
 800b4ca:	4b83      	ldr	r3, [pc, #524]	; (800b6d8 <_dtoa_r+0x628>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	f7f4 fee9 	bl	80002a8 <__aeabi_dsub>
 800b4d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	f7f5 fb2b 	bl	8000b38 <__aeabi_dcmpgt>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f040 8295 	bne.w	800ba12 <_dtoa_r+0x962>
 800b4e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 fb02 	bl	8000afc <__aeabi_dcmplt>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	f040 8287 	bne.w	800ba0c <_dtoa_r+0x95c>
 800b4fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b502:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b506:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f2c0 8157 	blt.w	800b7bc <_dtoa_r+0x70c>
 800b50e:	f1ba 0f0e 	cmp.w	sl, #14
 800b512:	f300 8153 	bgt.w	800b7bc <_dtoa_r+0x70c>
 800b516:	4b6b      	ldr	r3, [pc, #428]	; (800b6c4 <_dtoa_r+0x614>)
 800b518:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b51c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b522:	2b00      	cmp	r3, #0
 800b524:	f280 80e2 	bge.w	800b6ec <_dtoa_r+0x63c>
 800b528:	9b01      	ldr	r3, [sp, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f300 80de 	bgt.w	800b6ec <_dtoa_r+0x63c>
 800b530:	f040 826c 	bne.w	800ba0c <_dtoa_r+0x95c>
 800b534:	4b68      	ldr	r3, [pc, #416]	; (800b6d8 <_dtoa_r+0x628>)
 800b536:	2200      	movs	r2, #0
 800b538:	4640      	mov	r0, r8
 800b53a:	4649      	mov	r1, r9
 800b53c:	f7f5 f86c 	bl	8000618 <__aeabi_dmul>
 800b540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b544:	f7f5 faee 	bl	8000b24 <__aeabi_dcmpge>
 800b548:	9e01      	ldr	r6, [sp, #4]
 800b54a:	4637      	mov	r7, r6
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f040 8242 	bne.w	800b9d6 <_dtoa_r+0x926>
 800b552:	9d00      	ldr	r5, [sp, #0]
 800b554:	2331      	movs	r3, #49	; 0x31
 800b556:	f805 3b01 	strb.w	r3, [r5], #1
 800b55a:	f10a 0a01 	add.w	sl, sl, #1
 800b55e:	e23e      	b.n	800b9de <_dtoa_r+0x92e>
 800b560:	07f2      	lsls	r2, r6, #31
 800b562:	d505      	bpl.n	800b570 <_dtoa_r+0x4c0>
 800b564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b568:	f7f5 f856 	bl	8000618 <__aeabi_dmul>
 800b56c:	3501      	adds	r5, #1
 800b56e:	2301      	movs	r3, #1
 800b570:	1076      	asrs	r6, r6, #1
 800b572:	3708      	adds	r7, #8
 800b574:	e76c      	b.n	800b450 <_dtoa_r+0x3a0>
 800b576:	2502      	movs	r5, #2
 800b578:	e76f      	b.n	800b45a <_dtoa_r+0x3aa>
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	f8cd a01c 	str.w	sl, [sp, #28]
 800b580:	930c      	str	r3, [sp, #48]	; 0x30
 800b582:	e78d      	b.n	800b4a0 <_dtoa_r+0x3f0>
 800b584:	9900      	ldr	r1, [sp, #0]
 800b586:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b58a:	4b4e      	ldr	r3, [pc, #312]	; (800b6c4 <_dtoa_r+0x614>)
 800b58c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b590:	4401      	add	r1, r0
 800b592:	9102      	str	r1, [sp, #8]
 800b594:	9908      	ldr	r1, [sp, #32]
 800b596:	eeb0 8a47 	vmov.f32	s16, s14
 800b59a:	eef0 8a67 	vmov.f32	s17, s15
 800b59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d045      	beq.n	800b636 <_dtoa_r+0x586>
 800b5aa:	494c      	ldr	r1, [pc, #304]	; (800b6dc <_dtoa_r+0x62c>)
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	f7f5 f95d 	bl	800086c <__aeabi_ddiv>
 800b5b2:	ec53 2b18 	vmov	r2, r3, d8
 800b5b6:	f7f4 fe77 	bl	80002a8 <__aeabi_dsub>
 800b5ba:	9d00      	ldr	r5, [sp, #0]
 800b5bc:	ec41 0b18 	vmov	d8, r0, r1
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7f5 fad8 	bl	8000b78 <__aeabi_d2iz>
 800b5c8:	900c      	str	r0, [sp, #48]	; 0x30
 800b5ca:	f7f4 ffbb 	bl	8000544 <__aeabi_i2d>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	f7f4 fe67 	bl	80002a8 <__aeabi_dsub>
 800b5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5dc:	3330      	adds	r3, #48	; 0x30
 800b5de:	f805 3b01 	strb.w	r3, [r5], #1
 800b5e2:	ec53 2b18 	vmov	r2, r3, d8
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	f7f5 fa87 	bl	8000afc <__aeabi_dcmplt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d165      	bne.n	800b6be <_dtoa_r+0x60e>
 800b5f2:	4632      	mov	r2, r6
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	4935      	ldr	r1, [pc, #212]	; (800b6cc <_dtoa_r+0x61c>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f4 fe55 	bl	80002a8 <__aeabi_dsub>
 800b5fe:	ec53 2b18 	vmov	r2, r3, d8
 800b602:	f7f5 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800b606:	2800      	cmp	r0, #0
 800b608:	f040 80b8 	bne.w	800b77c <_dtoa_r+0x6cc>
 800b60c:	9b02      	ldr	r3, [sp, #8]
 800b60e:	429d      	cmp	r5, r3
 800b610:	f43f af75 	beq.w	800b4fe <_dtoa_r+0x44e>
 800b614:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <_dtoa_r+0x620>)
 800b616:	ec51 0b18 	vmov	r0, r1, d8
 800b61a:	2200      	movs	r2, #0
 800b61c:	f7f4 fffc 	bl	8000618 <__aeabi_dmul>
 800b620:	4b2b      	ldr	r3, [pc, #172]	; (800b6d0 <_dtoa_r+0x620>)
 800b622:	ec41 0b18 	vmov	d8, r0, r1
 800b626:	2200      	movs	r2, #0
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fff4 	bl	8000618 <__aeabi_dmul>
 800b630:	4606      	mov	r6, r0
 800b632:	460f      	mov	r7, r1
 800b634:	e7c4      	b.n	800b5c0 <_dtoa_r+0x510>
 800b636:	ec51 0b17 	vmov	r0, r1, d7
 800b63a:	f7f4 ffed 	bl	8000618 <__aeabi_dmul>
 800b63e:	9b02      	ldr	r3, [sp, #8]
 800b640:	9d00      	ldr	r5, [sp, #0]
 800b642:	930c      	str	r3, [sp, #48]	; 0x30
 800b644:	ec41 0b18 	vmov	d8, r0, r1
 800b648:	4639      	mov	r1, r7
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7f5 fa94 	bl	8000b78 <__aeabi_d2iz>
 800b650:	9011      	str	r0, [sp, #68]	; 0x44
 800b652:	f7f4 ff77 	bl	8000544 <__aeabi_i2d>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f4 fe23 	bl	80002a8 <__aeabi_dsub>
 800b662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b664:	3330      	adds	r3, #48	; 0x30
 800b666:	f805 3b01 	strb.w	r3, [r5], #1
 800b66a:	9b02      	ldr	r3, [sp, #8]
 800b66c:	429d      	cmp	r5, r3
 800b66e:	4606      	mov	r6, r0
 800b670:	460f      	mov	r7, r1
 800b672:	f04f 0200 	mov.w	r2, #0
 800b676:	d133      	bne.n	800b6e0 <_dtoa_r+0x630>
 800b678:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <_dtoa_r+0x62c>)
 800b67a:	ec51 0b18 	vmov	r0, r1, d8
 800b67e:	f7f4 fe15 	bl	80002ac <__adddf3>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	f7f5 fa55 	bl	8000b38 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d174      	bne.n	800b77c <_dtoa_r+0x6cc>
 800b692:	ec53 2b18 	vmov	r2, r3, d8
 800b696:	4911      	ldr	r1, [pc, #68]	; (800b6dc <_dtoa_r+0x62c>)
 800b698:	2000      	movs	r0, #0
 800b69a:	f7f4 fe05 	bl	80002a8 <__aeabi_dsub>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f5 fa29 	bl	8000afc <__aeabi_dcmplt>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	f43f af27 	beq.w	800b4fe <_dtoa_r+0x44e>
 800b6b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6b2:	1e6b      	subs	r3, r5, #1
 800b6b4:	930c      	str	r3, [sp, #48]	; 0x30
 800b6b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6ba:	2b30      	cmp	r3, #48	; 0x30
 800b6bc:	d0f8      	beq.n	800b6b0 <_dtoa_r+0x600>
 800b6be:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b6c2:	e049      	b.n	800b758 <_dtoa_r+0x6a8>
 800b6c4:	08011fa8 	.word	0x08011fa8
 800b6c8:	08011f80 	.word	0x08011f80
 800b6cc:	3ff00000 	.word	0x3ff00000
 800b6d0:	40240000 	.word	0x40240000
 800b6d4:	401c0000 	.word	0x401c0000
 800b6d8:	40140000 	.word	0x40140000
 800b6dc:	3fe00000 	.word	0x3fe00000
 800b6e0:	4baf      	ldr	r3, [pc, #700]	; (800b9a0 <_dtoa_r+0x8f0>)
 800b6e2:	f7f4 ff99 	bl	8000618 <__aeabi_dmul>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	460f      	mov	r7, r1
 800b6ea:	e7ad      	b.n	800b648 <_dtoa_r+0x598>
 800b6ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6f0:	9d00      	ldr	r5, [sp, #0]
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	4639      	mov	r1, r7
 800b6fa:	f7f5 f8b7 	bl	800086c <__aeabi_ddiv>
 800b6fe:	f7f5 fa3b 	bl	8000b78 <__aeabi_d2iz>
 800b702:	9002      	str	r0, [sp, #8]
 800b704:	f7f4 ff1e 	bl	8000544 <__aeabi_i2d>
 800b708:	4642      	mov	r2, r8
 800b70a:	464b      	mov	r3, r9
 800b70c:	f7f4 ff84 	bl	8000618 <__aeabi_dmul>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f4 fdc6 	bl	80002a8 <__aeabi_dsub>
 800b71c:	9e02      	ldr	r6, [sp, #8]
 800b71e:	9f01      	ldr	r7, [sp, #4]
 800b720:	3630      	adds	r6, #48	; 0x30
 800b722:	f805 6b01 	strb.w	r6, [r5], #1
 800b726:	9e00      	ldr	r6, [sp, #0]
 800b728:	1bae      	subs	r6, r5, r6
 800b72a:	42b7      	cmp	r7, r6
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	d137      	bne.n	800b7a2 <_dtoa_r+0x6f2>
 800b732:	f7f4 fdbb 	bl	80002ac <__adddf3>
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	f7f5 f9fb 	bl	8000b38 <__aeabi_dcmpgt>
 800b742:	b9c8      	cbnz	r0, 800b778 <_dtoa_r+0x6c8>
 800b744:	4642      	mov	r2, r8
 800b746:	464b      	mov	r3, r9
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f5 f9cc 	bl	8000ae8 <__aeabi_dcmpeq>
 800b750:	b110      	cbz	r0, 800b758 <_dtoa_r+0x6a8>
 800b752:	9b02      	ldr	r3, [sp, #8]
 800b754:	07d9      	lsls	r1, r3, #31
 800b756:	d40f      	bmi.n	800b778 <_dtoa_r+0x6c8>
 800b758:	4620      	mov	r0, r4
 800b75a:	4659      	mov	r1, fp
 800b75c:	f000 ffb7 	bl	800c6ce <_Bfree>
 800b760:	2300      	movs	r3, #0
 800b762:	702b      	strb	r3, [r5, #0]
 800b764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b766:	f10a 0001 	add.w	r0, sl, #1
 800b76a:	6018      	str	r0, [r3, #0]
 800b76c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f43f acd9 	beq.w	800b126 <_dtoa_r+0x76>
 800b774:	601d      	str	r5, [r3, #0]
 800b776:	e4d6      	b.n	800b126 <_dtoa_r+0x76>
 800b778:	f8cd a01c 	str.w	sl, [sp, #28]
 800b77c:	462b      	mov	r3, r5
 800b77e:	461d      	mov	r5, r3
 800b780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b784:	2a39      	cmp	r2, #57	; 0x39
 800b786:	d108      	bne.n	800b79a <_dtoa_r+0x6ea>
 800b788:	9a00      	ldr	r2, [sp, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d1f7      	bne.n	800b77e <_dtoa_r+0x6ce>
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	3201      	adds	r2, #1
 800b794:	9207      	str	r2, [sp, #28]
 800b796:	2230      	movs	r2, #48	; 0x30
 800b798:	700a      	strb	r2, [r1, #0]
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	3201      	adds	r2, #1
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e78d      	b.n	800b6be <_dtoa_r+0x60e>
 800b7a2:	4b7f      	ldr	r3, [pc, #508]	; (800b9a0 <_dtoa_r+0x8f0>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f7f4 ff37 	bl	8000618 <__aeabi_dmul>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	f7f5 f999 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d09b      	beq.n	800b6f2 <_dtoa_r+0x642>
 800b7ba:	e7cd      	b.n	800b758 <_dtoa_r+0x6a8>
 800b7bc:	9a08      	ldr	r2, [sp, #32]
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	f000 80c4 	beq.w	800b94c <_dtoa_r+0x89c>
 800b7c4:	9a05      	ldr	r2, [sp, #20]
 800b7c6:	2a01      	cmp	r2, #1
 800b7c8:	f300 80a8 	bgt.w	800b91c <_dtoa_r+0x86c>
 800b7cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	f000 80a0 	beq.w	800b914 <_dtoa_r+0x864>
 800b7d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7d8:	9e06      	ldr	r6, [sp, #24]
 800b7da:	4645      	mov	r5, r8
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	441a      	add	r2, r3
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	4498      	add	r8, r3
 800b7e6:	9204      	str	r2, [sp, #16]
 800b7e8:	f001 f85e 	bl	800c8a8 <__i2b>
 800b7ec:	4607      	mov	r7, r0
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	dd0b      	ble.n	800b80a <_dtoa_r+0x75a>
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd08      	ble.n	800b80a <_dtoa_r+0x75a>
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	9a04      	ldr	r2, [sp, #16]
 800b7fc:	bfa8      	it	ge
 800b7fe:	462b      	movge	r3, r5
 800b800:	eba8 0803 	sub.w	r8, r8, r3
 800b804:	1aed      	subs	r5, r5, r3
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	9b06      	ldr	r3, [sp, #24]
 800b80c:	b1fb      	cbz	r3, 800b84e <_dtoa_r+0x79e>
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 809f 	beq.w	800b954 <_dtoa_r+0x8a4>
 800b816:	2e00      	cmp	r6, #0
 800b818:	dd11      	ble.n	800b83e <_dtoa_r+0x78e>
 800b81a:	4639      	mov	r1, r7
 800b81c:	4632      	mov	r2, r6
 800b81e:	4620      	mov	r0, r4
 800b820:	f001 f8fe 	bl	800ca20 <__pow5mult>
 800b824:	465a      	mov	r2, fp
 800b826:	4601      	mov	r1, r0
 800b828:	4607      	mov	r7, r0
 800b82a:	4620      	mov	r0, r4
 800b82c:	f001 f852 	bl	800c8d4 <__multiply>
 800b830:	4659      	mov	r1, fp
 800b832:	9007      	str	r0, [sp, #28]
 800b834:	4620      	mov	r0, r4
 800b836:	f000 ff4a 	bl	800c6ce <_Bfree>
 800b83a:	9b07      	ldr	r3, [sp, #28]
 800b83c:	469b      	mov	fp, r3
 800b83e:	9b06      	ldr	r3, [sp, #24]
 800b840:	1b9a      	subs	r2, r3, r6
 800b842:	d004      	beq.n	800b84e <_dtoa_r+0x79e>
 800b844:	4659      	mov	r1, fp
 800b846:	4620      	mov	r0, r4
 800b848:	f001 f8ea 	bl	800ca20 <__pow5mult>
 800b84c:	4683      	mov	fp, r0
 800b84e:	2101      	movs	r1, #1
 800b850:	4620      	mov	r0, r4
 800b852:	f001 f829 	bl	800c8a8 <__i2b>
 800b856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b858:	2b00      	cmp	r3, #0
 800b85a:	4606      	mov	r6, r0
 800b85c:	dd7c      	ble.n	800b958 <_dtoa_r+0x8a8>
 800b85e:	461a      	mov	r2, r3
 800b860:	4601      	mov	r1, r0
 800b862:	4620      	mov	r0, r4
 800b864:	f001 f8dc 	bl	800ca20 <__pow5mult>
 800b868:	9b05      	ldr	r3, [sp, #20]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	4606      	mov	r6, r0
 800b86e:	dd76      	ble.n	800b95e <_dtoa_r+0x8ae>
 800b870:	2300      	movs	r3, #0
 800b872:	9306      	str	r3, [sp, #24]
 800b874:	6933      	ldr	r3, [r6, #16]
 800b876:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b87a:	6918      	ldr	r0, [r3, #16]
 800b87c:	f000 ffc4 	bl	800c808 <__hi0bits>
 800b880:	f1c0 0020 	rsb	r0, r0, #32
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	4418      	add	r0, r3
 800b888:	f010 001f 	ands.w	r0, r0, #31
 800b88c:	f000 8086 	beq.w	800b99c <_dtoa_r+0x8ec>
 800b890:	f1c0 0320 	rsb	r3, r0, #32
 800b894:	2b04      	cmp	r3, #4
 800b896:	dd7f      	ble.n	800b998 <_dtoa_r+0x8e8>
 800b898:	f1c0 001c 	rsb	r0, r0, #28
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	4403      	add	r3, r0
 800b8a0:	4480      	add	r8, r0
 800b8a2:	4405      	add	r5, r0
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	f1b8 0f00 	cmp.w	r8, #0
 800b8aa:	dd05      	ble.n	800b8b8 <_dtoa_r+0x808>
 800b8ac:	4659      	mov	r1, fp
 800b8ae:	4642      	mov	r2, r8
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f001 f8f5 	bl	800caa0 <__lshift>
 800b8b6:	4683      	mov	fp, r0
 800b8b8:	9b04      	ldr	r3, [sp, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dd05      	ble.n	800b8ca <_dtoa_r+0x81a>
 800b8be:	4631      	mov	r1, r6
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f001 f8ec 	bl	800caa0 <__lshift>
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d069      	beq.n	800b9a4 <_dtoa_r+0x8f4>
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f001 f950 	bl	800cb78 <__mcmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	da63      	bge.n	800b9a4 <_dtoa_r+0x8f4>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4659      	mov	r1, fp
 800b8e0:	220a      	movs	r2, #10
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fefc 	bl	800c6e0 <__multadd>
 800b8e8:	9b08      	ldr	r3, [sp, #32]
 800b8ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8ee:	4683      	mov	fp, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 818e 	beq.w	800bc12 <_dtoa_r+0xb62>
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	220a      	movs	r2, #10
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 feef 	bl	800c6e0 <__multadd>
 800b902:	f1b9 0f00 	cmp.w	r9, #0
 800b906:	4607      	mov	r7, r0
 800b908:	f300 808e 	bgt.w	800ba28 <_dtoa_r+0x978>
 800b90c:	9b05      	ldr	r3, [sp, #20]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	dc50      	bgt.n	800b9b4 <_dtoa_r+0x904>
 800b912:	e089      	b.n	800ba28 <_dtoa_r+0x978>
 800b914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b91a:	e75d      	b.n	800b7d8 <_dtoa_r+0x728>
 800b91c:	9b01      	ldr	r3, [sp, #4]
 800b91e:	1e5e      	subs	r6, r3, #1
 800b920:	9b06      	ldr	r3, [sp, #24]
 800b922:	42b3      	cmp	r3, r6
 800b924:	bfbf      	itttt	lt
 800b926:	9b06      	ldrlt	r3, [sp, #24]
 800b928:	9606      	strlt	r6, [sp, #24]
 800b92a:	1af2      	sublt	r2, r6, r3
 800b92c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b92e:	bfb6      	itet	lt
 800b930:	189b      	addlt	r3, r3, r2
 800b932:	1b9e      	subge	r6, r3, r6
 800b934:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	bfb8      	it	lt
 800b93a:	2600      	movlt	r6, #0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfb5      	itete	lt
 800b940:	eba8 0503 	sublt.w	r5, r8, r3
 800b944:	9b01      	ldrge	r3, [sp, #4]
 800b946:	2300      	movlt	r3, #0
 800b948:	4645      	movge	r5, r8
 800b94a:	e747      	b.n	800b7dc <_dtoa_r+0x72c>
 800b94c:	9e06      	ldr	r6, [sp, #24]
 800b94e:	9f08      	ldr	r7, [sp, #32]
 800b950:	4645      	mov	r5, r8
 800b952:	e74c      	b.n	800b7ee <_dtoa_r+0x73e>
 800b954:	9a06      	ldr	r2, [sp, #24]
 800b956:	e775      	b.n	800b844 <_dtoa_r+0x794>
 800b958:	9b05      	ldr	r3, [sp, #20]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	dc18      	bgt.n	800b990 <_dtoa_r+0x8e0>
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	b9b3      	cbnz	r3, 800b990 <_dtoa_r+0x8e0>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b968:	b9a3      	cbnz	r3, 800b994 <_dtoa_r+0x8e4>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b970:	0d1b      	lsrs	r3, r3, #20
 800b972:	051b      	lsls	r3, r3, #20
 800b974:	b12b      	cbz	r3, 800b982 <_dtoa_r+0x8d2>
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	3301      	adds	r3, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	f108 0801 	add.w	r8, r8, #1
 800b980:	2301      	movs	r3, #1
 800b982:	9306      	str	r3, [sp, #24]
 800b984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b986:	2b00      	cmp	r3, #0
 800b988:	f47f af74 	bne.w	800b874 <_dtoa_r+0x7c4>
 800b98c:	2001      	movs	r0, #1
 800b98e:	e779      	b.n	800b884 <_dtoa_r+0x7d4>
 800b990:	2300      	movs	r3, #0
 800b992:	e7f6      	b.n	800b982 <_dtoa_r+0x8d2>
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	e7f4      	b.n	800b982 <_dtoa_r+0x8d2>
 800b998:	d085      	beq.n	800b8a6 <_dtoa_r+0x7f6>
 800b99a:	4618      	mov	r0, r3
 800b99c:	301c      	adds	r0, #28
 800b99e:	e77d      	b.n	800b89c <_dtoa_r+0x7ec>
 800b9a0:	40240000 	.word	0x40240000
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	dc38      	bgt.n	800ba1c <_dtoa_r+0x96c>
 800b9aa:	9b05      	ldr	r3, [sp, #20]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	dd35      	ble.n	800ba1c <_dtoa_r+0x96c>
 800b9b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b9b4:	f1b9 0f00 	cmp.w	r9, #0
 800b9b8:	d10d      	bne.n	800b9d6 <_dtoa_r+0x926>
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	464b      	mov	r3, r9
 800b9be:	2205      	movs	r2, #5
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 fe8d 	bl	800c6e0 <__multadd>
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f001 f8d4 	bl	800cb78 <__mcmp>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f73f adbe 	bgt.w	800b552 <_dtoa_r+0x4a2>
 800b9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d8:	9d00      	ldr	r5, [sp, #0]
 800b9da:	ea6f 0a03 	mvn.w	sl, r3
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 fe72 	bl	800c6ce <_Bfree>
 800b9ea:	2f00      	cmp	r7, #0
 800b9ec:	f43f aeb4 	beq.w	800b758 <_dtoa_r+0x6a8>
 800b9f0:	f1b8 0f00 	cmp.w	r8, #0
 800b9f4:	d005      	beq.n	800ba02 <_dtoa_r+0x952>
 800b9f6:	45b8      	cmp	r8, r7
 800b9f8:	d003      	beq.n	800ba02 <_dtoa_r+0x952>
 800b9fa:	4641      	mov	r1, r8
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fe66 	bl	800c6ce <_Bfree>
 800ba02:	4639      	mov	r1, r7
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fe62 	bl	800c6ce <_Bfree>
 800ba0a:	e6a5      	b.n	800b758 <_dtoa_r+0x6a8>
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	4637      	mov	r7, r6
 800ba10:	e7e1      	b.n	800b9d6 <_dtoa_r+0x926>
 800ba12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ba14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ba18:	4637      	mov	r7, r6
 800ba1a:	e59a      	b.n	800b552 <_dtoa_r+0x4a2>
 800ba1c:	9b08      	ldr	r3, [sp, #32]
 800ba1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 80fc 	beq.w	800bc20 <_dtoa_r+0xb70>
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	dd05      	ble.n	800ba38 <_dtoa_r+0x988>
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4620      	mov	r0, r4
 800ba32:	f001 f835 	bl	800caa0 <__lshift>
 800ba36:	4607      	mov	r7, r0
 800ba38:	9b06      	ldr	r3, [sp, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d05b      	beq.n	800baf6 <_dtoa_r+0xa46>
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fe1f 	bl	800c684 <_Balloc>
 800ba46:	4605      	mov	r5, r0
 800ba48:	b920      	cbnz	r0, 800ba54 <_dtoa_r+0x9a4>
 800ba4a:	4b80      	ldr	r3, [pc, #512]	; (800bc4c <_dtoa_r+0xb9c>)
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba52:	e45b      	b.n	800b30c <_dtoa_r+0x25c>
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	3202      	adds	r2, #2
 800ba58:	0092      	lsls	r2, r2, #2
 800ba5a:	f107 010c 	add.w	r1, r7, #12
 800ba5e:	300c      	adds	r0, #12
 800ba60:	f000 fde8 	bl	800c634 <memcpy>
 800ba64:	2201      	movs	r2, #1
 800ba66:	4629      	mov	r1, r5
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f001 f819 	bl	800caa0 <__lshift>
 800ba6e:	9b00      	ldr	r3, [sp, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	444b      	add	r3, r9
 800ba78:	9307      	str	r3, [sp, #28]
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	46b8      	mov	r8, r7
 800ba82:	9306      	str	r3, [sp, #24]
 800ba84:	4607      	mov	r7, r0
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	4631      	mov	r1, r6
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	4658      	mov	r0, fp
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	f7ff fa80 	bl	800af94 <quorem>
 800ba94:	4603      	mov	r3, r0
 800ba96:	3330      	adds	r3, #48	; 0x30
 800ba98:	9004      	str	r0, [sp, #16]
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	4658      	mov	r0, fp
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	f001 f86a 	bl	800cb78 <__mcmp>
 800baa4:	463a      	mov	r2, r7
 800baa6:	4681      	mov	r9, r0
 800baa8:	4631      	mov	r1, r6
 800baaa:	4620      	mov	r0, r4
 800baac:	f001 f880 	bl	800cbb0 <__mdiff>
 800bab0:	68c2      	ldr	r2, [r0, #12]
 800bab2:	9b08      	ldr	r3, [sp, #32]
 800bab4:	4605      	mov	r5, r0
 800bab6:	bb02      	cbnz	r2, 800bafa <_dtoa_r+0xa4a>
 800bab8:	4601      	mov	r1, r0
 800baba:	4658      	mov	r0, fp
 800babc:	f001 f85c 	bl	800cb78 <__mcmp>
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	4602      	mov	r2, r0
 800bac4:	4629      	mov	r1, r5
 800bac6:	4620      	mov	r0, r4
 800bac8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bacc:	f000 fdff 	bl	800c6ce <_Bfree>
 800bad0:	9b05      	ldr	r3, [sp, #20]
 800bad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad4:	9d01      	ldr	r5, [sp, #4]
 800bad6:	ea43 0102 	orr.w	r1, r3, r2
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	430b      	orrs	r3, r1
 800bade:	9b08      	ldr	r3, [sp, #32]
 800bae0:	d10d      	bne.n	800bafe <_dtoa_r+0xa4e>
 800bae2:	2b39      	cmp	r3, #57	; 0x39
 800bae4:	d029      	beq.n	800bb3a <_dtoa_r+0xa8a>
 800bae6:	f1b9 0f00 	cmp.w	r9, #0
 800baea:	dd01      	ble.n	800baf0 <_dtoa_r+0xa40>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	3331      	adds	r3, #49	; 0x31
 800baf0:	9a02      	ldr	r2, [sp, #8]
 800baf2:	7013      	strb	r3, [r2, #0]
 800baf4:	e775      	b.n	800b9e2 <_dtoa_r+0x932>
 800baf6:	4638      	mov	r0, r7
 800baf8:	e7b9      	b.n	800ba6e <_dtoa_r+0x9be>
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e2      	b.n	800bac4 <_dtoa_r+0xa14>
 800bafe:	f1b9 0f00 	cmp.w	r9, #0
 800bb02:	db06      	blt.n	800bb12 <_dtoa_r+0xa62>
 800bb04:	9905      	ldr	r1, [sp, #20]
 800bb06:	ea41 0909 	orr.w	r9, r1, r9
 800bb0a:	9906      	ldr	r1, [sp, #24]
 800bb0c:	ea59 0101 	orrs.w	r1, r9, r1
 800bb10:	d120      	bne.n	800bb54 <_dtoa_r+0xaa4>
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	ddec      	ble.n	800baf0 <_dtoa_r+0xa40>
 800bb16:	4659      	mov	r1, fp
 800bb18:	2201      	movs	r2, #1
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	f000 ffbf 	bl	800caa0 <__lshift>
 800bb22:	4631      	mov	r1, r6
 800bb24:	4683      	mov	fp, r0
 800bb26:	f001 f827 	bl	800cb78 <__mcmp>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	dc02      	bgt.n	800bb36 <_dtoa_r+0xa86>
 800bb30:	d1de      	bne.n	800baf0 <_dtoa_r+0xa40>
 800bb32:	07da      	lsls	r2, r3, #31
 800bb34:	d5dc      	bpl.n	800baf0 <_dtoa_r+0xa40>
 800bb36:	2b39      	cmp	r3, #57	; 0x39
 800bb38:	d1d8      	bne.n	800baec <_dtoa_r+0xa3c>
 800bb3a:	9a02      	ldr	r2, [sp, #8]
 800bb3c:	2339      	movs	r3, #57	; 0x39
 800bb3e:	7013      	strb	r3, [r2, #0]
 800bb40:	462b      	mov	r3, r5
 800bb42:	461d      	mov	r5, r3
 800bb44:	3b01      	subs	r3, #1
 800bb46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb4a:	2a39      	cmp	r2, #57	; 0x39
 800bb4c:	d050      	beq.n	800bbf0 <_dtoa_r+0xb40>
 800bb4e:	3201      	adds	r2, #1
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e746      	b.n	800b9e2 <_dtoa_r+0x932>
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	dd03      	ble.n	800bb60 <_dtoa_r+0xab0>
 800bb58:	2b39      	cmp	r3, #57	; 0x39
 800bb5a:	d0ee      	beq.n	800bb3a <_dtoa_r+0xa8a>
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	e7c7      	b.n	800baf0 <_dtoa_r+0xa40>
 800bb60:	9a01      	ldr	r2, [sp, #4]
 800bb62:	9907      	ldr	r1, [sp, #28]
 800bb64:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb68:	428a      	cmp	r2, r1
 800bb6a:	d02a      	beq.n	800bbc2 <_dtoa_r+0xb12>
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	2300      	movs	r3, #0
 800bb70:	220a      	movs	r2, #10
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 fdb4 	bl	800c6e0 <__multadd>
 800bb78:	45b8      	cmp	r8, r7
 800bb7a:	4683      	mov	fp, r0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	f04f 020a 	mov.w	r2, #10
 800bb84:	4641      	mov	r1, r8
 800bb86:	4620      	mov	r0, r4
 800bb88:	d107      	bne.n	800bb9a <_dtoa_r+0xaea>
 800bb8a:	f000 fda9 	bl	800c6e0 <__multadd>
 800bb8e:	4680      	mov	r8, r0
 800bb90:	4607      	mov	r7, r0
 800bb92:	9b01      	ldr	r3, [sp, #4]
 800bb94:	3301      	adds	r3, #1
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	e775      	b.n	800ba86 <_dtoa_r+0x9d6>
 800bb9a:	f000 fda1 	bl	800c6e0 <__multadd>
 800bb9e:	4639      	mov	r1, r7
 800bba0:	4680      	mov	r8, r0
 800bba2:	2300      	movs	r3, #0
 800bba4:	220a      	movs	r2, #10
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 fd9a 	bl	800c6e0 <__multadd>
 800bbac:	4607      	mov	r7, r0
 800bbae:	e7f0      	b.n	800bb92 <_dtoa_r+0xae2>
 800bbb0:	f1b9 0f00 	cmp.w	r9, #0
 800bbb4:	9a00      	ldr	r2, [sp, #0]
 800bbb6:	bfcc      	ite	gt
 800bbb8:	464d      	movgt	r5, r9
 800bbba:	2501      	movle	r5, #1
 800bbbc:	4415      	add	r5, r2
 800bbbe:	f04f 0800 	mov.w	r8, #0
 800bbc2:	4659      	mov	r1, fp
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	f000 ff69 	bl	800caa0 <__lshift>
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4683      	mov	fp, r0
 800bbd2:	f000 ffd1 	bl	800cb78 <__mcmp>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	dcb2      	bgt.n	800bb40 <_dtoa_r+0xa90>
 800bbda:	d102      	bne.n	800bbe2 <_dtoa_r+0xb32>
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	07db      	lsls	r3, r3, #31
 800bbe0:	d4ae      	bmi.n	800bb40 <_dtoa_r+0xa90>
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	461d      	mov	r5, r3
 800bbe6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbea:	2a30      	cmp	r2, #48	; 0x30
 800bbec:	d0fa      	beq.n	800bbe4 <_dtoa_r+0xb34>
 800bbee:	e6f8      	b.n	800b9e2 <_dtoa_r+0x932>
 800bbf0:	9a00      	ldr	r2, [sp, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d1a5      	bne.n	800bb42 <_dtoa_r+0xa92>
 800bbf6:	f10a 0a01 	add.w	sl, sl, #1
 800bbfa:	2331      	movs	r3, #49	; 0x31
 800bbfc:	e779      	b.n	800baf2 <_dtoa_r+0xa42>
 800bbfe:	4b14      	ldr	r3, [pc, #80]	; (800bc50 <_dtoa_r+0xba0>)
 800bc00:	f7ff bab1 	b.w	800b166 <_dtoa_r+0xb6>
 800bc04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f47f aa93 	bne.w	800b132 <_dtoa_r+0x82>
 800bc0c:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <_dtoa_r+0xba4>)
 800bc0e:	f7ff baaa 	b.w	800b166 <_dtoa_r+0xb6>
 800bc12:	f1b9 0f00 	cmp.w	r9, #0
 800bc16:	dc03      	bgt.n	800bc20 <_dtoa_r+0xb70>
 800bc18:	9b05      	ldr	r3, [sp, #20]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	f73f aeca 	bgt.w	800b9b4 <_dtoa_r+0x904>
 800bc20:	9d00      	ldr	r5, [sp, #0]
 800bc22:	4631      	mov	r1, r6
 800bc24:	4658      	mov	r0, fp
 800bc26:	f7ff f9b5 	bl	800af94 <quorem>
 800bc2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc2e:	f805 3b01 	strb.w	r3, [r5], #1
 800bc32:	9a00      	ldr	r2, [sp, #0]
 800bc34:	1aaa      	subs	r2, r5, r2
 800bc36:	4591      	cmp	r9, r2
 800bc38:	ddba      	ble.n	800bbb0 <_dtoa_r+0xb00>
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	220a      	movs	r2, #10
 800bc40:	4620      	mov	r0, r4
 800bc42:	f000 fd4d 	bl	800c6e0 <__multadd>
 800bc46:	4683      	mov	fp, r0
 800bc48:	e7eb      	b.n	800bc22 <_dtoa_r+0xb72>
 800bc4a:	bf00      	nop
 800bc4c:	08011e9f 	.word	0x08011e9f
 800bc50:	08011c92 	.word	0x08011c92
 800bc54:	08011e96 	.word	0x08011e96

0800bc58 <__sflush_r>:
 800bc58:	898b      	ldrh	r3, [r1, #12]
 800bc5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc62:	4605      	mov	r5, r0
 800bc64:	0718      	lsls	r0, r3, #28
 800bc66:	460c      	mov	r4, r1
 800bc68:	d45f      	bmi.n	800bd2a <__sflush_r+0xd2>
 800bc6a:	684b      	ldr	r3, [r1, #4]
 800bc6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	818a      	strh	r2, [r1, #12]
 800bc74:	dc05      	bgt.n	800bc82 <__sflush_r+0x2a>
 800bc76:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dc02      	bgt.n	800bc82 <__sflush_r+0x2a>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	d0f9      	beq.n	800bc7c <__sflush_r+0x24>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc8e:	682f      	ldr	r7, [r5, #0]
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	d036      	beq.n	800bd02 <__sflush_r+0xaa>
 800bc94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	075a      	lsls	r2, r3, #29
 800bc9a:	d505      	bpl.n	800bca8 <__sflush_r+0x50>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	1ac0      	subs	r0, r0, r3
 800bca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bca2:	b10b      	cbz	r3, 800bca8 <__sflush_r+0x50>
 800bca4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bca6:	1ac0      	subs	r0, r0, r3
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4602      	mov	r2, r0
 800bcac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcae:	69e1      	ldr	r1, [r4, #28]
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b0      	blx	r6
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	d106      	bne.n	800bcc8 <__sflush_r+0x70>
 800bcba:	6829      	ldr	r1, [r5, #0]
 800bcbc:	291d      	cmp	r1, #29
 800bcbe:	d830      	bhi.n	800bd22 <__sflush_r+0xca>
 800bcc0:	4a2b      	ldr	r2, [pc, #172]	; (800bd70 <__sflush_r+0x118>)
 800bcc2:	40ca      	lsrs	r2, r1
 800bcc4:	07d6      	lsls	r6, r2, #31
 800bcc6:	d52c      	bpl.n	800bd22 <__sflush_r+0xca>
 800bcc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bccc:	b21b      	sxth	r3, r3
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6062      	str	r2, [r4, #4]
 800bcd2:	04d9      	lsls	r1, r3, #19
 800bcd4:	6922      	ldr	r2, [r4, #16]
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	6022      	str	r2, [r4, #0]
 800bcda:	d504      	bpl.n	800bce6 <__sflush_r+0x8e>
 800bcdc:	1c42      	adds	r2, r0, #1
 800bcde:	d101      	bne.n	800bce4 <__sflush_r+0x8c>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b903      	cbnz	r3, 800bce6 <__sflush_r+0x8e>
 800bce4:	6520      	str	r0, [r4, #80]	; 0x50
 800bce6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bce8:	602f      	str	r7, [r5, #0]
 800bcea:	2900      	cmp	r1, #0
 800bcec:	d0c6      	beq.n	800bc7c <__sflush_r+0x24>
 800bcee:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	d002      	beq.n	800bcfc <__sflush_r+0xa4>
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f7fa fb46 	bl	8006388 <_free_r>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	6320      	str	r0, [r4, #48]	; 0x30
 800bd00:	e7bd      	b.n	800bc7e <__sflush_r+0x26>
 800bd02:	69e1      	ldr	r1, [r4, #28]
 800bd04:	2301      	movs	r3, #1
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b0      	blx	r6
 800bd0a:	1c41      	adds	r1, r0, #1
 800bd0c:	d1c3      	bne.n	800bc96 <__sflush_r+0x3e>
 800bd0e:	682b      	ldr	r3, [r5, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d0c0      	beq.n	800bc96 <__sflush_r+0x3e>
 800bd14:	2b1d      	cmp	r3, #29
 800bd16:	d001      	beq.n	800bd1c <__sflush_r+0xc4>
 800bd18:	2b16      	cmp	r3, #22
 800bd1a:	d101      	bne.n	800bd20 <__sflush_r+0xc8>
 800bd1c:	602f      	str	r7, [r5, #0]
 800bd1e:	e7ad      	b.n	800bc7c <__sflush_r+0x24>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	e7a9      	b.n	800bc7e <__sflush_r+0x26>
 800bd2a:	690f      	ldr	r7, [r1, #16]
 800bd2c:	2f00      	cmp	r7, #0
 800bd2e:	d0a5      	beq.n	800bc7c <__sflush_r+0x24>
 800bd30:	079b      	lsls	r3, r3, #30
 800bd32:	680e      	ldr	r6, [r1, #0]
 800bd34:	bf08      	it	eq
 800bd36:	694b      	ldreq	r3, [r1, #20]
 800bd38:	600f      	str	r7, [r1, #0]
 800bd3a:	bf18      	it	ne
 800bd3c:	2300      	movne	r3, #0
 800bd3e:	eba6 0807 	sub.w	r8, r6, r7
 800bd42:	608b      	str	r3, [r1, #8]
 800bd44:	f1b8 0f00 	cmp.w	r8, #0
 800bd48:	dd98      	ble.n	800bc7c <__sflush_r+0x24>
 800bd4a:	69e1      	ldr	r1, [r4, #28]
 800bd4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd4e:	4643      	mov	r3, r8
 800bd50:	463a      	mov	r2, r7
 800bd52:	4628      	mov	r0, r5
 800bd54:	47b0      	blx	r6
 800bd56:	2800      	cmp	r0, #0
 800bd58:	dc06      	bgt.n	800bd68 <__sflush_r+0x110>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	f04f 30ff 	mov.w	r0, #4294967295
 800bd66:	e78a      	b.n	800bc7e <__sflush_r+0x26>
 800bd68:	4407      	add	r7, r0
 800bd6a:	eba8 0800 	sub.w	r8, r8, r0
 800bd6e:	e7e9      	b.n	800bd44 <__sflush_r+0xec>
 800bd70:	20400001 	.word	0x20400001

0800bd74 <_fflush_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	460c      	mov	r4, r1
 800bd78:	4605      	mov	r5, r0
 800bd7a:	b118      	cbz	r0, 800bd84 <_fflush_r+0x10>
 800bd7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bd7e:	b90b      	cbnz	r3, 800bd84 <_fflush_r+0x10>
 800bd80:	f000 f876 	bl	800be70 <__sinit>
 800bd84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd88:	b1bb      	cbz	r3, 800bdba <_fflush_r+0x46>
 800bd8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd8c:	07d0      	lsls	r0, r2, #31
 800bd8e:	d404      	bmi.n	800bd9a <_fflush_r+0x26>
 800bd90:	0599      	lsls	r1, r3, #22
 800bd92:	d402      	bmi.n	800bd9a <_fflush_r+0x26>
 800bd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd96:	f7fa fcdc 	bl	8006752 <__retarget_lock_acquire_recursive>
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	f7ff ff5b 	bl	800bc58 <__sflush_r>
 800bda2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bda4:	07da      	lsls	r2, r3, #31
 800bda6:	4605      	mov	r5, r0
 800bda8:	d405      	bmi.n	800bdb6 <_fflush_r+0x42>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	059b      	lsls	r3, r3, #22
 800bdae:	d402      	bmi.n	800bdb6 <_fflush_r+0x42>
 800bdb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb2:	f7fa fcd0 	bl	8006756 <__retarget_lock_release_recursive>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	bd38      	pop	{r3, r4, r5, pc}
 800bdba:	461d      	mov	r5, r3
 800bdbc:	e7fb      	b.n	800bdb6 <_fflush_r+0x42>
	...

0800bdc0 <fflush>:
 800bdc0:	4601      	mov	r1, r0
 800bdc2:	b920      	cbnz	r0, 800bdce <fflush+0xe>
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <fflush+0x18>)
 800bdc6:	4905      	ldr	r1, [pc, #20]	; (800bddc <fflush+0x1c>)
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f000 ba5c 	b.w	800c286 <_fwalk_reent>
 800bdce:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <fflush+0x20>)
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f7ff bfcf 	b.w	800bd74 <_fflush_r>
 800bdd6:	bf00      	nop
 800bdd8:	08011bfc 	.word	0x08011bfc
 800bddc:	0800bd75 	.word	0x0800bd75
 800bde0:	2000001c 	.word	0x2000001c

0800bde4 <std>:
 800bde4:	2300      	movs	r3, #0
 800bde6:	b510      	push	{r4, lr}
 800bde8:	4604      	mov	r4, r0
 800bdea:	e9c0 3300 	strd	r3, r3, [r0]
 800bdee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdf2:	6083      	str	r3, [r0, #8]
 800bdf4:	8181      	strh	r1, [r0, #12]
 800bdf6:	6643      	str	r3, [r0, #100]	; 0x64
 800bdf8:	81c2      	strh	r2, [r0, #14]
 800bdfa:	6183      	str	r3, [r0, #24]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	2208      	movs	r2, #8
 800be00:	305c      	adds	r0, #92	; 0x5c
 800be02:	f7fa fefb 	bl	8006bfc <memset>
 800be06:	4b07      	ldr	r3, [pc, #28]	; (800be24 <std+0x40>)
 800be08:	6223      	str	r3, [r4, #32]
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <std+0x44>)
 800be0c:	6263      	str	r3, [r4, #36]	; 0x24
 800be0e:	4b07      	ldr	r3, [pc, #28]	; (800be2c <std+0x48>)
 800be10:	62a3      	str	r3, [r4, #40]	; 0x28
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <std+0x4c>)
 800be14:	61e4      	str	r4, [r4, #28]
 800be16:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be20:	f7fa bc94 	b.w	800674c <__retarget_lock_init_recursive>
 800be24:	0800d59d 	.word	0x0800d59d
 800be28:	0800d5c3 	.word	0x0800d5c3
 800be2c:	0800d5fb 	.word	0x0800d5fb
 800be30:	0800d61f 	.word	0x0800d61f

0800be34 <_cleanup_r>:
 800be34:	4901      	ldr	r1, [pc, #4]	; (800be3c <_cleanup_r+0x8>)
 800be36:	f000 ba26 	b.w	800c286 <_fwalk_reent>
 800be3a:	bf00      	nop
 800be3c:	08010e55 	.word	0x08010e55

0800be40 <__sfp_lock_acquire>:
 800be40:	4801      	ldr	r0, [pc, #4]	; (800be48 <__sfp_lock_acquire+0x8>)
 800be42:	f7fa bc86 	b.w	8006752 <__retarget_lock_acquire_recursive>
 800be46:	bf00      	nop
 800be48:	20000bb0 	.word	0x20000bb0

0800be4c <__sfp_lock_release>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__sfp_lock_release+0x8>)
 800be4e:	f7fa bc82 	b.w	8006756 <__retarget_lock_release_recursive>
 800be52:	bf00      	nop
 800be54:	20000bb0 	.word	0x20000bb0

0800be58 <__sinit_lock_acquire>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__sinit_lock_acquire+0x8>)
 800be5a:	f7fa bc7a 	b.w	8006752 <__retarget_lock_acquire_recursive>
 800be5e:	bf00      	nop
 800be60:	20000bab 	.word	0x20000bab

0800be64 <__sinit_lock_release>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__sinit_lock_release+0x8>)
 800be66:	f7fa bc76 	b.w	8006756 <__retarget_lock_release_recursive>
 800be6a:	bf00      	nop
 800be6c:	20000bab 	.word	0x20000bab

0800be70 <__sinit>:
 800be70:	b510      	push	{r4, lr}
 800be72:	4604      	mov	r4, r0
 800be74:	f7ff fff0 	bl	800be58 <__sinit_lock_acquire>
 800be78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800be7a:	b11a      	cbz	r2, 800be84 <__sinit+0x14>
 800be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be80:	f7ff bff0 	b.w	800be64 <__sinit_lock_release>
 800be84:	4b0d      	ldr	r3, [pc, #52]	; (800bebc <__sinit+0x4c>)
 800be86:	63e3      	str	r3, [r4, #60]	; 0x3c
 800be88:	2303      	movs	r3, #3
 800be8a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800be8e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800be92:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800be96:	6860      	ldr	r0, [r4, #4]
 800be98:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800be9c:	2104      	movs	r1, #4
 800be9e:	f7ff ffa1 	bl	800bde4 <std>
 800bea2:	68a0      	ldr	r0, [r4, #8]
 800bea4:	2201      	movs	r2, #1
 800bea6:	2109      	movs	r1, #9
 800bea8:	f7ff ff9c 	bl	800bde4 <std>
 800beac:	68e0      	ldr	r0, [r4, #12]
 800beae:	2202      	movs	r2, #2
 800beb0:	2112      	movs	r1, #18
 800beb2:	f7ff ff97 	bl	800bde4 <std>
 800beb6:	2301      	movs	r3, #1
 800beb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800beba:	e7df      	b.n	800be7c <__sinit+0xc>
 800bebc:	0800be35 	.word	0x0800be35

0800bec0 <__libc_fini_array>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	; (800bee0 <__libc_fini_array+0x20>)
 800bec4:	4c07      	ldr	r4, [pc, #28]	; (800bee4 <__libc_fini_array+0x24>)
 800bec6:	1b64      	subs	r4, r4, r5
 800bec8:	10a4      	asrs	r4, r4, #2
 800beca:	b91c      	cbnz	r4, 800bed4 <__libc_fini_array+0x14>
 800becc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed0:	f005 bd10 	b.w	80118f4 <_fini>
 800bed4:	3c01      	subs	r4, #1
 800bed6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800beda:	4798      	blx	r3
 800bedc:	e7f5      	b.n	800beca <__libc_fini_array+0xa>
 800bede:	bf00      	nop
 800bee0:	080121f4 	.word	0x080121f4
 800bee4:	080121f8 	.word	0x080121f8

0800bee8 <_fread_r>:
 800bee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	461e      	mov	r6, r3
 800beee:	4613      	mov	r3, r2
 800bef0:	4373      	muls	r3, r6
 800bef2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bef4:	4681      	mov	r9, r0
 800bef6:	4688      	mov	r8, r1
 800bef8:	4692      	mov	sl, r2
 800befa:	469b      	mov	fp, r3
 800befc:	d05a      	beq.n	800bfb4 <_fread_r+0xcc>
 800befe:	b118      	cbz	r0, 800bf08 <_fread_r+0x20>
 800bf00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bf02:	b90b      	cbnz	r3, 800bf08 <_fread_r+0x20>
 800bf04:	f7ff ffb4 	bl	800be70 <__sinit>
 800bf08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf0a:	07db      	lsls	r3, r3, #31
 800bf0c:	d405      	bmi.n	800bf1a <_fread_r+0x32>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	059f      	lsls	r7, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_fread_r+0x32>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f7fa fc1c 	bl	8006752 <__retarget_lock_acquire_recursive>
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	049d      	lsls	r5, r3, #18
 800bf20:	d406      	bmi.n	800bf30 <_fread_r+0x48>
 800bf22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf2e:	6663      	str	r3, [r4, #100]	; 0x64
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	da01      	bge.n	800bf3a <_fread_r+0x52>
 800bf36:	2300      	movs	r3, #0
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	465f      	mov	r7, fp
 800bf3c:	e9d4 1500 	ldrd	r1, r5, [r4]
 800bf40:	42af      	cmp	r7, r5
 800bf42:	d813      	bhi.n	800bf6c <_fread_r+0x84>
 800bf44:	463a      	mov	r2, r7
 800bf46:	4640      	mov	r0, r8
 800bf48:	f000 fb74 	bl	800c634 <memcpy>
 800bf4c:	6863      	ldr	r3, [r4, #4]
 800bf4e:	1bdb      	subs	r3, r3, r7
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	441f      	add	r7, r3
 800bf56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf58:	6027      	str	r7, [r4, #0]
 800bf5a:	07da      	lsls	r2, r3, #31
 800bf5c:	d424      	bmi.n	800bfa8 <_fread_r+0xc0>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	059b      	lsls	r3, r3, #22
 800bf62:	d421      	bmi.n	800bfa8 <_fread_r+0xc0>
 800bf64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf66:	f7fa fbf6 	bl	8006756 <__retarget_lock_release_recursive>
 800bf6a:	e01d      	b.n	800bfa8 <_fread_r+0xc0>
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4640      	mov	r0, r8
 800bf70:	f000 fb60 	bl	800c634 <memcpy>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	442b      	add	r3, r5
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	1b7b      	subs	r3, r7, r5
 800bf7e:	4648      	mov	r0, r9
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	f001 f9a5 	bl	800d2d0 <__srefill_r>
 800bf86:	44a8      	add	r8, r5
 800bf88:	9b01      	ldr	r3, [sp, #4]
 800bf8a:	b188      	cbz	r0, 800bfb0 <_fread_r+0xc8>
 800bf8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf8e:	07d8      	lsls	r0, r3, #31
 800bf90:	d405      	bmi.n	800bf9e <_fread_r+0xb6>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	0599      	lsls	r1, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_fread_r+0xb6>
 800bf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9a:	f7fa fbdc 	bl	8006756 <__retarget_lock_release_recursive>
 800bf9e:	eb05 060b 	add.w	r6, r5, fp
 800bfa2:	1bf6      	subs	r6, r6, r7
 800bfa4:	fbb6 f6fa 	udiv	r6, r6, sl
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	b003      	add	sp, #12
 800bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb0:	461f      	mov	r7, r3
 800bfb2:	e7c3      	b.n	800bf3c <_fread_r+0x54>
 800bfb4:	461e      	mov	r6, r3
 800bfb6:	e7f7      	b.n	800bfa8 <_fread_r+0xc0>

0800bfb8 <__sfvwrite_r>:
 800bfb8:	6893      	ldr	r3, [r2, #8]
 800bfba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	4690      	mov	r8, r2
 800bfc4:	b91b      	cbnz	r3, 800bfce <__sfvwrite_r+0x16>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	b003      	add	sp, #12
 800bfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfce:	898b      	ldrh	r3, [r1, #12]
 800bfd0:	0718      	lsls	r0, r3, #28
 800bfd2:	d550      	bpl.n	800c076 <__sfvwrite_r+0xbe>
 800bfd4:	690b      	ldr	r3, [r1, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d04d      	beq.n	800c076 <__sfvwrite_r+0xbe>
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	f8d8 7000 	ldr.w	r7, [r8]
 800bfe0:	f013 0902 	ands.w	r9, r3, #2
 800bfe4:	d16c      	bne.n	800c0c0 <__sfvwrite_r+0x108>
 800bfe6:	f013 0301 	ands.w	r3, r3, #1
 800bfea:	f000 809c 	beq.w	800c126 <__sfvwrite_r+0x16e>
 800bfee:	4648      	mov	r0, r9
 800bff0:	46ca      	mov	sl, r9
 800bff2:	46cb      	mov	fp, r9
 800bff4:	f1bb 0f00 	cmp.w	fp, #0
 800bff8:	f000 8103 	beq.w	800c202 <__sfvwrite_r+0x24a>
 800bffc:	b950      	cbnz	r0, 800c014 <__sfvwrite_r+0x5c>
 800bffe:	465a      	mov	r2, fp
 800c000:	210a      	movs	r1, #10
 800c002:	4650      	mov	r0, sl
 800c004:	f7f4 f8fc 	bl	8000200 <memchr>
 800c008:	2800      	cmp	r0, #0
 800c00a:	f000 80ff 	beq.w	800c20c <__sfvwrite_r+0x254>
 800c00e:	3001      	adds	r0, #1
 800c010:	eba0 090a 	sub.w	r9, r0, sl
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	6921      	ldr	r1, [r4, #16]
 800c018:	6963      	ldr	r3, [r4, #20]
 800c01a:	45d9      	cmp	r9, fp
 800c01c:	464a      	mov	r2, r9
 800c01e:	bf28      	it	cs
 800c020:	465a      	movcs	r2, fp
 800c022:	4288      	cmp	r0, r1
 800c024:	f240 80f5 	bls.w	800c212 <__sfvwrite_r+0x25a>
 800c028:	68a5      	ldr	r5, [r4, #8]
 800c02a:	441d      	add	r5, r3
 800c02c:	42aa      	cmp	r2, r5
 800c02e:	f340 80f0 	ble.w	800c212 <__sfvwrite_r+0x25a>
 800c032:	4651      	mov	r1, sl
 800c034:	462a      	mov	r2, r5
 800c036:	f000 fb0b 	bl	800c650 <memmove>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	442b      	add	r3, r5
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	4621      	mov	r1, r4
 800c042:	4630      	mov	r0, r6
 800c044:	f7ff fe96 	bl	800bd74 <_fflush_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d167      	bne.n	800c11c <__sfvwrite_r+0x164>
 800c04c:	ebb9 0905 	subs.w	r9, r9, r5
 800c050:	f040 80f7 	bne.w	800c242 <__sfvwrite_r+0x28a>
 800c054:	4621      	mov	r1, r4
 800c056:	4630      	mov	r0, r6
 800c058:	f7ff fe8c 	bl	800bd74 <_fflush_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d15d      	bne.n	800c11c <__sfvwrite_r+0x164>
 800c060:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c064:	44aa      	add	sl, r5
 800c066:	ebab 0b05 	sub.w	fp, fp, r5
 800c06a:	1b55      	subs	r5, r2, r5
 800c06c:	f8c8 5008 	str.w	r5, [r8, #8]
 800c070:	2d00      	cmp	r5, #0
 800c072:	d1bf      	bne.n	800bff4 <__sfvwrite_r+0x3c>
 800c074:	e7a7      	b.n	800bfc6 <__sfvwrite_r+0xe>
 800c076:	4621      	mov	r1, r4
 800c078:	4630      	mov	r0, r6
 800c07a:	f7fe fef5 	bl	800ae68 <__swsetup_r>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d0ab      	beq.n	800bfda <__sfvwrite_r+0x22>
 800c082:	f04f 30ff 	mov.w	r0, #4294967295
 800c086:	e79f      	b.n	800bfc8 <__sfvwrite_r+0x10>
 800c088:	e9d7 b900 	ldrd	fp, r9, [r7]
 800c08c:	3708      	adds	r7, #8
 800c08e:	f1b9 0f00 	cmp.w	r9, #0
 800c092:	d0f9      	beq.n	800c088 <__sfvwrite_r+0xd0>
 800c094:	45d1      	cmp	r9, sl
 800c096:	464b      	mov	r3, r9
 800c098:	69e1      	ldr	r1, [r4, #28]
 800c09a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c09c:	bf28      	it	cs
 800c09e:	4653      	movcs	r3, sl
 800c0a0:	465a      	mov	r2, fp
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	47a8      	blx	r5
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	dd38      	ble.n	800c11c <__sfvwrite_r+0x164>
 800c0aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0ae:	4483      	add	fp, r0
 800c0b0:	eba9 0900 	sub.w	r9, r9, r0
 800c0b4:	1a18      	subs	r0, r3, r0
 800c0b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1e7      	bne.n	800c08e <__sfvwrite_r+0xd6>
 800c0be:	e782      	b.n	800bfc6 <__sfvwrite_r+0xe>
 800c0c0:	f04f 0b00 	mov.w	fp, #0
 800c0c4:	f8df a180 	ldr.w	sl, [pc, #384]	; 800c248 <__sfvwrite_r+0x290>
 800c0c8:	46d9      	mov	r9, fp
 800c0ca:	e7e0      	b.n	800c08e <__sfvwrite_r+0xd6>
 800c0cc:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	f1ba 0f00 	cmp.w	sl, #0
 800c0d6:	d0f9      	beq.n	800c0cc <__sfvwrite_r+0x114>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	68a2      	ldr	r2, [r4, #8]
 800c0dc:	6820      	ldr	r0, [r4, #0]
 800c0de:	0599      	lsls	r1, r3, #22
 800c0e0:	d563      	bpl.n	800c1aa <__sfvwrite_r+0x1f2>
 800c0e2:	4552      	cmp	r2, sl
 800c0e4:	d836      	bhi.n	800c154 <__sfvwrite_r+0x19c>
 800c0e6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c0ea:	d033      	beq.n	800c154 <__sfvwrite_r+0x19c>
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	6965      	ldr	r5, [r4, #20]
 800c0f0:	eba0 0b01 	sub.w	fp, r0, r1
 800c0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0fc:	f10b 0201 	add.w	r2, fp, #1
 800c100:	106d      	asrs	r5, r5, #1
 800c102:	4452      	add	r2, sl
 800c104:	4295      	cmp	r5, r2
 800c106:	bf38      	it	cc
 800c108:	4615      	movcc	r5, r2
 800c10a:	055b      	lsls	r3, r3, #21
 800c10c:	d53d      	bpl.n	800c18a <__sfvwrite_r+0x1d2>
 800c10e:	4629      	mov	r1, r5
 800c110:	4630      	mov	r0, r6
 800c112:	f7fa fb31 	bl	8006778 <_malloc_r>
 800c116:	b948      	cbnz	r0, 800c12c <__sfvwrite_r+0x174>
 800c118:	230c      	movs	r3, #12
 800c11a:	6033      	str	r3, [r6, #0]
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	e7ad      	b.n	800c082 <__sfvwrite_r+0xca>
 800c126:	4699      	mov	r9, r3
 800c128:	469a      	mov	sl, r3
 800c12a:	e7d2      	b.n	800c0d2 <__sfvwrite_r+0x11a>
 800c12c:	465a      	mov	r2, fp
 800c12e:	6921      	ldr	r1, [r4, #16]
 800c130:	9001      	str	r0, [sp, #4]
 800c132:	f000 fa7f 	bl	800c634 <memcpy>
 800c136:	89a2      	ldrh	r2, [r4, #12]
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c13e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c142:	81a2      	strh	r2, [r4, #12]
 800c144:	6123      	str	r3, [r4, #16]
 800c146:	6165      	str	r5, [r4, #20]
 800c148:	445b      	add	r3, fp
 800c14a:	eba5 050b 	sub.w	r5, r5, fp
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	4652      	mov	r2, sl
 800c152:	60a5      	str	r5, [r4, #8]
 800c154:	4552      	cmp	r2, sl
 800c156:	bf28      	it	cs
 800c158:	4652      	movcs	r2, sl
 800c15a:	6820      	ldr	r0, [r4, #0]
 800c15c:	9201      	str	r2, [sp, #4]
 800c15e:	4649      	mov	r1, r9
 800c160:	f000 fa76 	bl	800c650 <memmove>
 800c164:	68a3      	ldr	r3, [r4, #8]
 800c166:	9a01      	ldr	r2, [sp, #4]
 800c168:	1a9b      	subs	r3, r3, r2
 800c16a:	60a3      	str	r3, [r4, #8]
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	441a      	add	r2, r3
 800c170:	4655      	mov	r5, sl
 800c172:	6022      	str	r2, [r4, #0]
 800c174:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c178:	44a9      	add	r9, r5
 800c17a:	ebaa 0a05 	sub.w	sl, sl, r5
 800c17e:	1b45      	subs	r5, r0, r5
 800c180:	f8c8 5008 	str.w	r5, [r8, #8]
 800c184:	2d00      	cmp	r5, #0
 800c186:	d1a4      	bne.n	800c0d2 <__sfvwrite_r+0x11a>
 800c188:	e71d      	b.n	800bfc6 <__sfvwrite_r+0xe>
 800c18a:	462a      	mov	r2, r5
 800c18c:	4630      	mov	r0, r6
 800c18e:	f000 feef 	bl	800cf70 <_realloc_r>
 800c192:	4603      	mov	r3, r0
 800c194:	2800      	cmp	r0, #0
 800c196:	d1d5      	bne.n	800c144 <__sfvwrite_r+0x18c>
 800c198:	6921      	ldr	r1, [r4, #16]
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7fa f8f4 	bl	8006388 <_free_r>
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	e7b6      	b.n	800c118 <__sfvwrite_r+0x160>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	4283      	cmp	r3, r0
 800c1ae:	d302      	bcc.n	800c1b6 <__sfvwrite_r+0x1fe>
 800c1b0:	6961      	ldr	r1, [r4, #20]
 800c1b2:	4551      	cmp	r1, sl
 800c1b4:	d915      	bls.n	800c1e2 <__sfvwrite_r+0x22a>
 800c1b6:	4552      	cmp	r2, sl
 800c1b8:	bf28      	it	cs
 800c1ba:	4652      	movcs	r2, sl
 800c1bc:	4649      	mov	r1, r9
 800c1be:	4615      	mov	r5, r2
 800c1c0:	f000 fa46 	bl	800c650 <memmove>
 800c1c4:	68a3      	ldr	r3, [r4, #8]
 800c1c6:	6822      	ldr	r2, [r4, #0]
 800c1c8:	1b5b      	subs	r3, r3, r5
 800c1ca:	442a      	add	r2, r5
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	6022      	str	r2, [r4, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1cf      	bne.n	800c174 <__sfvwrite_r+0x1bc>
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7ff fdcc 	bl	800bd74 <_fflush_r>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d0c9      	beq.n	800c174 <__sfvwrite_r+0x1bc>
 800c1e0:	e79c      	b.n	800c11c <__sfvwrite_r+0x164>
 800c1e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c1e6:	459a      	cmp	sl, r3
 800c1e8:	bf38      	it	cc
 800c1ea:	4653      	movcc	r3, sl
 800c1ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1ee:	fb93 f3f1 	sdiv	r3, r3, r1
 800c1f2:	464a      	mov	r2, r9
 800c1f4:	434b      	muls	r3, r1
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	69e1      	ldr	r1, [r4, #28]
 800c1fa:	47a8      	blx	r5
 800c1fc:	1e05      	subs	r5, r0, #0
 800c1fe:	dcb9      	bgt.n	800c174 <__sfvwrite_r+0x1bc>
 800c200:	e78c      	b.n	800c11c <__sfvwrite_r+0x164>
 800c202:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c206:	2000      	movs	r0, #0
 800c208:	3708      	adds	r7, #8
 800c20a:	e6f3      	b.n	800bff4 <__sfvwrite_r+0x3c>
 800c20c:	f10b 0901 	add.w	r9, fp, #1
 800c210:	e700      	b.n	800c014 <__sfvwrite_r+0x5c>
 800c212:	4293      	cmp	r3, r2
 800c214:	dc08      	bgt.n	800c228 <__sfvwrite_r+0x270>
 800c216:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c218:	69e1      	ldr	r1, [r4, #28]
 800c21a:	4652      	mov	r2, sl
 800c21c:	4630      	mov	r0, r6
 800c21e:	47a8      	blx	r5
 800c220:	1e05      	subs	r5, r0, #0
 800c222:	f73f af13 	bgt.w	800c04c <__sfvwrite_r+0x94>
 800c226:	e779      	b.n	800c11c <__sfvwrite_r+0x164>
 800c228:	4651      	mov	r1, sl
 800c22a:	9201      	str	r2, [sp, #4]
 800c22c:	f000 fa10 	bl	800c650 <memmove>
 800c230:	9a01      	ldr	r2, [sp, #4]
 800c232:	68a3      	ldr	r3, [r4, #8]
 800c234:	1a9b      	subs	r3, r3, r2
 800c236:	60a3      	str	r3, [r4, #8]
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	4413      	add	r3, r2
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	4615      	mov	r5, r2
 800c240:	e704      	b.n	800c04c <__sfvwrite_r+0x94>
 800c242:	2001      	movs	r0, #1
 800c244:	e70c      	b.n	800c060 <__sfvwrite_r+0xa8>
 800c246:	bf00      	nop
 800c248:	7ffffc00 	.word	0x7ffffc00

0800c24c <_fwalk>:
 800c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	460f      	mov	r7, r1
 800c252:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800c256:	2600      	movs	r6, #0
 800c258:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800c25c:	f1b8 0801 	subs.w	r8, r8, #1
 800c260:	d505      	bpl.n	800c26e <_fwalk+0x22>
 800c262:	6824      	ldr	r4, [r4, #0]
 800c264:	2c00      	cmp	r4, #0
 800c266:	d1f7      	bne.n	800c258 <_fwalk+0xc>
 800c268:	4630      	mov	r0, r6
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d906      	bls.n	800c282 <_fwalk+0x36>
 800c274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c278:	3301      	adds	r3, #1
 800c27a:	d002      	beq.n	800c282 <_fwalk+0x36>
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	4306      	orrs	r6, r0
 800c282:	3568      	adds	r5, #104	; 0x68
 800c284:	e7ea      	b.n	800c25c <_fwalk+0x10>

0800c286 <_fwalk_reent>:
 800c286:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c28a:	4606      	mov	r6, r0
 800c28c:	4688      	mov	r8, r1
 800c28e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800c292:	2700      	movs	r7, #0
 800c294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c298:	f1b9 0901 	subs.w	r9, r9, #1
 800c29c:	d505      	bpl.n	800c2aa <_fwalk_reent+0x24>
 800c29e:	6824      	ldr	r4, [r4, #0]
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	d1f7      	bne.n	800c294 <_fwalk_reent+0xe>
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d907      	bls.n	800c2c0 <_fwalk_reent+0x3a>
 800c2b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	d003      	beq.n	800c2c0 <_fwalk_reent+0x3a>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	47c0      	blx	r8
 800c2be:	4307      	orrs	r7, r0
 800c2c0:	3568      	adds	r5, #104	; 0x68
 800c2c2:	e7e9      	b.n	800c298 <_fwalk_reent+0x12>

0800c2c4 <_findenv_r>:
 800c2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	4689      	mov	r9, r1
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	f004 fdb5 	bl	8010e3c <__env_lock>
 800c2d2:	4b18      	ldr	r3, [pc, #96]	; (800c334 <_findenv_r+0x70>)
 800c2d4:	681c      	ldr	r4, [r3, #0]
 800c2d6:	469a      	mov	sl, r3
 800c2d8:	b134      	cbz	r4, 800c2e8 <_findenv_r+0x24>
 800c2da:	464b      	mov	r3, r9
 800c2dc:	4698      	mov	r8, r3
 800c2de:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c2e2:	b139      	cbz	r1, 800c2f4 <_findenv_r+0x30>
 800c2e4:	293d      	cmp	r1, #61	; 0x3d
 800c2e6:	d1f9      	bne.n	800c2dc <_findenv_r+0x18>
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f004 fdad 	bl	8010e48 <__env_unlock>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f4:	eba8 0809 	sub.w	r8, r8, r9
 800c2f8:	46a3      	mov	fp, r4
 800c2fa:	f854 0b04 	ldr.w	r0, [r4], #4
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d0f2      	beq.n	800c2e8 <_findenv_r+0x24>
 800c302:	4642      	mov	r2, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f001 f996 	bl	800d636 <strncmp>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d1f4      	bne.n	800c2f8 <_findenv_r+0x34>
 800c30e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c312:	eb03 0508 	add.w	r5, r3, r8
 800c316:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c31a:	2b3d      	cmp	r3, #61	; 0x3d
 800c31c:	d1ec      	bne.n	800c2f8 <_findenv_r+0x34>
 800c31e:	f8da 3000 	ldr.w	r3, [sl]
 800c322:	ebab 0303 	sub.w	r3, fp, r3
 800c326:	109b      	asrs	r3, r3, #2
 800c328:	4638      	mov	r0, r7
 800c32a:	6033      	str	r3, [r6, #0]
 800c32c:	f004 fd8c 	bl	8010e48 <__env_unlock>
 800c330:	1c68      	adds	r0, r5, #1
 800c332:	e7dd      	b.n	800c2f0 <_findenv_r+0x2c>
 800c334:	2000000c 	.word	0x2000000c

0800c338 <_getenv_r>:
 800c338:	b507      	push	{r0, r1, r2, lr}
 800c33a:	aa01      	add	r2, sp, #4
 800c33c:	f7ff ffc2 	bl	800c2c4 <_findenv_r>
 800c340:	b003      	add	sp, #12
 800c342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c348 <_gettimeofday_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d07      	ldr	r5, [pc, #28]	; (800c368 <_gettimeofday_r+0x20>)
 800c34c:	2300      	movs	r3, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	4608      	mov	r0, r1
 800c352:	4611      	mov	r1, r2
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	f005 fabf 	bl	80118d8 <_gettimeofday>
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	d102      	bne.n	800c364 <_gettimeofday_r+0x1c>
 800c35e:	682b      	ldr	r3, [r5, #0]
 800c360:	b103      	cbz	r3, 800c364 <_gettimeofday_r+0x1c>
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	bd38      	pop	{r3, r4, r5, pc}
 800c366:	bf00      	nop
 800c368:	20000bb4 	.word	0x20000bb4

0800c36c <__gettzinfo>:
 800c36c:	4800      	ldr	r0, [pc, #0]	; (800c370 <__gettzinfo+0x4>)
 800c36e:	4770      	bx	lr
 800c370:	20000868 	.word	0x20000868

0800c374 <gmtime_r>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c37c:	460c      	mov	r4, r1
 800c37e:	4a51      	ldr	r2, [pc, #324]	; (800c4c4 <gmtime_r+0x150>)
 800c380:	2300      	movs	r3, #0
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f4 fc8f 	bl	8000ca8 <__aeabi_ldivmod>
 800c38a:	4639      	mov	r1, r7
 800c38c:	4605      	mov	r5, r0
 800c38e:	4a4d      	ldr	r2, [pc, #308]	; (800c4c4 <gmtime_r+0x150>)
 800c390:	4630      	mov	r0, r6
 800c392:	2300      	movs	r3, #0
 800c394:	f7f4 fc88 	bl	8000ca8 <__aeabi_ldivmod>
 800c398:	2a00      	cmp	r2, #0
 800c39a:	bfbc      	itt	lt
 800c39c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c3a0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c3a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c3a8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c3ac:	fbb2 f3f1 	udiv	r3, r2, r1
 800c3b0:	fb01 2213 	mls	r2, r1, r3, r2
 800c3b4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800c3b8:	bfac      	ite	ge
 800c3ba:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800c3be:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800c3c2:	60a3      	str	r3, [r4, #8]
 800c3c4:	fbb2 f3f1 	udiv	r3, r2, r1
 800c3c8:	fb01 2213 	mls	r2, r1, r3, r2
 800c3cc:	6063      	str	r3, [r4, #4]
 800c3ce:	6022      	str	r2, [r4, #0]
 800c3d0:	1cc3      	adds	r3, r0, #3
 800c3d2:	2207      	movs	r2, #7
 800c3d4:	fb93 f2f2 	sdiv	r2, r3, r2
 800c3d8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c3dc:	1a9b      	subs	r3, r3, r2
 800c3de:	bf48      	it	mi
 800c3e0:	3307      	addmi	r3, #7
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	61a3      	str	r3, [r4, #24]
 800c3e6:	bfb8      	it	lt
 800c3e8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800c3ec:	4936      	ldr	r1, [pc, #216]	; (800c4c8 <gmtime_r+0x154>)
 800c3ee:	bfae      	itee	ge
 800c3f0:	fb90 f1f1 	sdivge	r1, r0, r1
 800c3f4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800c3f8:	fb93 f1f1 	sdivlt	r1, r3, r1
 800c3fc:	4b33      	ldr	r3, [pc, #204]	; (800c4cc <gmtime_r+0x158>)
 800c3fe:	fb03 0001 	mla	r0, r3, r1, r0
 800c402:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c406:	fbb0 f2f2 	udiv	r2, r0, r2
 800c40a:	4402      	add	r2, r0
 800c40c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800c410:	fbb0 f3fc 	udiv	r3, r0, ip
 800c414:	1ad2      	subs	r2, r2, r3
 800c416:	f240 176d 	movw	r7, #365	; 0x16d
 800c41a:	4b2d      	ldr	r3, [pc, #180]	; (800c4d0 <gmtime_r+0x15c>)
 800c41c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c420:	2664      	movs	r6, #100	; 0x64
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	fbb3 f5f7 	udiv	r5, r3, r7
 800c428:	fbb3 f3fc 	udiv	r3, r3, ip
 800c42c:	fbb5 f2f6 	udiv	r2, r5, r6
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	4403      	add	r3, r0
 800c434:	fb07 3315 	mls	r3, r7, r5, r3
 800c438:	2099      	movs	r0, #153	; 0x99
 800c43a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800c43e:	f10c 0c02 	add.w	ip, ip, #2
 800c442:	f103 0e01 	add.w	lr, r3, #1
 800c446:	fbbc f7f0 	udiv	r7, ip, r0
 800c44a:	4378      	muls	r0, r7
 800c44c:	3002      	adds	r0, #2
 800c44e:	f04f 0805 	mov.w	r8, #5
 800c452:	fbb0 f0f8 	udiv	r0, r0, r8
 800c456:	ebae 0000 	sub.w	r0, lr, r0
 800c45a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800c45e:	45f4      	cmp	ip, lr
 800c460:	bf94      	ite	ls
 800c462:	f04f 0c02 	movls.w	ip, #2
 800c466:	f06f 0c09 	mvnhi.w	ip, #9
 800c46a:	4467      	add	r7, ip
 800c46c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800c470:	fb0c 5101 	mla	r1, ip, r1, r5
 800c474:	2f01      	cmp	r7, #1
 800c476:	bf98      	it	ls
 800c478:	3101      	addls	r1, #1
 800c47a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c47e:	d30c      	bcc.n	800c49a <gmtime_r+0x126>
 800c480:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c484:	61e3      	str	r3, [r4, #28]
 800c486:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800c48a:	2300      	movs	r3, #0
 800c48c:	60e0      	str	r0, [r4, #12]
 800c48e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800c492:	6223      	str	r3, [r4, #32]
 800c494:	4620      	mov	r0, r4
 800c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49a:	f015 0f03 	tst.w	r5, #3
 800c49e:	d102      	bne.n	800c4a6 <gmtime_r+0x132>
 800c4a0:	fb06 5212 	mls	r2, r6, r2, r5
 800c4a4:	b95a      	cbnz	r2, 800c4be <gmtime_r+0x14a>
 800c4a6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800c4aa:	fbb5 f2f6 	udiv	r2, r5, r6
 800c4ae:	fb06 5212 	mls	r2, r6, r2, r5
 800c4b2:	fab2 f282 	clz	r2, r2
 800c4b6:	0952      	lsrs	r2, r2, #5
 800c4b8:	333b      	adds	r3, #59	; 0x3b
 800c4ba:	4413      	add	r3, r2
 800c4bc:	e7e2      	b.n	800c484 <gmtime_r+0x110>
 800c4be:	2201      	movs	r2, #1
 800c4c0:	e7fa      	b.n	800c4b8 <gmtime_r+0x144>
 800c4c2:	bf00      	nop
 800c4c4:	00015180 	.word	0x00015180
 800c4c8:	00023ab1 	.word	0x00023ab1
 800c4cc:	fffdc54f 	.word	0xfffdc54f
 800c4d0:	00023ab0 	.word	0x00023ab0

0800c4d4 <iswspace>:
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	f000 b801 	b.w	800c4dc <iswspace_l>
	...

0800c4dc <iswspace_l>:
 800c4dc:	28ff      	cmp	r0, #255	; 0xff
 800c4de:	bf9d      	ittte	ls
 800c4e0:	4b02      	ldrls	r3, [pc, #8]	; (800c4ec <iswspace_l+0x10>)
 800c4e2:	5cc0      	ldrbls	r0, [r0, r3]
 800c4e4:	f000 0008 	andls.w	r0, r0, #8
 800c4e8:	2000      	movhi	r0, #0
 800c4ea:	4770      	bx	lr
 800c4ec:	08011d92 	.word	0x08011d92

0800c4f0 <__locale_mb_cur_max>:
 800c4f0:	4b01      	ldr	r3, [pc, #4]	; (800c4f8 <__locale_mb_cur_max+0x8>)
 800c4f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c4f6:	4770      	bx	lr
 800c4f8:	200008c0 	.word	0x200008c0

0800c4fc <_localeconv_r>:
 800c4fc:	4800      	ldr	r0, [pc, #0]	; (800c500 <_localeconv_r+0x4>)
 800c4fe:	4770      	bx	lr
 800c500:	200009b0 	.word	0x200009b0

0800c504 <__swhatbuf_r>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	460e      	mov	r6, r1
 800c508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c50c:	2900      	cmp	r1, #0
 800c50e:	b096      	sub	sp, #88	; 0x58
 800c510:	4614      	mov	r4, r2
 800c512:	461d      	mov	r5, r3
 800c514:	da09      	bge.n	800c52a <__swhatbuf_r+0x26>
 800c516:	89b3      	ldrh	r3, [r6, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c51e:	602a      	str	r2, [r5, #0]
 800c520:	d116      	bne.n	800c550 <__swhatbuf_r+0x4c>
 800c522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	e015      	b.n	800c556 <__swhatbuf_r+0x52>
 800c52a:	466a      	mov	r2, sp
 800c52c:	f004 fd68 	bl	8011000 <_fstat_r>
 800c530:	2800      	cmp	r0, #0
 800c532:	dbf0      	blt.n	800c516 <__swhatbuf_r+0x12>
 800c534:	9a01      	ldr	r2, [sp, #4]
 800c536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c53a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c53e:	425a      	negs	r2, r3
 800c540:	415a      	adcs	r2, r3
 800c542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c546:	602a      	str	r2, [r5, #0]
 800c548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	e002      	b.n	800c556 <__swhatbuf_r+0x52>
 800c550:	2340      	movs	r3, #64	; 0x40
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	4610      	mov	r0, r2
 800c556:	b016      	add	sp, #88	; 0x58
 800c558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c55c <__smakebuf_r>:
 800c55c:	898b      	ldrh	r3, [r1, #12]
 800c55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c560:	079d      	lsls	r5, r3, #30
 800c562:	4606      	mov	r6, r0
 800c564:	460c      	mov	r4, r1
 800c566:	d507      	bpl.n	800c578 <__smakebuf_r+0x1c>
 800c568:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	6123      	str	r3, [r4, #16]
 800c570:	2301      	movs	r3, #1
 800c572:	6163      	str	r3, [r4, #20]
 800c574:	b002      	add	sp, #8
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	ab01      	add	r3, sp, #4
 800c57a:	466a      	mov	r2, sp
 800c57c:	f7ff ffc2 	bl	800c504 <__swhatbuf_r>
 800c580:	9900      	ldr	r1, [sp, #0]
 800c582:	4605      	mov	r5, r0
 800c584:	4630      	mov	r0, r6
 800c586:	f7fa f8f7 	bl	8006778 <_malloc_r>
 800c58a:	b948      	cbnz	r0, 800c5a0 <__smakebuf_r+0x44>
 800c58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c590:	059a      	lsls	r2, r3, #22
 800c592:	d4ef      	bmi.n	800c574 <__smakebuf_r+0x18>
 800c594:	f023 0303 	bic.w	r3, r3, #3
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	81a3      	strh	r3, [r4, #12]
 800c59e:	e7e3      	b.n	800c568 <__smakebuf_r+0xc>
 800c5a0:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <__smakebuf_r+0x7c>)
 800c5a2:	63f3      	str	r3, [r6, #60]	; 0x3c
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	6020      	str	r0, [r4, #0]
 800c5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	9b00      	ldr	r3, [sp, #0]
 800c5b0:	6163      	str	r3, [r4, #20]
 800c5b2:	9b01      	ldr	r3, [sp, #4]
 800c5b4:	6120      	str	r0, [r4, #16]
 800c5b6:	b15b      	cbz	r3, 800c5d0 <__smakebuf_r+0x74>
 800c5b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f005 f8a1 	bl	8011704 <_isatty_r>
 800c5c2:	b128      	cbz	r0, 800c5d0 <__smakebuf_r+0x74>
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	f023 0303 	bic.w	r3, r3, #3
 800c5ca:	f043 0301 	orr.w	r3, r3, #1
 800c5ce:	81a3      	strh	r3, [r4, #12]
 800c5d0:	89a0      	ldrh	r0, [r4, #12]
 800c5d2:	4305      	orrs	r5, r0
 800c5d4:	81a5      	strh	r5, [r4, #12]
 800c5d6:	e7cd      	b.n	800c574 <__smakebuf_r+0x18>
 800c5d8:	0800be35 	.word	0x0800be35

0800c5dc <_mbrtowc_r>:
 800c5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5de:	4c0a      	ldr	r4, [pc, #40]	; (800c608 <_mbrtowc_r+0x2c>)
 800c5e0:	9e08      	ldr	r6, [sp, #32]
 800c5e2:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800c5e6:	9600      	str	r6, [sp, #0]
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	4614      	mov	r4, r2
 800c5ec:	b912      	cbnz	r2, 800c5f4 <_mbrtowc_r+0x18>
 800c5ee:	4a07      	ldr	r2, [pc, #28]	; (800c60c <_mbrtowc_r+0x30>)
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	47b8      	blx	r7
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	bf01      	itttt	eq
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	6033      	streq	r3, [r6, #0]
 800c5fe:	238a      	moveq	r3, #138	; 0x8a
 800c600:	602b      	streq	r3, [r5, #0]
 800c602:	b003      	add	sp, #12
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c606:	bf00      	nop
 800c608:	200008c0 	.word	0x200008c0
 800c60c:	08011d57 	.word	0x08011d57

0800c610 <__ascii_mbtowc>:
 800c610:	b082      	sub	sp, #8
 800c612:	b901      	cbnz	r1, 800c616 <__ascii_mbtowc+0x6>
 800c614:	a901      	add	r1, sp, #4
 800c616:	b142      	cbz	r2, 800c62a <__ascii_mbtowc+0x1a>
 800c618:	b14b      	cbz	r3, 800c62e <__ascii_mbtowc+0x1e>
 800c61a:	7813      	ldrb	r3, [r2, #0]
 800c61c:	600b      	str	r3, [r1, #0]
 800c61e:	7812      	ldrb	r2, [r2, #0]
 800c620:	1e10      	subs	r0, r2, #0
 800c622:	bf18      	it	ne
 800c624:	2001      	movne	r0, #1
 800c626:	b002      	add	sp, #8
 800c628:	4770      	bx	lr
 800c62a:	4610      	mov	r0, r2
 800c62c:	e7fb      	b.n	800c626 <__ascii_mbtowc+0x16>
 800c62e:	f06f 0001 	mvn.w	r0, #1
 800c632:	e7f8      	b.n	800c626 <__ascii_mbtowc+0x16>

0800c634 <memcpy>:
 800c634:	440a      	add	r2, r1
 800c636:	4291      	cmp	r1, r2
 800c638:	f100 33ff 	add.w	r3, r0, #4294967295
 800c63c:	d100      	bne.n	800c640 <memcpy+0xc>
 800c63e:	4770      	bx	lr
 800c640:	b510      	push	{r4, lr}
 800c642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d1f9      	bne.n	800c642 <memcpy+0xe>
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <memmove>:
 800c650:	4288      	cmp	r0, r1
 800c652:	b510      	push	{r4, lr}
 800c654:	eb01 0402 	add.w	r4, r1, r2
 800c658:	d902      	bls.n	800c660 <memmove+0x10>
 800c65a:	4284      	cmp	r4, r0
 800c65c:	4623      	mov	r3, r4
 800c65e:	d807      	bhi.n	800c670 <memmove+0x20>
 800c660:	1e43      	subs	r3, r0, #1
 800c662:	42a1      	cmp	r1, r4
 800c664:	d008      	beq.n	800c678 <memmove+0x28>
 800c666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c66e:	e7f8      	b.n	800c662 <memmove+0x12>
 800c670:	4402      	add	r2, r0
 800c672:	4601      	mov	r1, r0
 800c674:	428a      	cmp	r2, r1
 800c676:	d100      	bne.n	800c67a <memmove+0x2a>
 800c678:	bd10      	pop	{r4, pc}
 800c67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c682:	e7f7      	b.n	800c674 <memmove+0x24>

0800c684 <_Balloc>:
 800c684:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c686:	b570      	push	{r4, r5, r6, lr}
 800c688:	4605      	mov	r5, r0
 800c68a:	460c      	mov	r4, r1
 800c68c:	b17b      	cbz	r3, 800c6ae <_Balloc+0x2a>
 800c68e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c690:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c694:	b9a0      	cbnz	r0, 800c6c0 <_Balloc+0x3c>
 800c696:	2101      	movs	r1, #1
 800c698:	fa01 f604 	lsl.w	r6, r1, r4
 800c69c:	1d72      	adds	r2, r6, #5
 800c69e:	0092      	lsls	r2, r2, #2
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f004 fb8d 	bl	8010dc0 <_calloc_r>
 800c6a6:	b148      	cbz	r0, 800c6bc <_Balloc+0x38>
 800c6a8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c6ac:	e00b      	b.n	800c6c6 <_Balloc+0x42>
 800c6ae:	2221      	movs	r2, #33	; 0x21
 800c6b0:	2104      	movs	r1, #4
 800c6b2:	f004 fb85 	bl	8010dc0 <_calloc_r>
 800c6b6:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1e8      	bne.n	800c68e <_Balloc+0xa>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	6802      	ldr	r2, [r0, #0]
 800c6c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6cc:	e7f7      	b.n	800c6be <_Balloc+0x3a>

0800c6ce <_Bfree>:
 800c6ce:	b131      	cbz	r1, 800c6de <_Bfree+0x10>
 800c6d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c6d2:	684a      	ldr	r2, [r1, #4]
 800c6d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c6d8:	6008      	str	r0, [r1, #0]
 800c6da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6de:	4770      	bx	lr

0800c6e0 <__multadd>:
 800c6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e4:	690e      	ldr	r6, [r1, #16]
 800c6e6:	4607      	mov	r7, r0
 800c6e8:	4698      	mov	r8, r3
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	f101 0014 	add.w	r0, r1, #20
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	6805      	ldr	r5, [r0, #0]
 800c6f4:	b2a9      	uxth	r1, r5
 800c6f6:	fb02 8101 	mla	r1, r2, r1, r8
 800c6fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c6fe:	0c2d      	lsrs	r5, r5, #16
 800c700:	fb02 c505 	mla	r5, r2, r5, ip
 800c704:	b289      	uxth	r1, r1
 800c706:	3301      	adds	r3, #1
 800c708:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c70c:	429e      	cmp	r6, r3
 800c70e:	f840 1b04 	str.w	r1, [r0], #4
 800c712:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c716:	dcec      	bgt.n	800c6f2 <__multadd+0x12>
 800c718:	f1b8 0f00 	cmp.w	r8, #0
 800c71c:	d022      	beq.n	800c764 <__multadd+0x84>
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	42b3      	cmp	r3, r6
 800c722:	dc19      	bgt.n	800c758 <__multadd+0x78>
 800c724:	6861      	ldr	r1, [r4, #4]
 800c726:	4638      	mov	r0, r7
 800c728:	3101      	adds	r1, #1
 800c72a:	f7ff ffab 	bl	800c684 <_Balloc>
 800c72e:	4605      	mov	r5, r0
 800c730:	b928      	cbnz	r0, 800c73e <__multadd+0x5e>
 800c732:	4602      	mov	r2, r0
 800c734:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <__multadd+0x8c>)
 800c736:	480e      	ldr	r0, [pc, #56]	; (800c770 <__multadd+0x90>)
 800c738:	21b5      	movs	r1, #181	; 0xb5
 800c73a:	f004 fb23 	bl	8010d84 <__assert_func>
 800c73e:	6922      	ldr	r2, [r4, #16]
 800c740:	3202      	adds	r2, #2
 800c742:	f104 010c 	add.w	r1, r4, #12
 800c746:	0092      	lsls	r2, r2, #2
 800c748:	300c      	adds	r0, #12
 800c74a:	f7ff ff73 	bl	800c634 <memcpy>
 800c74e:	4621      	mov	r1, r4
 800c750:	4638      	mov	r0, r7
 800c752:	f7ff ffbc 	bl	800c6ce <_Bfree>
 800c756:	462c      	mov	r4, r5
 800c758:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c75c:	3601      	adds	r6, #1
 800c75e:	f8c3 8014 	str.w	r8, [r3, #20]
 800c762:	6126      	str	r6, [r4, #16]
 800c764:	4620      	mov	r0, r4
 800c766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c76a:	bf00      	nop
 800c76c:	08011e9f 	.word	0x08011e9f
 800c770:	08011f19 	.word	0x08011f19

0800c774 <__s2b>:
 800c774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c778:	460c      	mov	r4, r1
 800c77a:	4615      	mov	r5, r2
 800c77c:	461f      	mov	r7, r3
 800c77e:	2209      	movs	r2, #9
 800c780:	3308      	adds	r3, #8
 800c782:	4606      	mov	r6, r0
 800c784:	fb93 f3f2 	sdiv	r3, r3, r2
 800c788:	2100      	movs	r1, #0
 800c78a:	2201      	movs	r2, #1
 800c78c:	429a      	cmp	r2, r3
 800c78e:	db09      	blt.n	800c7a4 <__s2b+0x30>
 800c790:	4630      	mov	r0, r6
 800c792:	f7ff ff77 	bl	800c684 <_Balloc>
 800c796:	b940      	cbnz	r0, 800c7aa <__s2b+0x36>
 800c798:	4602      	mov	r2, r0
 800c79a:	4b19      	ldr	r3, [pc, #100]	; (800c800 <__s2b+0x8c>)
 800c79c:	4819      	ldr	r0, [pc, #100]	; (800c804 <__s2b+0x90>)
 800c79e:	21ce      	movs	r1, #206	; 0xce
 800c7a0:	f004 faf0 	bl	8010d84 <__assert_func>
 800c7a4:	0052      	lsls	r2, r2, #1
 800c7a6:	3101      	adds	r1, #1
 800c7a8:	e7f0      	b.n	800c78c <__s2b+0x18>
 800c7aa:	9b08      	ldr	r3, [sp, #32]
 800c7ac:	6143      	str	r3, [r0, #20]
 800c7ae:	2d09      	cmp	r5, #9
 800c7b0:	f04f 0301 	mov.w	r3, #1
 800c7b4:	6103      	str	r3, [r0, #16]
 800c7b6:	dd16      	ble.n	800c7e6 <__s2b+0x72>
 800c7b8:	f104 0909 	add.w	r9, r4, #9
 800c7bc:	46c8      	mov	r8, r9
 800c7be:	442c      	add	r4, r5
 800c7c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7c4:	4601      	mov	r1, r0
 800c7c6:	3b30      	subs	r3, #48	; 0x30
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7ff ff88 	bl	800c6e0 <__multadd>
 800c7d0:	45a0      	cmp	r8, r4
 800c7d2:	d1f5      	bne.n	800c7c0 <__s2b+0x4c>
 800c7d4:	f1a5 0408 	sub.w	r4, r5, #8
 800c7d8:	444c      	add	r4, r9
 800c7da:	1b2d      	subs	r5, r5, r4
 800c7dc:	1963      	adds	r3, r4, r5
 800c7de:	42bb      	cmp	r3, r7
 800c7e0:	db04      	blt.n	800c7ec <__s2b+0x78>
 800c7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e6:	340a      	adds	r4, #10
 800c7e8:	2509      	movs	r5, #9
 800c7ea:	e7f6      	b.n	800c7da <__s2b+0x66>
 800c7ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	3b30      	subs	r3, #48	; 0x30
 800c7f4:	220a      	movs	r2, #10
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ff72 	bl	800c6e0 <__multadd>
 800c7fc:	e7ee      	b.n	800c7dc <__s2b+0x68>
 800c7fe:	bf00      	nop
 800c800:	08011e9f 	.word	0x08011e9f
 800c804:	08011f19 	.word	0x08011f19

0800c808 <__hi0bits>:
 800c808:	0c03      	lsrs	r3, r0, #16
 800c80a:	041b      	lsls	r3, r3, #16
 800c80c:	b9d3      	cbnz	r3, 800c844 <__hi0bits+0x3c>
 800c80e:	0400      	lsls	r0, r0, #16
 800c810:	2310      	movs	r3, #16
 800c812:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c816:	bf04      	itt	eq
 800c818:	0200      	lsleq	r0, r0, #8
 800c81a:	3308      	addeq	r3, #8
 800c81c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c820:	bf04      	itt	eq
 800c822:	0100      	lsleq	r0, r0, #4
 800c824:	3304      	addeq	r3, #4
 800c826:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c82a:	bf04      	itt	eq
 800c82c:	0080      	lsleq	r0, r0, #2
 800c82e:	3302      	addeq	r3, #2
 800c830:	2800      	cmp	r0, #0
 800c832:	db05      	blt.n	800c840 <__hi0bits+0x38>
 800c834:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c838:	f103 0301 	add.w	r3, r3, #1
 800c83c:	bf08      	it	eq
 800c83e:	2320      	moveq	r3, #32
 800c840:	4618      	mov	r0, r3
 800c842:	4770      	bx	lr
 800c844:	2300      	movs	r3, #0
 800c846:	e7e4      	b.n	800c812 <__hi0bits+0xa>

0800c848 <__lo0bits>:
 800c848:	6803      	ldr	r3, [r0, #0]
 800c84a:	f013 0207 	ands.w	r2, r3, #7
 800c84e:	4601      	mov	r1, r0
 800c850:	d00b      	beq.n	800c86a <__lo0bits+0x22>
 800c852:	07da      	lsls	r2, r3, #31
 800c854:	d424      	bmi.n	800c8a0 <__lo0bits+0x58>
 800c856:	0798      	lsls	r0, r3, #30
 800c858:	bf49      	itett	mi
 800c85a:	085b      	lsrmi	r3, r3, #1
 800c85c:	089b      	lsrpl	r3, r3, #2
 800c85e:	2001      	movmi	r0, #1
 800c860:	600b      	strmi	r3, [r1, #0]
 800c862:	bf5c      	itt	pl
 800c864:	600b      	strpl	r3, [r1, #0]
 800c866:	2002      	movpl	r0, #2
 800c868:	4770      	bx	lr
 800c86a:	b298      	uxth	r0, r3
 800c86c:	b9b0      	cbnz	r0, 800c89c <__lo0bits+0x54>
 800c86e:	0c1b      	lsrs	r3, r3, #16
 800c870:	2010      	movs	r0, #16
 800c872:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c876:	bf04      	itt	eq
 800c878:	0a1b      	lsreq	r3, r3, #8
 800c87a:	3008      	addeq	r0, #8
 800c87c:	071a      	lsls	r2, r3, #28
 800c87e:	bf04      	itt	eq
 800c880:	091b      	lsreq	r3, r3, #4
 800c882:	3004      	addeq	r0, #4
 800c884:	079a      	lsls	r2, r3, #30
 800c886:	bf04      	itt	eq
 800c888:	089b      	lsreq	r3, r3, #2
 800c88a:	3002      	addeq	r0, #2
 800c88c:	07da      	lsls	r2, r3, #31
 800c88e:	d403      	bmi.n	800c898 <__lo0bits+0x50>
 800c890:	085b      	lsrs	r3, r3, #1
 800c892:	f100 0001 	add.w	r0, r0, #1
 800c896:	d005      	beq.n	800c8a4 <__lo0bits+0x5c>
 800c898:	600b      	str	r3, [r1, #0]
 800c89a:	4770      	bx	lr
 800c89c:	4610      	mov	r0, r2
 800c89e:	e7e8      	b.n	800c872 <__lo0bits+0x2a>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	4770      	bx	lr
 800c8a4:	2020      	movs	r0, #32
 800c8a6:	4770      	bx	lr

0800c8a8 <__i2b>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	f7ff fee9 	bl	800c684 <_Balloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__i2b+0x1a>
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <__i2b+0x24>)
 800c8b8:	4805      	ldr	r0, [pc, #20]	; (800c8d0 <__i2b+0x28>)
 800c8ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8be:	f004 fa61 	bl	8010d84 <__assert_func>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	6144      	str	r4, [r0, #20]
 800c8c6:	6103      	str	r3, [r0, #16]
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	bf00      	nop
 800c8cc:	08011e9f 	.word	0x08011e9f
 800c8d0:	08011f19 	.word	0x08011f19

0800c8d4 <__multiply>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4614      	mov	r4, r2
 800c8da:	690a      	ldr	r2, [r1, #16]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	bfb8      	it	lt
 800c8e2:	460b      	movlt	r3, r1
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	bfbc      	itt	lt
 800c8e8:	4625      	movlt	r5, r4
 800c8ea:	461c      	movlt	r4, r3
 800c8ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c8f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8f4:	68ab      	ldr	r3, [r5, #8]
 800c8f6:	6869      	ldr	r1, [r5, #4]
 800c8f8:	eb0a 0709 	add.w	r7, sl, r9
 800c8fc:	42bb      	cmp	r3, r7
 800c8fe:	b085      	sub	sp, #20
 800c900:	bfb8      	it	lt
 800c902:	3101      	addlt	r1, #1
 800c904:	f7ff febe 	bl	800c684 <_Balloc>
 800c908:	b930      	cbnz	r0, 800c918 <__multiply+0x44>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b42      	ldr	r3, [pc, #264]	; (800ca18 <__multiply+0x144>)
 800c90e:	4843      	ldr	r0, [pc, #268]	; (800ca1c <__multiply+0x148>)
 800c910:	f240 115d 	movw	r1, #349	; 0x15d
 800c914:	f004 fa36 	bl	8010d84 <__assert_func>
 800c918:	f100 0614 	add.w	r6, r0, #20
 800c91c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c920:	4633      	mov	r3, r6
 800c922:	2200      	movs	r2, #0
 800c924:	4543      	cmp	r3, r8
 800c926:	d31e      	bcc.n	800c966 <__multiply+0x92>
 800c928:	f105 0c14 	add.w	ip, r5, #20
 800c92c:	f104 0314 	add.w	r3, r4, #20
 800c930:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c934:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c938:	9202      	str	r2, [sp, #8]
 800c93a:	ebac 0205 	sub.w	r2, ip, r5
 800c93e:	3a15      	subs	r2, #21
 800c940:	f022 0203 	bic.w	r2, r2, #3
 800c944:	3204      	adds	r2, #4
 800c946:	f105 0115 	add.w	r1, r5, #21
 800c94a:	458c      	cmp	ip, r1
 800c94c:	bf38      	it	cc
 800c94e:	2204      	movcc	r2, #4
 800c950:	9201      	str	r2, [sp, #4]
 800c952:	9a02      	ldr	r2, [sp, #8]
 800c954:	9303      	str	r3, [sp, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d808      	bhi.n	800c96c <__multiply+0x98>
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	dc55      	bgt.n	800ca0a <__multiply+0x136>
 800c95e:	6107      	str	r7, [r0, #16]
 800c960:	b005      	add	sp, #20
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	f843 2b04 	str.w	r2, [r3], #4
 800c96a:	e7db      	b.n	800c924 <__multiply+0x50>
 800c96c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	d020      	beq.n	800c9b8 <__multiply+0xe4>
 800c976:	f105 0e14 	add.w	lr, r5, #20
 800c97a:	46b1      	mov	r9, r6
 800c97c:	2200      	movs	r2, #0
 800c97e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c982:	f8d9 b000 	ldr.w	fp, [r9]
 800c986:	b2a1      	uxth	r1, r4
 800c988:	fa1f fb8b 	uxth.w	fp, fp
 800c98c:	fb0a b101 	mla	r1, sl, r1, fp
 800c990:	4411      	add	r1, r2
 800c992:	f8d9 2000 	ldr.w	r2, [r9]
 800c996:	0c24      	lsrs	r4, r4, #16
 800c998:	0c12      	lsrs	r2, r2, #16
 800c99a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c99e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9a2:	b289      	uxth	r1, r1
 800c9a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9a8:	45f4      	cmp	ip, lr
 800c9aa:	f849 1b04 	str.w	r1, [r9], #4
 800c9ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c9b2:	d8e4      	bhi.n	800c97e <__multiply+0xaa>
 800c9b4:	9901      	ldr	r1, [sp, #4]
 800c9b6:	5072      	str	r2, [r6, r1]
 800c9b8:	9a03      	ldr	r2, [sp, #12]
 800c9ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	d01f      	beq.n	800ca06 <__multiply+0x132>
 800c9c6:	6834      	ldr	r4, [r6, #0]
 800c9c8:	f105 0114 	add.w	r1, r5, #20
 800c9cc:	46b6      	mov	lr, r6
 800c9ce:	f04f 0a00 	mov.w	sl, #0
 800c9d2:	880a      	ldrh	r2, [r1, #0]
 800c9d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9d8:	fb09 b202 	mla	r2, r9, r2, fp
 800c9dc:	4492      	add	sl, r2
 800c9de:	b2a4      	uxth	r4, r4
 800c9e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c9e4:	f84e 4b04 	str.w	r4, [lr], #4
 800c9e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c9ec:	f8be 2000 	ldrh.w	r2, [lr]
 800c9f0:	0c24      	lsrs	r4, r4, #16
 800c9f2:	fb09 2404 	mla	r4, r9, r4, r2
 800c9f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c9fa:	458c      	cmp	ip, r1
 800c9fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca00:	d8e7      	bhi.n	800c9d2 <__multiply+0xfe>
 800ca02:	9a01      	ldr	r2, [sp, #4]
 800ca04:	50b4      	str	r4, [r6, r2]
 800ca06:	3604      	adds	r6, #4
 800ca08:	e7a3      	b.n	800c952 <__multiply+0x7e>
 800ca0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1a5      	bne.n	800c95e <__multiply+0x8a>
 800ca12:	3f01      	subs	r7, #1
 800ca14:	e7a1      	b.n	800c95a <__multiply+0x86>
 800ca16:	bf00      	nop
 800ca18:	08011e9f 	.word	0x08011e9f
 800ca1c:	08011f19 	.word	0x08011f19

0800ca20 <__pow5mult>:
 800ca20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca24:	4615      	mov	r5, r2
 800ca26:	f012 0203 	ands.w	r2, r2, #3
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	d007      	beq.n	800ca40 <__pow5mult+0x20>
 800ca30:	4c1a      	ldr	r4, [pc, #104]	; (800ca9c <__pow5mult+0x7c>)
 800ca32:	3a01      	subs	r2, #1
 800ca34:	2300      	movs	r3, #0
 800ca36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca3a:	f7ff fe51 	bl	800c6e0 <__multadd>
 800ca3e:	4607      	mov	r7, r0
 800ca40:	10ad      	asrs	r5, r5, #2
 800ca42:	d027      	beq.n	800ca94 <__pow5mult+0x74>
 800ca44:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800ca46:	b944      	cbnz	r4, 800ca5a <__pow5mult+0x3a>
 800ca48:	f240 2171 	movw	r1, #625	; 0x271
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7ff ff2b 	bl	800c8a8 <__i2b>
 800ca52:	2300      	movs	r3, #0
 800ca54:	64b0      	str	r0, [r6, #72]	; 0x48
 800ca56:	4604      	mov	r4, r0
 800ca58:	6003      	str	r3, [r0, #0]
 800ca5a:	f04f 0900 	mov.w	r9, #0
 800ca5e:	07eb      	lsls	r3, r5, #31
 800ca60:	d50a      	bpl.n	800ca78 <__pow5mult+0x58>
 800ca62:	4639      	mov	r1, r7
 800ca64:	4622      	mov	r2, r4
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ff34 	bl	800c8d4 <__multiply>
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	4680      	mov	r8, r0
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff fe2c 	bl	800c6ce <_Bfree>
 800ca76:	4647      	mov	r7, r8
 800ca78:	106d      	asrs	r5, r5, #1
 800ca7a:	d00b      	beq.n	800ca94 <__pow5mult+0x74>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	b938      	cbnz	r0, 800ca90 <__pow5mult+0x70>
 800ca80:	4622      	mov	r2, r4
 800ca82:	4621      	mov	r1, r4
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff ff25 	bl	800c8d4 <__multiply>
 800ca8a:	6020      	str	r0, [r4, #0]
 800ca8c:	f8c0 9000 	str.w	r9, [r0]
 800ca90:	4604      	mov	r4, r0
 800ca92:	e7e4      	b.n	800ca5e <__pow5mult+0x3e>
 800ca94:	4638      	mov	r0, r7
 800ca96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca9a:	bf00      	nop
 800ca9c:	08012070 	.word	0x08012070

0800caa0 <__lshift>:
 800caa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa4:	460c      	mov	r4, r1
 800caa6:	6849      	ldr	r1, [r1, #4]
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800caae:	68a3      	ldr	r3, [r4, #8]
 800cab0:	4607      	mov	r7, r0
 800cab2:	4691      	mov	r9, r2
 800cab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cab8:	f108 0601 	add.w	r6, r8, #1
 800cabc:	42b3      	cmp	r3, r6
 800cabe:	db0b      	blt.n	800cad8 <__lshift+0x38>
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7ff fddf 	bl	800c684 <_Balloc>
 800cac6:	4605      	mov	r5, r0
 800cac8:	b948      	cbnz	r0, 800cade <__lshift+0x3e>
 800caca:	4602      	mov	r2, r0
 800cacc:	4b28      	ldr	r3, [pc, #160]	; (800cb70 <__lshift+0xd0>)
 800cace:	4829      	ldr	r0, [pc, #164]	; (800cb74 <__lshift+0xd4>)
 800cad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cad4:	f004 f956 	bl	8010d84 <__assert_func>
 800cad8:	3101      	adds	r1, #1
 800cada:	005b      	lsls	r3, r3, #1
 800cadc:	e7ee      	b.n	800cabc <__lshift+0x1c>
 800cade:	2300      	movs	r3, #0
 800cae0:	f100 0114 	add.w	r1, r0, #20
 800cae4:	f100 0210 	add.w	r2, r0, #16
 800cae8:	4618      	mov	r0, r3
 800caea:	4553      	cmp	r3, sl
 800caec:	db33      	blt.n	800cb56 <__lshift+0xb6>
 800caee:	6920      	ldr	r0, [r4, #16]
 800caf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caf4:	f104 0314 	add.w	r3, r4, #20
 800caf8:	f019 091f 	ands.w	r9, r9, #31
 800cafc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb04:	d02b      	beq.n	800cb5e <__lshift+0xbe>
 800cb06:	f1c9 0e20 	rsb	lr, r9, #32
 800cb0a:	468a      	mov	sl, r1
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	6818      	ldr	r0, [r3, #0]
 800cb10:	fa00 f009 	lsl.w	r0, r0, r9
 800cb14:	4302      	orrs	r2, r0
 800cb16:	f84a 2b04 	str.w	r2, [sl], #4
 800cb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1e:	459c      	cmp	ip, r3
 800cb20:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb24:	d8f3      	bhi.n	800cb0e <__lshift+0x6e>
 800cb26:	ebac 0304 	sub.w	r3, ip, r4
 800cb2a:	3b15      	subs	r3, #21
 800cb2c:	f023 0303 	bic.w	r3, r3, #3
 800cb30:	3304      	adds	r3, #4
 800cb32:	f104 0015 	add.w	r0, r4, #21
 800cb36:	4584      	cmp	ip, r0
 800cb38:	bf38      	it	cc
 800cb3a:	2304      	movcc	r3, #4
 800cb3c:	50ca      	str	r2, [r1, r3]
 800cb3e:	b10a      	cbz	r2, 800cb44 <__lshift+0xa4>
 800cb40:	f108 0602 	add.w	r6, r8, #2
 800cb44:	3e01      	subs	r6, #1
 800cb46:	4638      	mov	r0, r7
 800cb48:	612e      	str	r6, [r5, #16]
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	f7ff fdbf 	bl	800c6ce <_Bfree>
 800cb50:	4628      	mov	r0, r5
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	e7c5      	b.n	800caea <__lshift+0x4a>
 800cb5e:	3904      	subs	r1, #4
 800cb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb64:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb68:	459c      	cmp	ip, r3
 800cb6a:	d8f9      	bhi.n	800cb60 <__lshift+0xc0>
 800cb6c:	e7ea      	b.n	800cb44 <__lshift+0xa4>
 800cb6e:	bf00      	nop
 800cb70:	08011e9f 	.word	0x08011e9f
 800cb74:	08011f19 	.word	0x08011f19

0800cb78 <__mcmp>:
 800cb78:	b530      	push	{r4, r5, lr}
 800cb7a:	6902      	ldr	r2, [r0, #16]
 800cb7c:	690c      	ldr	r4, [r1, #16]
 800cb7e:	1b12      	subs	r2, r2, r4
 800cb80:	d10e      	bne.n	800cba0 <__mcmp+0x28>
 800cb82:	f100 0314 	add.w	r3, r0, #20
 800cb86:	3114      	adds	r1, #20
 800cb88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb98:	42a5      	cmp	r5, r4
 800cb9a:	d003      	beq.n	800cba4 <__mcmp+0x2c>
 800cb9c:	d305      	bcc.n	800cbaa <__mcmp+0x32>
 800cb9e:	2201      	movs	r2, #1
 800cba0:	4610      	mov	r0, r2
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	4283      	cmp	r3, r0
 800cba6:	d3f3      	bcc.n	800cb90 <__mcmp+0x18>
 800cba8:	e7fa      	b.n	800cba0 <__mcmp+0x28>
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	e7f7      	b.n	800cba0 <__mcmp+0x28>

0800cbb0 <__mdiff>:
 800cbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4617      	mov	r7, r2
 800cbbe:	f7ff ffdb 	bl	800cb78 <__mcmp>
 800cbc2:	1e05      	subs	r5, r0, #0
 800cbc4:	d110      	bne.n	800cbe8 <__mdiff+0x38>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7ff fd5b 	bl	800c684 <_Balloc>
 800cbce:	b930      	cbnz	r0, 800cbde <__mdiff+0x2e>
 800cbd0:	4b39      	ldr	r3, [pc, #228]	; (800ccb8 <__mdiff+0x108>)
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	f240 2132 	movw	r1, #562	; 0x232
 800cbd8:	4838      	ldr	r0, [pc, #224]	; (800ccbc <__mdiff+0x10c>)
 800cbda:	f004 f8d3 	bl	8010d84 <__assert_func>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe8:	bfa4      	itt	ge
 800cbea:	463b      	movge	r3, r7
 800cbec:	4627      	movge	r7, r4
 800cbee:	4630      	mov	r0, r6
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	bfa6      	itte	ge
 800cbf4:	461c      	movge	r4, r3
 800cbf6:	2500      	movge	r5, #0
 800cbf8:	2501      	movlt	r5, #1
 800cbfa:	f7ff fd43 	bl	800c684 <_Balloc>
 800cbfe:	b920      	cbnz	r0, 800cc0a <__mdiff+0x5a>
 800cc00:	4b2d      	ldr	r3, [pc, #180]	; (800ccb8 <__mdiff+0x108>)
 800cc02:	4602      	mov	r2, r0
 800cc04:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc08:	e7e6      	b.n	800cbd8 <__mdiff+0x28>
 800cc0a:	693e      	ldr	r6, [r7, #16]
 800cc0c:	60c5      	str	r5, [r0, #12]
 800cc0e:	6925      	ldr	r5, [r4, #16]
 800cc10:	f107 0114 	add.w	r1, r7, #20
 800cc14:	f104 0914 	add.w	r9, r4, #20
 800cc18:	f100 0e14 	add.w	lr, r0, #20
 800cc1c:	f107 0210 	add.w	r2, r7, #16
 800cc20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cc24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cc28:	46f2      	mov	sl, lr
 800cc2a:	2700      	movs	r7, #0
 800cc2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc34:	fa1f f883 	uxth.w	r8, r3
 800cc38:	fa17 f78b 	uxtah	r7, r7, fp
 800cc3c:	0c1b      	lsrs	r3, r3, #16
 800cc3e:	eba7 0808 	sub.w	r8, r7, r8
 800cc42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc4a:	fa1f f888 	uxth.w	r8, r8
 800cc4e:	141f      	asrs	r7, r3, #16
 800cc50:	454d      	cmp	r5, r9
 800cc52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc56:	f84a 3b04 	str.w	r3, [sl], #4
 800cc5a:	d8e7      	bhi.n	800cc2c <__mdiff+0x7c>
 800cc5c:	1b2b      	subs	r3, r5, r4
 800cc5e:	3b15      	subs	r3, #21
 800cc60:	f023 0303 	bic.w	r3, r3, #3
 800cc64:	3304      	adds	r3, #4
 800cc66:	3415      	adds	r4, #21
 800cc68:	42a5      	cmp	r5, r4
 800cc6a:	bf38      	it	cc
 800cc6c:	2304      	movcc	r3, #4
 800cc6e:	4419      	add	r1, r3
 800cc70:	4473      	add	r3, lr
 800cc72:	469e      	mov	lr, r3
 800cc74:	460d      	mov	r5, r1
 800cc76:	4565      	cmp	r5, ip
 800cc78:	d30e      	bcc.n	800cc98 <__mdiff+0xe8>
 800cc7a:	f10c 0203 	add.w	r2, ip, #3
 800cc7e:	1a52      	subs	r2, r2, r1
 800cc80:	f022 0203 	bic.w	r2, r2, #3
 800cc84:	3903      	subs	r1, #3
 800cc86:	458c      	cmp	ip, r1
 800cc88:	bf38      	it	cc
 800cc8a:	2200      	movcc	r2, #0
 800cc8c:	441a      	add	r2, r3
 800cc8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc92:	b17b      	cbz	r3, 800ccb4 <__mdiff+0x104>
 800cc94:	6106      	str	r6, [r0, #16]
 800cc96:	e7a5      	b.n	800cbe4 <__mdiff+0x34>
 800cc98:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc9c:	fa17 f488 	uxtah	r4, r7, r8
 800cca0:	1422      	asrs	r2, r4, #16
 800cca2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cca6:	b2a4      	uxth	r4, r4
 800cca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ccac:	f84e 4b04 	str.w	r4, [lr], #4
 800ccb0:	1417      	asrs	r7, r2, #16
 800ccb2:	e7e0      	b.n	800cc76 <__mdiff+0xc6>
 800ccb4:	3e01      	subs	r6, #1
 800ccb6:	e7ea      	b.n	800cc8e <__mdiff+0xde>
 800ccb8:	08011e9f 	.word	0x08011e9f
 800ccbc:	08011f19 	.word	0x08011f19

0800ccc0 <__ulp>:
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	ed8d 0b00 	vstr	d0, [sp]
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	4912      	ldr	r1, [pc, #72]	; (800cd14 <__ulp+0x54>)
 800ccca:	4019      	ands	r1, r3
 800cccc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	dd05      	ble.n	800cce0 <__ulp+0x20>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	ec43 2b10 	vmov	d0, r2, r3
 800ccdc:	b002      	add	sp, #8
 800ccde:	4770      	bx	lr
 800cce0:	4249      	negs	r1, r1
 800cce2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cce6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ccea:	f04f 0200 	mov.w	r2, #0
 800ccee:	f04f 0300 	mov.w	r3, #0
 800ccf2:	da04      	bge.n	800ccfe <__ulp+0x3e>
 800ccf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ccf8:	fa41 f300 	asr.w	r3, r1, r0
 800ccfc:	e7ec      	b.n	800ccd8 <__ulp+0x18>
 800ccfe:	f1a0 0114 	sub.w	r1, r0, #20
 800cd02:	291e      	cmp	r1, #30
 800cd04:	bfda      	itte	le
 800cd06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cd0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cd0e:	2101      	movgt	r1, #1
 800cd10:	460a      	mov	r2, r1
 800cd12:	e7e1      	b.n	800ccd8 <__ulp+0x18>
 800cd14:	7ff00000 	.word	0x7ff00000

0800cd18 <__b2d>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	6905      	ldr	r5, [r0, #16]
 800cd1c:	f100 0714 	add.w	r7, r0, #20
 800cd20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cd24:	1f2e      	subs	r6, r5, #4
 800cd26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7ff fd6c 	bl	800c808 <__hi0bits>
 800cd30:	f1c0 0320 	rsb	r3, r0, #32
 800cd34:	280a      	cmp	r0, #10
 800cd36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cdb4 <__b2d+0x9c>
 800cd3a:	600b      	str	r3, [r1, #0]
 800cd3c:	dc14      	bgt.n	800cd68 <__b2d+0x50>
 800cd3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cd42:	fa24 f10e 	lsr.w	r1, r4, lr
 800cd46:	42b7      	cmp	r7, r6
 800cd48:	ea41 030c 	orr.w	r3, r1, ip
 800cd4c:	bf34      	ite	cc
 800cd4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd52:	2100      	movcs	r1, #0
 800cd54:	3015      	adds	r0, #21
 800cd56:	fa04 f000 	lsl.w	r0, r4, r0
 800cd5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cd5e:	ea40 0201 	orr.w	r2, r0, r1
 800cd62:	ec43 2b10 	vmov	d0, r2, r3
 800cd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd68:	42b7      	cmp	r7, r6
 800cd6a:	bf3a      	itte	cc
 800cd6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd70:	f1a5 0608 	subcc.w	r6, r5, #8
 800cd74:	2100      	movcs	r1, #0
 800cd76:	380b      	subs	r0, #11
 800cd78:	d017      	beq.n	800cdaa <__b2d+0x92>
 800cd7a:	f1c0 0c20 	rsb	ip, r0, #32
 800cd7e:	fa04 f500 	lsl.w	r5, r4, r0
 800cd82:	42be      	cmp	r6, r7
 800cd84:	fa21 f40c 	lsr.w	r4, r1, ip
 800cd88:	ea45 0504 	orr.w	r5, r5, r4
 800cd8c:	bf8c      	ite	hi
 800cd8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cd92:	2400      	movls	r4, #0
 800cd94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cd98:	fa01 f000 	lsl.w	r0, r1, r0
 800cd9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cda0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cda4:	ea40 0204 	orr.w	r2, r0, r4
 800cda8:	e7db      	b.n	800cd62 <__b2d+0x4a>
 800cdaa:	ea44 030c 	orr.w	r3, r4, ip
 800cdae:	460a      	mov	r2, r1
 800cdb0:	e7d7      	b.n	800cd62 <__b2d+0x4a>
 800cdb2:	bf00      	nop
 800cdb4:	3ff00000 	.word	0x3ff00000

0800cdb8 <__d2b>:
 800cdb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4689      	mov	r9, r1
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	ec57 6b10 	vmov	r6, r7, d0
 800cdc4:	4690      	mov	r8, r2
 800cdc6:	f7ff fc5d 	bl	800c684 <_Balloc>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	b930      	cbnz	r0, 800cddc <__d2b+0x24>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4b25      	ldr	r3, [pc, #148]	; (800ce68 <__d2b+0xb0>)
 800cdd2:	4826      	ldr	r0, [pc, #152]	; (800ce6c <__d2b+0xb4>)
 800cdd4:	f240 310a 	movw	r1, #778	; 0x30a
 800cdd8:	f003 ffd4 	bl	8010d84 <__assert_func>
 800cddc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cde0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cde4:	bb35      	cbnz	r5, 800ce34 <__d2b+0x7c>
 800cde6:	2e00      	cmp	r6, #0
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	d028      	beq.n	800ce3e <__d2b+0x86>
 800cdec:	4668      	mov	r0, sp
 800cdee:	9600      	str	r6, [sp, #0]
 800cdf0:	f7ff fd2a 	bl	800c848 <__lo0bits>
 800cdf4:	9900      	ldr	r1, [sp, #0]
 800cdf6:	b300      	cbz	r0, 800ce3a <__d2b+0x82>
 800cdf8:	9a01      	ldr	r2, [sp, #4]
 800cdfa:	f1c0 0320 	rsb	r3, r0, #32
 800cdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ce02:	430b      	orrs	r3, r1
 800ce04:	40c2      	lsrs	r2, r0
 800ce06:	6163      	str	r3, [r4, #20]
 800ce08:	9201      	str	r2, [sp, #4]
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	61a3      	str	r3, [r4, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bf14      	ite	ne
 800ce12:	2202      	movne	r2, #2
 800ce14:	2201      	moveq	r2, #1
 800ce16:	6122      	str	r2, [r4, #16]
 800ce18:	b1d5      	cbz	r5, 800ce50 <__d2b+0x98>
 800ce1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce1e:	4405      	add	r5, r0
 800ce20:	f8c9 5000 	str.w	r5, [r9]
 800ce24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce28:	f8c8 0000 	str.w	r0, [r8]
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	b003      	add	sp, #12
 800ce30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce38:	e7d5      	b.n	800cde6 <__d2b+0x2e>
 800ce3a:	6161      	str	r1, [r4, #20]
 800ce3c:	e7e5      	b.n	800ce0a <__d2b+0x52>
 800ce3e:	a801      	add	r0, sp, #4
 800ce40:	f7ff fd02 	bl	800c848 <__lo0bits>
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	6163      	str	r3, [r4, #20]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	6122      	str	r2, [r4, #16]
 800ce4c:	3020      	adds	r0, #32
 800ce4e:	e7e3      	b.n	800ce18 <__d2b+0x60>
 800ce50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce58:	f8c9 0000 	str.w	r0, [r9]
 800ce5c:	6918      	ldr	r0, [r3, #16]
 800ce5e:	f7ff fcd3 	bl	800c808 <__hi0bits>
 800ce62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce66:	e7df      	b.n	800ce28 <__d2b+0x70>
 800ce68:	08011e9f 	.word	0x08011e9f
 800ce6c:	08011f19 	.word	0x08011f19

0800ce70 <__ratio>:
 800ce70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4688      	mov	r8, r1
 800ce76:	4669      	mov	r1, sp
 800ce78:	4681      	mov	r9, r0
 800ce7a:	f7ff ff4d 	bl	800cd18 <__b2d>
 800ce7e:	a901      	add	r1, sp, #4
 800ce80:	4640      	mov	r0, r8
 800ce82:	ec55 4b10 	vmov	r4, r5, d0
 800ce86:	f7ff ff47 	bl	800cd18 <__b2d>
 800ce8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce92:	eba3 0c02 	sub.w	ip, r3, r2
 800ce96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cea0:	ec51 0b10 	vmov	r0, r1, d0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bfd6      	itet	le
 800cea8:	460a      	movle	r2, r1
 800ceaa:	462a      	movgt	r2, r5
 800ceac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ceb0:	468b      	mov	fp, r1
 800ceb2:	462f      	mov	r7, r5
 800ceb4:	bfd4      	ite	le
 800ceb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ceba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cebe:	4620      	mov	r0, r4
 800cec0:	ee10 2a10 	vmov	r2, s0
 800cec4:	465b      	mov	r3, fp
 800cec6:	4639      	mov	r1, r7
 800cec8:	f7f3 fcd0 	bl	800086c <__aeabi_ddiv>
 800cecc:	ec41 0b10 	vmov	d0, r0, r1
 800ced0:	b003      	add	sp, #12
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ced6 <__copybits>:
 800ced6:	3901      	subs	r1, #1
 800ced8:	b570      	push	{r4, r5, r6, lr}
 800ceda:	1149      	asrs	r1, r1, #5
 800cedc:	6914      	ldr	r4, [r2, #16]
 800cede:	3101      	adds	r1, #1
 800cee0:	f102 0314 	add.w	r3, r2, #20
 800cee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cee8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ceec:	1f05      	subs	r5, r0, #4
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	d30c      	bcc.n	800cf0c <__copybits+0x36>
 800cef2:	1aa3      	subs	r3, r4, r2
 800cef4:	3b11      	subs	r3, #17
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	3211      	adds	r2, #17
 800cefc:	42a2      	cmp	r2, r4
 800cefe:	bf88      	it	hi
 800cf00:	2300      	movhi	r3, #0
 800cf02:	4418      	add	r0, r3
 800cf04:	2300      	movs	r3, #0
 800cf06:	4288      	cmp	r0, r1
 800cf08:	d305      	bcc.n	800cf16 <__copybits+0x40>
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf10:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf14:	e7eb      	b.n	800ceee <__copybits+0x18>
 800cf16:	f840 3b04 	str.w	r3, [r0], #4
 800cf1a:	e7f4      	b.n	800cf06 <__copybits+0x30>

0800cf1c <__any_on>:
 800cf1c:	f100 0214 	add.w	r2, r0, #20
 800cf20:	6900      	ldr	r0, [r0, #16]
 800cf22:	114b      	asrs	r3, r1, #5
 800cf24:	4298      	cmp	r0, r3
 800cf26:	b510      	push	{r4, lr}
 800cf28:	db11      	blt.n	800cf4e <__any_on+0x32>
 800cf2a:	dd0a      	ble.n	800cf42 <__any_on+0x26>
 800cf2c:	f011 011f 	ands.w	r1, r1, #31
 800cf30:	d007      	beq.n	800cf42 <__any_on+0x26>
 800cf32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf36:	fa24 f001 	lsr.w	r0, r4, r1
 800cf3a:	fa00 f101 	lsl.w	r1, r0, r1
 800cf3e:	428c      	cmp	r4, r1
 800cf40:	d10b      	bne.n	800cf5a <__any_on+0x3e>
 800cf42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d803      	bhi.n	800cf52 <__any_on+0x36>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	4603      	mov	r3, r0
 800cf50:	e7f7      	b.n	800cf42 <__any_on+0x26>
 800cf52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf56:	2900      	cmp	r1, #0
 800cf58:	d0f5      	beq.n	800cf46 <__any_on+0x2a>
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	e7f6      	b.n	800cf4c <__any_on+0x30>
	...

0800cf60 <realloc>:
 800cf60:	4b02      	ldr	r3, [pc, #8]	; (800cf6c <realloc+0xc>)
 800cf62:	460a      	mov	r2, r1
 800cf64:	4601      	mov	r1, r0
 800cf66:	6818      	ldr	r0, [r3, #0]
 800cf68:	f000 b802 	b.w	800cf70 <_realloc_r>
 800cf6c:	2000001c 	.word	0x2000001c

0800cf70 <_realloc_r>:
 800cf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	4681      	mov	r9, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	b929      	cbnz	r1, 800cf86 <_realloc_r+0x16>
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	b003      	add	sp, #12
 800cf7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf82:	f7f9 bbf9 	b.w	8006778 <_malloc_r>
 800cf86:	9201      	str	r2, [sp, #4]
 800cf88:	f7f9 fe40 	bl	8006c0c <__malloc_lock>
 800cf8c:	9a01      	ldr	r2, [sp, #4]
 800cf8e:	f102 080b 	add.w	r8, r2, #11
 800cf92:	f1b8 0f16 	cmp.w	r8, #22
 800cf96:	d90b      	bls.n	800cfb0 <_realloc_r+0x40>
 800cf98:	f038 0807 	bics.w	r8, r8, #7
 800cf9c:	d50a      	bpl.n	800cfb4 <_realloc_r+0x44>
 800cf9e:	230c      	movs	r3, #12
 800cfa0:	f8c9 3000 	str.w	r3, [r9]
 800cfa4:	f04f 0b00 	mov.w	fp, #0
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	b003      	add	sp, #12
 800cfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb0:	f04f 0810 	mov.w	r8, #16
 800cfb4:	4590      	cmp	r8, r2
 800cfb6:	d3f2      	bcc.n	800cf9e <_realloc_r+0x2e>
 800cfb8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800cfbc:	f025 0603 	bic.w	r6, r5, #3
 800cfc0:	45b0      	cmp	r8, r6
 800cfc2:	f1a4 0a08 	sub.w	sl, r4, #8
 800cfc6:	f340 8170 	ble.w	800d2aa <_realloc_r+0x33a>
 800cfca:	48a9      	ldr	r0, [pc, #676]	; (800d270 <_realloc_r+0x300>)
 800cfcc:	9001      	str	r0, [sp, #4]
 800cfce:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800cfd2:	eb0a 0306 	add.w	r3, sl, r6
 800cfd6:	459c      	cmp	ip, r3
 800cfd8:	6859      	ldr	r1, [r3, #4]
 800cfda:	d005      	beq.n	800cfe8 <_realloc_r+0x78>
 800cfdc:	f021 0001 	bic.w	r0, r1, #1
 800cfe0:	4418      	add	r0, r3
 800cfe2:	6840      	ldr	r0, [r0, #4]
 800cfe4:	07c7      	lsls	r7, r0, #31
 800cfe6:	d427      	bmi.n	800d038 <_realloc_r+0xc8>
 800cfe8:	f021 0103 	bic.w	r1, r1, #3
 800cfec:	459c      	cmp	ip, r3
 800cfee:	eb06 0701 	add.w	r7, r6, r1
 800cff2:	d119      	bne.n	800d028 <_realloc_r+0xb8>
 800cff4:	f108 0010 	add.w	r0, r8, #16
 800cff8:	42b8      	cmp	r0, r7
 800cffa:	dc1f      	bgt.n	800d03c <_realloc_r+0xcc>
 800cffc:	eb0a 0308 	add.w	r3, sl, r8
 800d000:	9a01      	ldr	r2, [sp, #4]
 800d002:	eba7 0708 	sub.w	r7, r7, r8
 800d006:	f047 0701 	orr.w	r7, r7, #1
 800d00a:	6093      	str	r3, [r2, #8]
 800d00c:	605f      	str	r7, [r3, #4]
 800d00e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	ea43 0308 	orr.w	r3, r3, r8
 800d01a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d01e:	4648      	mov	r0, r9
 800d020:	f7f9 fdfa 	bl	8006c18 <__malloc_unlock>
 800d024:	46a3      	mov	fp, r4
 800d026:	e7bf      	b.n	800cfa8 <_realloc_r+0x38>
 800d028:	45b8      	cmp	r8, r7
 800d02a:	dc07      	bgt.n	800d03c <_realloc_r+0xcc>
 800d02c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	6093      	str	r3, [r2, #8]
 800d034:	4655      	mov	r5, sl
 800d036:	e07f      	b.n	800d138 <_realloc_r+0x1c8>
 800d038:	2100      	movs	r1, #0
 800d03a:	460b      	mov	r3, r1
 800d03c:	07e8      	lsls	r0, r5, #31
 800d03e:	f100 80e5 	bmi.w	800d20c <_realloc_r+0x29c>
 800d042:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800d046:	ebaa 0505 	sub.w	r5, sl, r5
 800d04a:	6868      	ldr	r0, [r5, #4]
 800d04c:	f020 0003 	bic.w	r0, r0, #3
 800d050:	eb00 0b06 	add.w	fp, r0, r6
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 80a5 	beq.w	800d1a4 <_realloc_r+0x234>
 800d05a:	459c      	cmp	ip, r3
 800d05c:	eb01 070b 	add.w	r7, r1, fp
 800d060:	d14a      	bne.n	800d0f8 <_realloc_r+0x188>
 800d062:	f108 0310 	add.w	r3, r8, #16
 800d066:	42bb      	cmp	r3, r7
 800d068:	f300 809c 	bgt.w	800d1a4 <_realloc_r+0x234>
 800d06c:	46ab      	mov	fp, r5
 800d06e:	68eb      	ldr	r3, [r5, #12]
 800d070:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800d074:	60d3      	str	r3, [r2, #12]
 800d076:	609a      	str	r2, [r3, #8]
 800d078:	1f32      	subs	r2, r6, #4
 800d07a:	2a24      	cmp	r2, #36	; 0x24
 800d07c:	d837      	bhi.n	800d0ee <_realloc_r+0x17e>
 800d07e:	2a13      	cmp	r2, #19
 800d080:	d933      	bls.n	800d0ea <_realloc_r+0x17a>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	60ab      	str	r3, [r5, #8]
 800d086:	6863      	ldr	r3, [r4, #4]
 800d088:	60eb      	str	r3, [r5, #12]
 800d08a:	2a1b      	cmp	r2, #27
 800d08c:	d81b      	bhi.n	800d0c6 <_realloc_r+0x156>
 800d08e:	3408      	adds	r4, #8
 800d090:	f105 0310 	add.w	r3, r5, #16
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	601a      	str	r2, [r3, #0]
 800d098:	6862      	ldr	r2, [r4, #4]
 800d09a:	605a      	str	r2, [r3, #4]
 800d09c:	68a2      	ldr	r2, [r4, #8]
 800d09e:	609a      	str	r2, [r3, #8]
 800d0a0:	eb05 0308 	add.w	r3, r5, r8
 800d0a4:	9a01      	ldr	r2, [sp, #4]
 800d0a6:	eba7 0708 	sub.w	r7, r7, r8
 800d0aa:	f047 0701 	orr.w	r7, r7, #1
 800d0ae:	6093      	str	r3, [r2, #8]
 800d0b0:	605f      	str	r7, [r3, #4]
 800d0b2:	686b      	ldr	r3, [r5, #4]
 800d0b4:	f003 0301 	and.w	r3, r3, #1
 800d0b8:	ea43 0308 	orr.w	r3, r3, r8
 800d0bc:	606b      	str	r3, [r5, #4]
 800d0be:	4648      	mov	r0, r9
 800d0c0:	f7f9 fdaa 	bl	8006c18 <__malloc_unlock>
 800d0c4:	e770      	b.n	800cfa8 <_realloc_r+0x38>
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	612b      	str	r3, [r5, #16]
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	616b      	str	r3, [r5, #20]
 800d0ce:	2a24      	cmp	r2, #36	; 0x24
 800d0d0:	bf01      	itttt	eq
 800d0d2:	6923      	ldreq	r3, [r4, #16]
 800d0d4:	61ab      	streq	r3, [r5, #24]
 800d0d6:	6962      	ldreq	r2, [r4, #20]
 800d0d8:	61ea      	streq	r2, [r5, #28]
 800d0da:	bf19      	ittee	ne
 800d0dc:	3410      	addne	r4, #16
 800d0de:	f105 0318 	addne.w	r3, r5, #24
 800d0e2:	f105 0320 	addeq.w	r3, r5, #32
 800d0e6:	3418      	addeq	r4, #24
 800d0e8:	e7d4      	b.n	800d094 <_realloc_r+0x124>
 800d0ea:	465b      	mov	r3, fp
 800d0ec:	e7d2      	b.n	800d094 <_realloc_r+0x124>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4658      	mov	r0, fp
 800d0f2:	f7ff faad 	bl	800c650 <memmove>
 800d0f6:	e7d3      	b.n	800d0a0 <_realloc_r+0x130>
 800d0f8:	45b8      	cmp	r8, r7
 800d0fa:	dc53      	bgt.n	800d1a4 <_realloc_r+0x234>
 800d0fc:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d100:	4628      	mov	r0, r5
 800d102:	60da      	str	r2, [r3, #12]
 800d104:	6093      	str	r3, [r2, #8]
 800d106:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d10a:	68eb      	ldr	r3, [r5, #12]
 800d10c:	60d3      	str	r3, [r2, #12]
 800d10e:	609a      	str	r2, [r3, #8]
 800d110:	1f32      	subs	r2, r6, #4
 800d112:	2a24      	cmp	r2, #36	; 0x24
 800d114:	d842      	bhi.n	800d19c <_realloc_r+0x22c>
 800d116:	2a13      	cmp	r2, #19
 800d118:	d908      	bls.n	800d12c <_realloc_r+0x1bc>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	60ab      	str	r3, [r5, #8]
 800d11e:	6863      	ldr	r3, [r4, #4]
 800d120:	60eb      	str	r3, [r5, #12]
 800d122:	2a1b      	cmp	r2, #27
 800d124:	d828      	bhi.n	800d178 <_realloc_r+0x208>
 800d126:	3408      	adds	r4, #8
 800d128:	f105 0010 	add.w	r0, r5, #16
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	6003      	str	r3, [r0, #0]
 800d130:	6863      	ldr	r3, [r4, #4]
 800d132:	6043      	str	r3, [r0, #4]
 800d134:	68a3      	ldr	r3, [r4, #8]
 800d136:	6083      	str	r3, [r0, #8]
 800d138:	686a      	ldr	r2, [r5, #4]
 800d13a:	eba7 0008 	sub.w	r0, r7, r8
 800d13e:	280f      	cmp	r0, #15
 800d140:	f002 0201 	and.w	r2, r2, #1
 800d144:	eb05 0307 	add.w	r3, r5, r7
 800d148:	f240 80b1 	bls.w	800d2ae <_realloc_r+0x33e>
 800d14c:	eb05 0108 	add.w	r1, r5, r8
 800d150:	ea48 0202 	orr.w	r2, r8, r2
 800d154:	f040 0001 	orr.w	r0, r0, #1
 800d158:	606a      	str	r2, [r5, #4]
 800d15a:	6048      	str	r0, [r1, #4]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	f042 0201 	orr.w	r2, r2, #1
 800d162:	605a      	str	r2, [r3, #4]
 800d164:	3108      	adds	r1, #8
 800d166:	4648      	mov	r0, r9
 800d168:	f7f9 f90e 	bl	8006388 <_free_r>
 800d16c:	4648      	mov	r0, r9
 800d16e:	f7f9 fd53 	bl	8006c18 <__malloc_unlock>
 800d172:	f105 0b08 	add.w	fp, r5, #8
 800d176:	e717      	b.n	800cfa8 <_realloc_r+0x38>
 800d178:	68a3      	ldr	r3, [r4, #8]
 800d17a:	612b      	str	r3, [r5, #16]
 800d17c:	68e3      	ldr	r3, [r4, #12]
 800d17e:	616b      	str	r3, [r5, #20]
 800d180:	2a24      	cmp	r2, #36	; 0x24
 800d182:	bf01      	itttt	eq
 800d184:	6923      	ldreq	r3, [r4, #16]
 800d186:	61ab      	streq	r3, [r5, #24]
 800d188:	6963      	ldreq	r3, [r4, #20]
 800d18a:	61eb      	streq	r3, [r5, #28]
 800d18c:	bf19      	ittee	ne
 800d18e:	3410      	addne	r4, #16
 800d190:	f105 0018 	addne.w	r0, r5, #24
 800d194:	f105 0020 	addeq.w	r0, r5, #32
 800d198:	3418      	addeq	r4, #24
 800d19a:	e7c7      	b.n	800d12c <_realloc_r+0x1bc>
 800d19c:	4621      	mov	r1, r4
 800d19e:	f7ff fa57 	bl	800c650 <memmove>
 800d1a2:	e7c9      	b.n	800d138 <_realloc_r+0x1c8>
 800d1a4:	45d8      	cmp	r8, fp
 800d1a6:	dc31      	bgt.n	800d20c <_realloc_r+0x29c>
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	68eb      	ldr	r3, [r5, #12]
 800d1ac:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d1b0:	60d3      	str	r3, [r2, #12]
 800d1b2:	609a      	str	r2, [r3, #8]
 800d1b4:	1f32      	subs	r2, r6, #4
 800d1b6:	2a24      	cmp	r2, #36	; 0x24
 800d1b8:	d824      	bhi.n	800d204 <_realloc_r+0x294>
 800d1ba:	2a13      	cmp	r2, #19
 800d1bc:	d908      	bls.n	800d1d0 <_realloc_r+0x260>
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	60ab      	str	r3, [r5, #8]
 800d1c2:	6863      	ldr	r3, [r4, #4]
 800d1c4:	60eb      	str	r3, [r5, #12]
 800d1c6:	2a1b      	cmp	r2, #27
 800d1c8:	d80a      	bhi.n	800d1e0 <_realloc_r+0x270>
 800d1ca:	3408      	adds	r4, #8
 800d1cc:	f105 0010 	add.w	r0, r5, #16
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	6003      	str	r3, [r0, #0]
 800d1d4:	6863      	ldr	r3, [r4, #4]
 800d1d6:	6043      	str	r3, [r0, #4]
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	6083      	str	r3, [r0, #8]
 800d1dc:	465f      	mov	r7, fp
 800d1de:	e7ab      	b.n	800d138 <_realloc_r+0x1c8>
 800d1e0:	68a3      	ldr	r3, [r4, #8]
 800d1e2:	612b      	str	r3, [r5, #16]
 800d1e4:	68e3      	ldr	r3, [r4, #12]
 800d1e6:	616b      	str	r3, [r5, #20]
 800d1e8:	2a24      	cmp	r2, #36	; 0x24
 800d1ea:	bf01      	itttt	eq
 800d1ec:	6923      	ldreq	r3, [r4, #16]
 800d1ee:	61ab      	streq	r3, [r5, #24]
 800d1f0:	6963      	ldreq	r3, [r4, #20]
 800d1f2:	61eb      	streq	r3, [r5, #28]
 800d1f4:	bf19      	ittee	ne
 800d1f6:	3410      	addne	r4, #16
 800d1f8:	f105 0018 	addne.w	r0, r5, #24
 800d1fc:	f105 0020 	addeq.w	r0, r5, #32
 800d200:	3418      	addeq	r4, #24
 800d202:	e7e5      	b.n	800d1d0 <_realloc_r+0x260>
 800d204:	4621      	mov	r1, r4
 800d206:	f7ff fa23 	bl	800c650 <memmove>
 800d20a:	e7e7      	b.n	800d1dc <_realloc_r+0x26c>
 800d20c:	4611      	mov	r1, r2
 800d20e:	4648      	mov	r0, r9
 800d210:	f7f9 fab2 	bl	8006778 <_malloc_r>
 800d214:	4683      	mov	fp, r0
 800d216:	2800      	cmp	r0, #0
 800d218:	f43f af51 	beq.w	800d0be <_realloc_r+0x14e>
 800d21c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d220:	f023 0301 	bic.w	r3, r3, #1
 800d224:	4453      	add	r3, sl
 800d226:	f1a0 0208 	sub.w	r2, r0, #8
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d105      	bne.n	800d23a <_realloc_r+0x2ca>
 800d22e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d232:	f027 0703 	bic.w	r7, r7, #3
 800d236:	4437      	add	r7, r6
 800d238:	e6fc      	b.n	800d034 <_realloc_r+0xc4>
 800d23a:	1f32      	subs	r2, r6, #4
 800d23c:	2a24      	cmp	r2, #36	; 0x24
 800d23e:	d830      	bhi.n	800d2a2 <_realloc_r+0x332>
 800d240:	2a13      	cmp	r2, #19
 800d242:	d92b      	bls.n	800d29c <_realloc_r+0x32c>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	6003      	str	r3, [r0, #0]
 800d248:	6863      	ldr	r3, [r4, #4]
 800d24a:	6043      	str	r3, [r0, #4]
 800d24c:	2a1b      	cmp	r2, #27
 800d24e:	d811      	bhi.n	800d274 <_realloc_r+0x304>
 800d250:	f104 0208 	add.w	r2, r4, #8
 800d254:	f100 0308 	add.w	r3, r0, #8
 800d258:	6811      	ldr	r1, [r2, #0]
 800d25a:	6019      	str	r1, [r3, #0]
 800d25c:	6851      	ldr	r1, [r2, #4]
 800d25e:	6059      	str	r1, [r3, #4]
 800d260:	6892      	ldr	r2, [r2, #8]
 800d262:	609a      	str	r2, [r3, #8]
 800d264:	4621      	mov	r1, r4
 800d266:	4648      	mov	r0, r9
 800d268:	f7f9 f88e 	bl	8006388 <_free_r>
 800d26c:	e727      	b.n	800d0be <_realloc_r+0x14e>
 800d26e:	bf00      	nop
 800d270:	20000448 	.word	0x20000448
 800d274:	68a3      	ldr	r3, [r4, #8]
 800d276:	6083      	str	r3, [r0, #8]
 800d278:	68e3      	ldr	r3, [r4, #12]
 800d27a:	60c3      	str	r3, [r0, #12]
 800d27c:	2a24      	cmp	r2, #36	; 0x24
 800d27e:	bf01      	itttt	eq
 800d280:	6923      	ldreq	r3, [r4, #16]
 800d282:	6103      	streq	r3, [r0, #16]
 800d284:	6961      	ldreq	r1, [r4, #20]
 800d286:	6141      	streq	r1, [r0, #20]
 800d288:	bf19      	ittee	ne
 800d28a:	f104 0210 	addne.w	r2, r4, #16
 800d28e:	f100 0310 	addne.w	r3, r0, #16
 800d292:	f104 0218 	addeq.w	r2, r4, #24
 800d296:	f100 0318 	addeq.w	r3, r0, #24
 800d29a:	e7dd      	b.n	800d258 <_realloc_r+0x2e8>
 800d29c:	4603      	mov	r3, r0
 800d29e:	4622      	mov	r2, r4
 800d2a0:	e7da      	b.n	800d258 <_realloc_r+0x2e8>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	f7ff f9d4 	bl	800c650 <memmove>
 800d2a8:	e7dc      	b.n	800d264 <_realloc_r+0x2f4>
 800d2aa:	4637      	mov	r7, r6
 800d2ac:	e6c2      	b.n	800d034 <_realloc_r+0xc4>
 800d2ae:	4317      	orrs	r7, r2
 800d2b0:	606f      	str	r7, [r5, #4]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	f042 0201 	orr.w	r2, r2, #1
 800d2b8:	605a      	str	r2, [r3, #4]
 800d2ba:	e757      	b.n	800d16c <_realloc_r+0x1fc>

0800d2bc <lflush>:
 800d2bc:	8983      	ldrh	r3, [r0, #12]
 800d2be:	f003 0309 	and.w	r3, r3, #9
 800d2c2:	2b09      	cmp	r3, #9
 800d2c4:	d101      	bne.n	800d2ca <lflush+0xe>
 800d2c6:	f7fe bd7b 	b.w	800bdc0 <fflush>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <__srefill_r>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	b118      	cbz	r0, 800d2e0 <__srefill_r+0x10>
 800d2d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d2da:	b90b      	cbnz	r3, 800d2e0 <__srefill_r+0x10>
 800d2dc:	f7fe fdc8 	bl	800be70 <__sinit>
 800d2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2e4:	049f      	lsls	r7, r3, #18
 800d2e6:	d406      	bmi.n	800d2f6 <__srefill_r+0x26>
 800d2e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d2ec:	81a3      	strh	r3, [r4, #12]
 800d2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2f4:	6663      	str	r3, [r4, #100]	; 0x64
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	6063      	str	r3, [r4, #4]
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d300:	069e      	lsls	r6, r3, #26
 800d302:	d502      	bpl.n	800d30a <__srefill_r+0x3a>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	e05c      	b.n	800d3c4 <__srefill_r+0xf4>
 800d30a:	0758      	lsls	r0, r3, #29
 800d30c:	d448      	bmi.n	800d3a0 <__srefill_r+0xd0>
 800d30e:	06d9      	lsls	r1, r3, #27
 800d310:	d405      	bmi.n	800d31e <__srefill_r+0x4e>
 800d312:	2309      	movs	r3, #9
 800d314:	602b      	str	r3, [r5, #0]
 800d316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	e7f2      	b.n	800d304 <__srefill_r+0x34>
 800d31e:	071a      	lsls	r2, r3, #28
 800d320:	d50b      	bpl.n	800d33a <__srefill_r+0x6a>
 800d322:	4621      	mov	r1, r4
 800d324:	4628      	mov	r0, r5
 800d326:	f7fe fd25 	bl	800bd74 <_fflush_r>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d1ea      	bne.n	800d304 <__srefill_r+0x34>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	60a0      	str	r0, [r4, #8]
 800d332:	f023 0308 	bic.w	r3, r3, #8
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	61a0      	str	r0, [r4, #24]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	f043 0304 	orr.w	r3, r3, #4
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	b91b      	cbnz	r3, 800d34e <__srefill_r+0x7e>
 800d346:	4621      	mov	r1, r4
 800d348:	4628      	mov	r0, r5
 800d34a:	f7ff f907 	bl	800c55c <__smakebuf_r>
 800d34e:	89a6      	ldrh	r6, [r4, #12]
 800d350:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800d354:	07b3      	lsls	r3, r6, #30
 800d356:	d00f      	beq.n	800d378 <__srefill_r+0xa8>
 800d358:	2301      	movs	r3, #1
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	4b1b      	ldr	r3, [pc, #108]	; (800d3cc <__srefill_r+0xfc>)
 800d35e:	491c      	ldr	r1, [pc, #112]	; (800d3d0 <__srefill_r+0x100>)
 800d360:	6818      	ldr	r0, [r3, #0]
 800d362:	f006 0609 	and.w	r6, r6, #9
 800d366:	f7fe ff71 	bl	800c24c <_fwalk>
 800d36a:	2e09      	cmp	r6, #9
 800d36c:	81a7      	strh	r7, [r4, #12]
 800d36e:	d103      	bne.n	800d378 <__srefill_r+0xa8>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f7fe fc70 	bl	800bc58 <__sflush_r>
 800d378:	6922      	ldr	r2, [r4, #16]
 800d37a:	6a26      	ldr	r6, [r4, #32]
 800d37c:	6963      	ldr	r3, [r4, #20]
 800d37e:	69e1      	ldr	r1, [r4, #28]
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	4628      	mov	r0, r5
 800d384:	47b0      	blx	r6
 800d386:	2800      	cmp	r0, #0
 800d388:	6060      	str	r0, [r4, #4]
 800d38a:	dc1c      	bgt.n	800d3c6 <__srefill_r+0xf6>
 800d38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d390:	bf17      	itett	ne
 800d392:	2200      	movne	r2, #0
 800d394:	f043 0320 	orreq.w	r3, r3, #32
 800d398:	6062      	strne	r2, [r4, #4]
 800d39a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800d39e:	e7bc      	b.n	800d31a <__srefill_r+0x4a>
 800d3a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	d0cd      	beq.n	800d342 <__srefill_r+0x72>
 800d3a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	d002      	beq.n	800d3b4 <__srefill_r+0xe4>
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f7f8 ffea 	bl	8006388 <_free_r>
 800d3b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d3b6:	6063      	str	r3, [r4, #4]
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	6320      	str	r0, [r4, #48]	; 0x30
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0c0      	beq.n	800d342 <__srefill_r+0x72>
 800d3c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3c2:	6023      	str	r3, [r4, #0]
 800d3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e7fc      	b.n	800d3c4 <__srefill_r+0xf4>
 800d3ca:	bf00      	nop
 800d3cc:	08011bfc 	.word	0x08011bfc
 800d3d0:	0800d2bd 	.word	0x0800d2bd

0800d3d4 <frexp>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	ec55 4b10 	vmov	r4, r5, d0
 800d3dc:	6001      	str	r1, [r0, #0]
 800d3de:	4916      	ldr	r1, [pc, #88]	; (800d438 <frexp+0x64>)
 800d3e0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d3e4:	428a      	cmp	r2, r1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	462b      	mov	r3, r5
 800d3ea:	dc22      	bgt.n	800d432 <frexp+0x5e>
 800d3ec:	ee10 1a10 	vmov	r1, s0
 800d3f0:	4311      	orrs	r1, r2
 800d3f2:	d01e      	beq.n	800d432 <frexp+0x5e>
 800d3f4:	4911      	ldr	r1, [pc, #68]	; (800d43c <frexp+0x68>)
 800d3f6:	4029      	ands	r1, r5
 800d3f8:	b969      	cbnz	r1, 800d416 <frexp+0x42>
 800d3fa:	4b11      	ldr	r3, [pc, #68]	; (800d440 <frexp+0x6c>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	ee10 0a10 	vmov	r0, s0
 800d402:	4629      	mov	r1, r5
 800d404:	f7f3 f908 	bl	8000618 <__aeabi_dmul>
 800d408:	460b      	mov	r3, r1
 800d40a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d40e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d412:	4604      	mov	r4, r0
 800d414:	6031      	str	r1, [r6, #0]
 800d416:	6831      	ldr	r1, [r6, #0]
 800d418:	1512      	asrs	r2, r2, #20
 800d41a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d41e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800d422:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d426:	440a      	add	r2, r1
 800d428:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800d42c:	6032      	str	r2, [r6, #0]
 800d42e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800d432:	ec45 4b10 	vmov	d0, r4, r5
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	7fefffff 	.word	0x7fefffff
 800d43c:	7ff00000 	.word	0x7ff00000
 800d440:	43500000 	.word	0x43500000

0800d444 <__sccl>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	780b      	ldrb	r3, [r1, #0]
 800d448:	4604      	mov	r4, r0
 800d44a:	2b5e      	cmp	r3, #94	; 0x5e
 800d44c:	bf0b      	itete	eq
 800d44e:	784b      	ldrbeq	r3, [r1, #1]
 800d450:	1c48      	addne	r0, r1, #1
 800d452:	1c88      	addeq	r0, r1, #2
 800d454:	2200      	movne	r2, #0
 800d456:	bf08      	it	eq
 800d458:	2201      	moveq	r2, #1
 800d45a:	1e61      	subs	r1, r4, #1
 800d45c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d460:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d464:	42a9      	cmp	r1, r5
 800d466:	d1fb      	bne.n	800d460 <__sccl+0x1c>
 800d468:	b90b      	cbnz	r3, 800d46e <__sccl+0x2a>
 800d46a:	3801      	subs	r0, #1
 800d46c:	bd70      	pop	{r4, r5, r6, pc}
 800d46e:	f082 0101 	eor.w	r1, r2, #1
 800d472:	54e1      	strb	r1, [r4, r3]
 800d474:	1c42      	adds	r2, r0, #1
 800d476:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800d47a:	2d2d      	cmp	r5, #45	; 0x2d
 800d47c:	f102 36ff 	add.w	r6, r2, #4294967295
 800d480:	4610      	mov	r0, r2
 800d482:	d006      	beq.n	800d492 <__sccl+0x4e>
 800d484:	2d5d      	cmp	r5, #93	; 0x5d
 800d486:	d0f1      	beq.n	800d46c <__sccl+0x28>
 800d488:	b90d      	cbnz	r5, 800d48e <__sccl+0x4a>
 800d48a:	4630      	mov	r0, r6
 800d48c:	e7ee      	b.n	800d46c <__sccl+0x28>
 800d48e:	462b      	mov	r3, r5
 800d490:	e7ef      	b.n	800d472 <__sccl+0x2e>
 800d492:	7816      	ldrb	r6, [r2, #0]
 800d494:	2e5d      	cmp	r6, #93	; 0x5d
 800d496:	d0fa      	beq.n	800d48e <__sccl+0x4a>
 800d498:	42b3      	cmp	r3, r6
 800d49a:	dcf8      	bgt.n	800d48e <__sccl+0x4a>
 800d49c:	4618      	mov	r0, r3
 800d49e:	3001      	adds	r0, #1
 800d4a0:	4286      	cmp	r6, r0
 800d4a2:	5421      	strb	r1, [r4, r0]
 800d4a4:	dcfb      	bgt.n	800d49e <__sccl+0x5a>
 800d4a6:	43d8      	mvns	r0, r3
 800d4a8:	4430      	add	r0, r6
 800d4aa:	1c5d      	adds	r5, r3, #1
 800d4ac:	42b3      	cmp	r3, r6
 800d4ae:	bfa8      	it	ge
 800d4b0:	2000      	movge	r0, #0
 800d4b2:	182b      	adds	r3, r5, r0
 800d4b4:	3202      	adds	r2, #2
 800d4b6:	e7de      	b.n	800d476 <__sccl+0x32>

0800d4b8 <nanf>:
 800d4b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d4c0 <nanf+0x8>
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	7fc00000 	.word	0x7fc00000

0800d4c4 <siprintf>:
 800d4c4:	b40e      	push	{r1, r2, r3}
 800d4c6:	b500      	push	{lr}
 800d4c8:	b09c      	sub	sp, #112	; 0x70
 800d4ca:	ab1d      	add	r3, sp, #116	; 0x74
 800d4cc:	9002      	str	r0, [sp, #8]
 800d4ce:	9006      	str	r0, [sp, #24]
 800d4d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d4d4:	4809      	ldr	r0, [pc, #36]	; (800d4fc <siprintf+0x38>)
 800d4d6:	9107      	str	r1, [sp, #28]
 800d4d8:	9104      	str	r1, [sp, #16]
 800d4da:	4909      	ldr	r1, [pc, #36]	; (800d500 <siprintf+0x3c>)
 800d4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e0:	9105      	str	r1, [sp, #20]
 800d4e2:	6800      	ldr	r0, [r0, #0]
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	a902      	add	r1, sp, #8
 800d4e8:	f001 f9b4 	bl	800e854 <_svfiprintf_r>
 800d4ec:	9b02      	ldr	r3, [sp, #8]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	701a      	strb	r2, [r3, #0]
 800d4f2:	b01c      	add	sp, #112	; 0x70
 800d4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4f8:	b003      	add	sp, #12
 800d4fa:	4770      	bx	lr
 800d4fc:	2000001c 	.word	0x2000001c
 800d500:	ffff0208 	.word	0xffff0208

0800d504 <siscanf>:
 800d504:	b40e      	push	{r1, r2, r3}
 800d506:	b510      	push	{r4, lr}
 800d508:	b09f      	sub	sp, #124	; 0x7c
 800d50a:	ac21      	add	r4, sp, #132	; 0x84
 800d50c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d510:	f854 2b04 	ldr.w	r2, [r4], #4
 800d514:	9201      	str	r2, [sp, #4]
 800d516:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d51a:	9004      	str	r0, [sp, #16]
 800d51c:	9008      	str	r0, [sp, #32]
 800d51e:	f7f2 fe61 	bl	80001e4 <strlen>
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <siscanf+0x50>)
 800d524:	9005      	str	r0, [sp, #20]
 800d526:	9009      	str	r0, [sp, #36]	; 0x24
 800d528:	930c      	str	r3, [sp, #48]	; 0x30
 800d52a:	480b      	ldr	r0, [pc, #44]	; (800d558 <siscanf+0x54>)
 800d52c:	9a01      	ldr	r2, [sp, #4]
 800d52e:	6800      	ldr	r0, [r0, #0]
 800d530:	9403      	str	r4, [sp, #12]
 800d532:	2300      	movs	r3, #0
 800d534:	9310      	str	r3, [sp, #64]	; 0x40
 800d536:	9315      	str	r3, [sp, #84]	; 0x54
 800d538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d53c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d540:	a904      	add	r1, sp, #16
 800d542:	4623      	mov	r3, r4
 800d544:	f001 fe56 	bl	800f1f4 <__ssvfiscanf_r>
 800d548:	b01f      	add	sp, #124	; 0x7c
 800d54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d54e:	b003      	add	sp, #12
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	0800d5bf 	.word	0x0800d5bf
 800d558:	2000001c 	.word	0x2000001c

0800d55c <sprintf>:
 800d55c:	b40e      	push	{r1, r2, r3}
 800d55e:	b500      	push	{lr}
 800d560:	b09c      	sub	sp, #112	; 0x70
 800d562:	ab1d      	add	r3, sp, #116	; 0x74
 800d564:	9002      	str	r0, [sp, #8]
 800d566:	9006      	str	r0, [sp, #24]
 800d568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d56c:	4809      	ldr	r0, [pc, #36]	; (800d594 <sprintf+0x38>)
 800d56e:	9107      	str	r1, [sp, #28]
 800d570:	9104      	str	r1, [sp, #16]
 800d572:	4909      	ldr	r1, [pc, #36]	; (800d598 <sprintf+0x3c>)
 800d574:	f853 2b04 	ldr.w	r2, [r3], #4
 800d578:	9105      	str	r1, [sp, #20]
 800d57a:	6800      	ldr	r0, [r0, #0]
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	a902      	add	r1, sp, #8
 800d580:	f7f9 fc06 	bl	8006d90 <_svfprintf_r>
 800d584:	9b02      	ldr	r3, [sp, #8]
 800d586:	2200      	movs	r2, #0
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	b01c      	add	sp, #112	; 0x70
 800d58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d590:	b003      	add	sp, #12
 800d592:	4770      	bx	lr
 800d594:	2000001c 	.word	0x2000001c
 800d598:	ffff0208 	.word	0xffff0208

0800d59c <__sread>:
 800d59c:	b510      	push	{r4, lr}
 800d59e:	460c      	mov	r4, r1
 800d5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a4:	f004 f8d0 	bl	8011748 <_read_r>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	bfab      	itete	ge
 800d5ac:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800d5ae:	89a3      	ldrhlt	r3, [r4, #12]
 800d5b0:	181b      	addge	r3, r3, r0
 800d5b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5b6:	bfac      	ite	ge
 800d5b8:	6523      	strge	r3, [r4, #80]	; 0x50
 800d5ba:	81a3      	strhlt	r3, [r4, #12]
 800d5bc:	bd10      	pop	{r4, pc}

0800d5be <__seofread>:
 800d5be:	2000      	movs	r0, #0
 800d5c0:	4770      	bx	lr

0800d5c2 <__swrite>:
 800d5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	461f      	mov	r7, r3
 800d5c8:	898b      	ldrh	r3, [r1, #12]
 800d5ca:	05db      	lsls	r3, r3, #23
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	4616      	mov	r6, r2
 800d5d2:	d505      	bpl.n	800d5e0 <__swrite+0x1e>
 800d5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d8:	2302      	movs	r3, #2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f004 f8a2 	bl	8011724 <_lseek_r>
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ea:	81a3      	strh	r3, [r4, #12]
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f6:	f003 bb73 	b.w	8010ce0 <_write_r>

0800d5fa <__sseek>:
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d602:	f004 f88f 	bl	8011724 <_lseek_r>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	bf15      	itete	ne
 800d60c:	6520      	strne	r0, [r4, #80]	; 0x50
 800d60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d616:	81a3      	strheq	r3, [r4, #12]
 800d618:	bf18      	it	ne
 800d61a:	81a3      	strhne	r3, [r4, #12]
 800d61c:	bd10      	pop	{r4, pc}

0800d61e <__sclose>:
 800d61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d622:	f003 bbfb 	b.w	8010e1c <_close_r>

0800d626 <strcpy>:
 800d626:	4603      	mov	r3, r0
 800d628:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d62c:	f803 2b01 	strb.w	r2, [r3], #1
 800d630:	2a00      	cmp	r2, #0
 800d632:	d1f9      	bne.n	800d628 <strcpy+0x2>
 800d634:	4770      	bx	lr

0800d636 <strncmp>:
 800d636:	b510      	push	{r4, lr}
 800d638:	b16a      	cbz	r2, 800d656 <strncmp+0x20>
 800d63a:	3901      	subs	r1, #1
 800d63c:	1884      	adds	r4, r0, r2
 800d63e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d642:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d646:	4293      	cmp	r3, r2
 800d648:	d103      	bne.n	800d652 <strncmp+0x1c>
 800d64a:	42a0      	cmp	r0, r4
 800d64c:	d001      	beq.n	800d652 <strncmp+0x1c>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1f5      	bne.n	800d63e <strncmp+0x8>
 800d652:	1a98      	subs	r0, r3, r2
 800d654:	bd10      	pop	{r4, pc}
 800d656:	4610      	mov	r0, r2
 800d658:	e7fc      	b.n	800d654 <strncmp+0x1e>

0800d65a <strncpy>:
 800d65a:	b510      	push	{r4, lr}
 800d65c:	3901      	subs	r1, #1
 800d65e:	4603      	mov	r3, r0
 800d660:	b132      	cbz	r2, 800d670 <strncpy+0x16>
 800d662:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d666:	f803 4b01 	strb.w	r4, [r3], #1
 800d66a:	3a01      	subs	r2, #1
 800d66c:	2c00      	cmp	r4, #0
 800d66e:	d1f7      	bne.n	800d660 <strncpy+0x6>
 800d670:	441a      	add	r2, r3
 800d672:	2100      	movs	r1, #0
 800d674:	4293      	cmp	r3, r2
 800d676:	d100      	bne.n	800d67a <strncpy+0x20>
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	f803 1b01 	strb.w	r1, [r3], #1
 800d67e:	e7f9      	b.n	800d674 <strncpy+0x1a>

0800d680 <sulp>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	4604      	mov	r4, r0
 800d684:	460d      	mov	r5, r1
 800d686:	ec45 4b10 	vmov	d0, r4, r5
 800d68a:	4616      	mov	r6, r2
 800d68c:	f7ff fb18 	bl	800ccc0 <__ulp>
 800d690:	ec51 0b10 	vmov	r0, r1, d0
 800d694:	b17e      	cbz	r6, 800d6b6 <sulp+0x36>
 800d696:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d69a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dd09      	ble.n	800d6b6 <sulp+0x36>
 800d6a2:	051b      	lsls	r3, r3, #20
 800d6a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d6a8:	2400      	movs	r4, #0
 800d6aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	462b      	mov	r3, r5
 800d6b2:	f7f2 ffb1 	bl	8000618 <__aeabi_dmul>
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}

0800d6b8 <_strtod_l>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	b0a3      	sub	sp, #140	; 0x8c
 800d6be:	461f      	mov	r7, r3
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	931e      	str	r3, [sp, #120]	; 0x78
 800d6c4:	4ba4      	ldr	r3, [pc, #656]	; (800d958 <_strtod_l+0x2a0>)
 800d6c6:	9219      	str	r2, [sp, #100]	; 0x64
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	9307      	str	r3, [sp, #28]
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	4688      	mov	r8, r1
 800d6d2:	f7f2 fd87 	bl	80001e4 <strlen>
 800d6d6:	f04f 0a00 	mov.w	sl, #0
 800d6da:	4605      	mov	r5, r0
 800d6dc:	f04f 0b00 	mov.w	fp, #0
 800d6e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d6e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6e6:	781a      	ldrb	r2, [r3, #0]
 800d6e8:	2a2b      	cmp	r2, #43	; 0x2b
 800d6ea:	d04c      	beq.n	800d786 <_strtod_l+0xce>
 800d6ec:	d839      	bhi.n	800d762 <_strtod_l+0xaa>
 800d6ee:	2a0d      	cmp	r2, #13
 800d6f0:	d832      	bhi.n	800d758 <_strtod_l+0xa0>
 800d6f2:	2a08      	cmp	r2, #8
 800d6f4:	d832      	bhi.n	800d75c <_strtod_l+0xa4>
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	d03c      	beq.n	800d774 <_strtod_l+0xbc>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d700:	7833      	ldrb	r3, [r6, #0]
 800d702:	2b30      	cmp	r3, #48	; 0x30
 800d704:	f040 80b4 	bne.w	800d870 <_strtod_l+0x1b8>
 800d708:	7873      	ldrb	r3, [r6, #1]
 800d70a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d70e:	2b58      	cmp	r3, #88	; 0x58
 800d710:	d16c      	bne.n	800d7ec <_strtod_l+0x134>
 800d712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	ab1e      	add	r3, sp, #120	; 0x78
 800d718:	9702      	str	r7, [sp, #8]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4a8f      	ldr	r2, [pc, #572]	; (800d95c <_strtod_l+0x2a4>)
 800d71e:	ab1f      	add	r3, sp, #124	; 0x7c
 800d720:	a91d      	add	r1, sp, #116	; 0x74
 800d722:	4620      	mov	r0, r4
 800d724:	f003 fce6 	bl	80110f4 <__gethex>
 800d728:	f010 0707 	ands.w	r7, r0, #7
 800d72c:	4605      	mov	r5, r0
 800d72e:	d005      	beq.n	800d73c <_strtod_l+0x84>
 800d730:	2f06      	cmp	r7, #6
 800d732:	d12a      	bne.n	800d78a <_strtod_l+0xd2>
 800d734:	3601      	adds	r6, #1
 800d736:	2300      	movs	r3, #0
 800d738:	961d      	str	r6, [sp, #116]	; 0x74
 800d73a:	930e      	str	r3, [sp, #56]	; 0x38
 800d73c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f040 8596 	bne.w	800e270 <_strtod_l+0xbb8>
 800d744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d746:	b1db      	cbz	r3, 800d780 <_strtod_l+0xc8>
 800d748:	4652      	mov	r2, sl
 800d74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d74e:	ec43 2b10 	vmov	d0, r2, r3
 800d752:	b023      	add	sp, #140	; 0x8c
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d758:	2a20      	cmp	r2, #32
 800d75a:	d1ce      	bne.n	800d6fa <_strtod_l+0x42>
 800d75c:	3301      	adds	r3, #1
 800d75e:	931d      	str	r3, [sp, #116]	; 0x74
 800d760:	e7c0      	b.n	800d6e4 <_strtod_l+0x2c>
 800d762:	2a2d      	cmp	r2, #45	; 0x2d
 800d764:	d1c9      	bne.n	800d6fa <_strtod_l+0x42>
 800d766:	2201      	movs	r2, #1
 800d768:	920e      	str	r2, [sp, #56]	; 0x38
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	921d      	str	r2, [sp, #116]	; 0x74
 800d76e:	785b      	ldrb	r3, [r3, #1]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1c4      	bne.n	800d6fe <_strtod_l+0x46>
 800d774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d776:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f040 8576 	bne.w	800e26c <_strtod_l+0xbb4>
 800d780:	4652      	mov	r2, sl
 800d782:	465b      	mov	r3, fp
 800d784:	e7e3      	b.n	800d74e <_strtod_l+0x96>
 800d786:	2200      	movs	r2, #0
 800d788:	e7ee      	b.n	800d768 <_strtod_l+0xb0>
 800d78a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d78c:	b13a      	cbz	r2, 800d79e <_strtod_l+0xe6>
 800d78e:	2135      	movs	r1, #53	; 0x35
 800d790:	a820      	add	r0, sp, #128	; 0x80
 800d792:	f7ff fba0 	bl	800ced6 <__copybits>
 800d796:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d798:	4620      	mov	r0, r4
 800d79a:	f7fe ff98 	bl	800c6ce <_Bfree>
 800d79e:	3f01      	subs	r7, #1
 800d7a0:	2f05      	cmp	r7, #5
 800d7a2:	d807      	bhi.n	800d7b4 <_strtod_l+0xfc>
 800d7a4:	e8df f007 	tbb	[pc, r7]
 800d7a8:	1d180b0e 	.word	0x1d180b0e
 800d7ac:	030e      	.short	0x030e
 800d7ae:	f04f 0b00 	mov.w	fp, #0
 800d7b2:	46da      	mov	sl, fp
 800d7b4:	0728      	lsls	r0, r5, #28
 800d7b6:	d5c1      	bpl.n	800d73c <_strtod_l+0x84>
 800d7b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d7bc:	e7be      	b.n	800d73c <_strtod_l+0x84>
 800d7be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d7c2:	e7f7      	b.n	800d7b4 <_strtod_l+0xfc>
 800d7c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d7c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d7ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d7ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d7d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7d6:	e7ed      	b.n	800d7b4 <_strtod_l+0xfc>
 800d7d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d960 <_strtod_l+0x2a8>
 800d7dc:	f04f 0a00 	mov.w	sl, #0
 800d7e0:	e7e8      	b.n	800d7b4 <_strtod_l+0xfc>
 800d7e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d7e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ea:	e7e3      	b.n	800d7b4 <_strtod_l+0xfc>
 800d7ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	921d      	str	r2, [sp, #116]	; 0x74
 800d7f2:	785b      	ldrb	r3, [r3, #1]
 800d7f4:	2b30      	cmp	r3, #48	; 0x30
 800d7f6:	d0f9      	beq.n	800d7ec <_strtod_l+0x134>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d09f      	beq.n	800d73c <_strtod_l+0x84>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	9304      	str	r3, [sp, #16]
 800d804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d806:	930a      	str	r3, [sp, #40]	; 0x28
 800d808:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d80c:	464f      	mov	r7, r9
 800d80e:	220a      	movs	r2, #10
 800d810:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d812:	7806      	ldrb	r6, [r0, #0]
 800d814:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d818:	b2d9      	uxtb	r1, r3
 800d81a:	2909      	cmp	r1, #9
 800d81c:	d92a      	bls.n	800d874 <_strtod_l+0x1bc>
 800d81e:	9907      	ldr	r1, [sp, #28]
 800d820:	462a      	mov	r2, r5
 800d822:	f7ff ff08 	bl	800d636 <strncmp>
 800d826:	b398      	cbz	r0, 800d890 <_strtod_l+0x1d8>
 800d828:	2000      	movs	r0, #0
 800d82a:	4633      	mov	r3, r6
 800d82c:	463d      	mov	r5, r7
 800d82e:	9007      	str	r0, [sp, #28]
 800d830:	4602      	mov	r2, r0
 800d832:	2b65      	cmp	r3, #101	; 0x65
 800d834:	d001      	beq.n	800d83a <_strtod_l+0x182>
 800d836:	2b45      	cmp	r3, #69	; 0x45
 800d838:	d118      	bne.n	800d86c <_strtod_l+0x1b4>
 800d83a:	b91d      	cbnz	r5, 800d844 <_strtod_l+0x18c>
 800d83c:	9b04      	ldr	r3, [sp, #16]
 800d83e:	4303      	orrs	r3, r0
 800d840:	d098      	beq.n	800d774 <_strtod_l+0xbc>
 800d842:	2500      	movs	r5, #0
 800d844:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d848:	f108 0301 	add.w	r3, r8, #1
 800d84c:	931d      	str	r3, [sp, #116]	; 0x74
 800d84e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d852:	2b2b      	cmp	r3, #43	; 0x2b
 800d854:	d075      	beq.n	800d942 <_strtod_l+0x28a>
 800d856:	2b2d      	cmp	r3, #45	; 0x2d
 800d858:	d07b      	beq.n	800d952 <_strtod_l+0x29a>
 800d85a:	f04f 0c00 	mov.w	ip, #0
 800d85e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d862:	2909      	cmp	r1, #9
 800d864:	f240 8082 	bls.w	800d96c <_strtod_l+0x2b4>
 800d868:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d86c:	2600      	movs	r6, #0
 800d86e:	e09d      	b.n	800d9ac <_strtod_l+0x2f4>
 800d870:	2300      	movs	r3, #0
 800d872:	e7c4      	b.n	800d7fe <_strtod_l+0x146>
 800d874:	2f08      	cmp	r7, #8
 800d876:	bfd8      	it	le
 800d878:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d87a:	f100 0001 	add.w	r0, r0, #1
 800d87e:	bfda      	itte	le
 800d880:	fb02 3301 	mlale	r3, r2, r1, r3
 800d884:	9309      	strle	r3, [sp, #36]	; 0x24
 800d886:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d88a:	3701      	adds	r7, #1
 800d88c:	901d      	str	r0, [sp, #116]	; 0x74
 800d88e:	e7bf      	b.n	800d810 <_strtod_l+0x158>
 800d890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d892:	195a      	adds	r2, r3, r5
 800d894:	921d      	str	r2, [sp, #116]	; 0x74
 800d896:	5d5b      	ldrb	r3, [r3, r5]
 800d898:	2f00      	cmp	r7, #0
 800d89a:	d037      	beq.n	800d90c <_strtod_l+0x254>
 800d89c:	9007      	str	r0, [sp, #28]
 800d89e:	463d      	mov	r5, r7
 800d8a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d8a4:	2a09      	cmp	r2, #9
 800d8a6:	d912      	bls.n	800d8ce <_strtod_l+0x216>
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	e7c2      	b.n	800d832 <_strtod_l+0x17a>
 800d8ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8ae:	1c5a      	adds	r2, r3, #1
 800d8b0:	921d      	str	r2, [sp, #116]	; 0x74
 800d8b2:	785b      	ldrb	r3, [r3, #1]
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	2b30      	cmp	r3, #48	; 0x30
 800d8b8:	d0f8      	beq.n	800d8ac <_strtod_l+0x1f4>
 800d8ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d8be:	2a08      	cmp	r2, #8
 800d8c0:	f200 84db 	bhi.w	800e27a <_strtod_l+0xbc2>
 800d8c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d8c6:	9007      	str	r0, [sp, #28]
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	920a      	str	r2, [sp, #40]	; 0x28
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	3b30      	subs	r3, #48	; 0x30
 800d8d0:	f100 0201 	add.w	r2, r0, #1
 800d8d4:	d014      	beq.n	800d900 <_strtod_l+0x248>
 800d8d6:	9907      	ldr	r1, [sp, #28]
 800d8d8:	4411      	add	r1, r2
 800d8da:	9107      	str	r1, [sp, #28]
 800d8dc:	462a      	mov	r2, r5
 800d8de:	eb00 0e05 	add.w	lr, r0, r5
 800d8e2:	210a      	movs	r1, #10
 800d8e4:	4572      	cmp	r2, lr
 800d8e6:	d113      	bne.n	800d910 <_strtod_l+0x258>
 800d8e8:	182a      	adds	r2, r5, r0
 800d8ea:	2a08      	cmp	r2, #8
 800d8ec:	f105 0501 	add.w	r5, r5, #1
 800d8f0:	4405      	add	r5, r0
 800d8f2:	dc1c      	bgt.n	800d92e <_strtod_l+0x276>
 800d8f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8f6:	220a      	movs	r2, #10
 800d8f8:	fb02 3301 	mla	r3, r2, r1, r3
 800d8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fe:	2200      	movs	r2, #0
 800d900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d902:	1c59      	adds	r1, r3, #1
 800d904:	911d      	str	r1, [sp, #116]	; 0x74
 800d906:	785b      	ldrb	r3, [r3, #1]
 800d908:	4610      	mov	r0, r2
 800d90a:	e7c9      	b.n	800d8a0 <_strtod_l+0x1e8>
 800d90c:	4638      	mov	r0, r7
 800d90e:	e7d2      	b.n	800d8b6 <_strtod_l+0x1fe>
 800d910:	2a08      	cmp	r2, #8
 800d912:	dc04      	bgt.n	800d91e <_strtod_l+0x266>
 800d914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d916:	434e      	muls	r6, r1
 800d918:	9609      	str	r6, [sp, #36]	; 0x24
 800d91a:	3201      	adds	r2, #1
 800d91c:	e7e2      	b.n	800d8e4 <_strtod_l+0x22c>
 800d91e:	f102 0c01 	add.w	ip, r2, #1
 800d922:	f1bc 0f10 	cmp.w	ip, #16
 800d926:	bfd8      	it	le
 800d928:	fb01 f909 	mulle.w	r9, r1, r9
 800d92c:	e7f5      	b.n	800d91a <_strtod_l+0x262>
 800d92e:	2d10      	cmp	r5, #16
 800d930:	bfdc      	itt	le
 800d932:	220a      	movle	r2, #10
 800d934:	fb02 3909 	mlale	r9, r2, r9, r3
 800d938:	e7e1      	b.n	800d8fe <_strtod_l+0x246>
 800d93a:	2300      	movs	r3, #0
 800d93c:	9307      	str	r3, [sp, #28]
 800d93e:	2201      	movs	r2, #1
 800d940:	e77c      	b.n	800d83c <_strtod_l+0x184>
 800d942:	f04f 0c00 	mov.w	ip, #0
 800d946:	f108 0302 	add.w	r3, r8, #2
 800d94a:	931d      	str	r3, [sp, #116]	; 0x74
 800d94c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d950:	e785      	b.n	800d85e <_strtod_l+0x1a6>
 800d952:	f04f 0c01 	mov.w	ip, #1
 800d956:	e7f6      	b.n	800d946 <_strtod_l+0x28e>
 800d958:	080121d8 	.word	0x080121d8
 800d95c:	0801207c 	.word	0x0801207c
 800d960:	7ff00000 	.word	0x7ff00000
 800d964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d966:	1c59      	adds	r1, r3, #1
 800d968:	911d      	str	r1, [sp, #116]	; 0x74
 800d96a:	785b      	ldrb	r3, [r3, #1]
 800d96c:	2b30      	cmp	r3, #48	; 0x30
 800d96e:	d0f9      	beq.n	800d964 <_strtod_l+0x2ac>
 800d970:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d974:	2908      	cmp	r1, #8
 800d976:	f63f af79 	bhi.w	800d86c <_strtod_l+0x1b4>
 800d97a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d97e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d980:	9308      	str	r3, [sp, #32]
 800d982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d984:	1c59      	adds	r1, r3, #1
 800d986:	911d      	str	r1, [sp, #116]	; 0x74
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d98e:	2e09      	cmp	r6, #9
 800d990:	d937      	bls.n	800da02 <_strtod_l+0x34a>
 800d992:	9e08      	ldr	r6, [sp, #32]
 800d994:	1b89      	subs	r1, r1, r6
 800d996:	2908      	cmp	r1, #8
 800d998:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d99c:	dc02      	bgt.n	800d9a4 <_strtod_l+0x2ec>
 800d99e:	4576      	cmp	r6, lr
 800d9a0:	bfa8      	it	ge
 800d9a2:	4676      	movge	r6, lr
 800d9a4:	f1bc 0f00 	cmp.w	ip, #0
 800d9a8:	d000      	beq.n	800d9ac <_strtod_l+0x2f4>
 800d9aa:	4276      	negs	r6, r6
 800d9ac:	2d00      	cmp	r5, #0
 800d9ae:	d14f      	bne.n	800da50 <_strtod_l+0x398>
 800d9b0:	9904      	ldr	r1, [sp, #16]
 800d9b2:	4301      	orrs	r1, r0
 800d9b4:	f47f aec2 	bne.w	800d73c <_strtod_l+0x84>
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	f47f aedb 	bne.w	800d774 <_strtod_l+0xbc>
 800d9be:	2b69      	cmp	r3, #105	; 0x69
 800d9c0:	d027      	beq.n	800da12 <_strtod_l+0x35a>
 800d9c2:	dc24      	bgt.n	800da0e <_strtod_l+0x356>
 800d9c4:	2b49      	cmp	r3, #73	; 0x49
 800d9c6:	d024      	beq.n	800da12 <_strtod_l+0x35a>
 800d9c8:	2b4e      	cmp	r3, #78	; 0x4e
 800d9ca:	f47f aed3 	bne.w	800d774 <_strtod_l+0xbc>
 800d9ce:	499e      	ldr	r1, [pc, #632]	; (800dc48 <_strtod_l+0x590>)
 800d9d0:	a81d      	add	r0, sp, #116	; 0x74
 800d9d2:	f003 fde7 	bl	80115a4 <__match>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f43f aecc 	beq.w	800d774 <_strtod_l+0xbc>
 800d9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b28      	cmp	r3, #40	; 0x28
 800d9e2:	d12d      	bne.n	800da40 <_strtod_l+0x388>
 800d9e4:	4999      	ldr	r1, [pc, #612]	; (800dc4c <_strtod_l+0x594>)
 800d9e6:	aa20      	add	r2, sp, #128	; 0x80
 800d9e8:	a81d      	add	r0, sp, #116	; 0x74
 800d9ea:	f003 fdef 	bl	80115cc <__hexnan>
 800d9ee:	2805      	cmp	r0, #5
 800d9f0:	d126      	bne.n	800da40 <_strtod_l+0x388>
 800d9f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d9f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d9fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800da00:	e69c      	b.n	800d73c <_strtod_l+0x84>
 800da02:	210a      	movs	r1, #10
 800da04:	fb01 3e0e 	mla	lr, r1, lr, r3
 800da08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800da0c:	e7b9      	b.n	800d982 <_strtod_l+0x2ca>
 800da0e:	2b6e      	cmp	r3, #110	; 0x6e
 800da10:	e7db      	b.n	800d9ca <_strtod_l+0x312>
 800da12:	498f      	ldr	r1, [pc, #572]	; (800dc50 <_strtod_l+0x598>)
 800da14:	a81d      	add	r0, sp, #116	; 0x74
 800da16:	f003 fdc5 	bl	80115a4 <__match>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	f43f aeaa 	beq.w	800d774 <_strtod_l+0xbc>
 800da20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da22:	498c      	ldr	r1, [pc, #560]	; (800dc54 <_strtod_l+0x59c>)
 800da24:	3b01      	subs	r3, #1
 800da26:	a81d      	add	r0, sp, #116	; 0x74
 800da28:	931d      	str	r3, [sp, #116]	; 0x74
 800da2a:	f003 fdbb 	bl	80115a4 <__match>
 800da2e:	b910      	cbnz	r0, 800da36 <_strtod_l+0x37e>
 800da30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da32:	3301      	adds	r3, #1
 800da34:	931d      	str	r3, [sp, #116]	; 0x74
 800da36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800dc64 <_strtod_l+0x5ac>
 800da3a:	f04f 0a00 	mov.w	sl, #0
 800da3e:	e67d      	b.n	800d73c <_strtod_l+0x84>
 800da40:	4885      	ldr	r0, [pc, #532]	; (800dc58 <_strtod_l+0x5a0>)
 800da42:	f003 fe95 	bl	8011770 <nan>
 800da46:	ed8d 0b04 	vstr	d0, [sp, #16]
 800da4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800da4e:	e675      	b.n	800d73c <_strtod_l+0x84>
 800da50:	9b07      	ldr	r3, [sp, #28]
 800da52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da54:	1af3      	subs	r3, r6, r3
 800da56:	2f00      	cmp	r7, #0
 800da58:	bf08      	it	eq
 800da5a:	462f      	moveq	r7, r5
 800da5c:	2d10      	cmp	r5, #16
 800da5e:	9308      	str	r3, [sp, #32]
 800da60:	46a8      	mov	r8, r5
 800da62:	bfa8      	it	ge
 800da64:	f04f 0810 	movge.w	r8, #16
 800da68:	f7f2 fd5c 	bl	8000524 <__aeabi_ui2d>
 800da6c:	2d09      	cmp	r5, #9
 800da6e:	4682      	mov	sl, r0
 800da70:	468b      	mov	fp, r1
 800da72:	dd13      	ble.n	800da9c <_strtod_l+0x3e4>
 800da74:	4b79      	ldr	r3, [pc, #484]	; (800dc5c <_strtod_l+0x5a4>)
 800da76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800da7e:	f7f2 fdcb 	bl	8000618 <__aeabi_dmul>
 800da82:	4682      	mov	sl, r0
 800da84:	4648      	mov	r0, r9
 800da86:	468b      	mov	fp, r1
 800da88:	f7f2 fd4c 	bl	8000524 <__aeabi_ui2d>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4650      	mov	r0, sl
 800da92:	4659      	mov	r1, fp
 800da94:	f7f2 fc0a 	bl	80002ac <__adddf3>
 800da98:	4682      	mov	sl, r0
 800da9a:	468b      	mov	fp, r1
 800da9c:	2d0f      	cmp	r5, #15
 800da9e:	dc38      	bgt.n	800db12 <_strtod_l+0x45a>
 800daa0:	9b08      	ldr	r3, [sp, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f43f ae4a 	beq.w	800d73c <_strtod_l+0x84>
 800daa8:	dd24      	ble.n	800daf4 <_strtod_l+0x43c>
 800daaa:	2b16      	cmp	r3, #22
 800daac:	dc0b      	bgt.n	800dac6 <_strtod_l+0x40e>
 800daae:	4d6b      	ldr	r5, [pc, #428]	; (800dc5c <_strtod_l+0x5a4>)
 800dab0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800dab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dab8:	4652      	mov	r2, sl
 800daba:	465b      	mov	r3, fp
 800dabc:	f7f2 fdac 	bl	8000618 <__aeabi_dmul>
 800dac0:	4682      	mov	sl, r0
 800dac2:	468b      	mov	fp, r1
 800dac4:	e63a      	b.n	800d73c <_strtod_l+0x84>
 800dac6:	9a08      	ldr	r2, [sp, #32]
 800dac8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dacc:	4293      	cmp	r3, r2
 800dace:	db20      	blt.n	800db12 <_strtod_l+0x45a>
 800dad0:	4c62      	ldr	r4, [pc, #392]	; (800dc5c <_strtod_l+0x5a4>)
 800dad2:	f1c5 050f 	rsb	r5, r5, #15
 800dad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dada:	4652      	mov	r2, sl
 800dadc:	465b      	mov	r3, fp
 800dade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae2:	f7f2 fd99 	bl	8000618 <__aeabi_dmul>
 800dae6:	9b08      	ldr	r3, [sp, #32]
 800dae8:	1b5d      	subs	r5, r3, r5
 800daea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800daee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daf2:	e7e3      	b.n	800dabc <_strtod_l+0x404>
 800daf4:	9b08      	ldr	r3, [sp, #32]
 800daf6:	3316      	adds	r3, #22
 800daf8:	db0b      	blt.n	800db12 <_strtod_l+0x45a>
 800dafa:	9b07      	ldr	r3, [sp, #28]
 800dafc:	4a57      	ldr	r2, [pc, #348]	; (800dc5c <_strtod_l+0x5a4>)
 800dafe:	1b9e      	subs	r6, r3, r6
 800db00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800db04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db08:	4650      	mov	r0, sl
 800db0a:	4659      	mov	r1, fp
 800db0c:	f7f2 feae 	bl	800086c <__aeabi_ddiv>
 800db10:	e7d6      	b.n	800dac0 <_strtod_l+0x408>
 800db12:	9b08      	ldr	r3, [sp, #32]
 800db14:	eba5 0808 	sub.w	r8, r5, r8
 800db18:	4498      	add	r8, r3
 800db1a:	f1b8 0f00 	cmp.w	r8, #0
 800db1e:	dd71      	ble.n	800dc04 <_strtod_l+0x54c>
 800db20:	f018 030f 	ands.w	r3, r8, #15
 800db24:	d00a      	beq.n	800db3c <_strtod_l+0x484>
 800db26:	494d      	ldr	r1, [pc, #308]	; (800dc5c <_strtod_l+0x5a4>)
 800db28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db2c:	4652      	mov	r2, sl
 800db2e:	465b      	mov	r3, fp
 800db30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db34:	f7f2 fd70 	bl	8000618 <__aeabi_dmul>
 800db38:	4682      	mov	sl, r0
 800db3a:	468b      	mov	fp, r1
 800db3c:	f038 080f 	bics.w	r8, r8, #15
 800db40:	d04d      	beq.n	800dbde <_strtod_l+0x526>
 800db42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800db46:	dd22      	ble.n	800db8e <_strtod_l+0x4d6>
 800db48:	2500      	movs	r5, #0
 800db4a:	462e      	mov	r6, r5
 800db4c:	9509      	str	r5, [sp, #36]	; 0x24
 800db4e:	9507      	str	r5, [sp, #28]
 800db50:	2322      	movs	r3, #34	; 0x22
 800db52:	f8df b110 	ldr.w	fp, [pc, #272]	; 800dc64 <_strtod_l+0x5ac>
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	f04f 0a00 	mov.w	sl, #0
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f43f adec 	beq.w	800d73c <_strtod_l+0x84>
 800db64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db66:	4620      	mov	r0, r4
 800db68:	f7fe fdb1 	bl	800c6ce <_Bfree>
 800db6c:	9907      	ldr	r1, [sp, #28]
 800db6e:	4620      	mov	r0, r4
 800db70:	f7fe fdad 	bl	800c6ce <_Bfree>
 800db74:	4631      	mov	r1, r6
 800db76:	4620      	mov	r0, r4
 800db78:	f7fe fda9 	bl	800c6ce <_Bfree>
 800db7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db7e:	4620      	mov	r0, r4
 800db80:	f7fe fda5 	bl	800c6ce <_Bfree>
 800db84:	4629      	mov	r1, r5
 800db86:	4620      	mov	r0, r4
 800db88:	f7fe fda1 	bl	800c6ce <_Bfree>
 800db8c:	e5d6      	b.n	800d73c <_strtod_l+0x84>
 800db8e:	2300      	movs	r3, #0
 800db90:	ea4f 1828 	mov.w	r8, r8, asr #4
 800db94:	4650      	mov	r0, sl
 800db96:	4659      	mov	r1, fp
 800db98:	4699      	mov	r9, r3
 800db9a:	f1b8 0f01 	cmp.w	r8, #1
 800db9e:	dc21      	bgt.n	800dbe4 <_strtod_l+0x52c>
 800dba0:	b10b      	cbz	r3, 800dba6 <_strtod_l+0x4ee>
 800dba2:	4682      	mov	sl, r0
 800dba4:	468b      	mov	fp, r1
 800dba6:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <_strtod_l+0x5a8>)
 800dba8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dbac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dbb0:	4652      	mov	r2, sl
 800dbb2:	465b      	mov	r3, fp
 800dbb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dbb8:	f7f2 fd2e 	bl	8000618 <__aeabi_dmul>
 800dbbc:	4b29      	ldr	r3, [pc, #164]	; (800dc64 <_strtod_l+0x5ac>)
 800dbbe:	460a      	mov	r2, r1
 800dbc0:	400b      	ands	r3, r1
 800dbc2:	4929      	ldr	r1, [pc, #164]	; (800dc68 <_strtod_l+0x5b0>)
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	4682      	mov	sl, r0
 800dbc8:	d8be      	bhi.n	800db48 <_strtod_l+0x490>
 800dbca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dbce:	428b      	cmp	r3, r1
 800dbd0:	bf86      	itte	hi
 800dbd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dc6c <_strtod_l+0x5b4>
 800dbd6:	f04f 3aff 	movhi.w	sl, #4294967295
 800dbda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	e081      	b.n	800dce8 <_strtod_l+0x630>
 800dbe4:	f018 0f01 	tst.w	r8, #1
 800dbe8:	d007      	beq.n	800dbfa <_strtod_l+0x542>
 800dbea:	4b1d      	ldr	r3, [pc, #116]	; (800dc60 <_strtod_l+0x5a8>)
 800dbec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	f7f2 fd10 	bl	8000618 <__aeabi_dmul>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f109 0901 	add.w	r9, r9, #1
 800dbfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc02:	e7ca      	b.n	800db9a <_strtod_l+0x4e2>
 800dc04:	d0eb      	beq.n	800dbde <_strtod_l+0x526>
 800dc06:	f1c8 0800 	rsb	r8, r8, #0
 800dc0a:	f018 020f 	ands.w	r2, r8, #15
 800dc0e:	d00a      	beq.n	800dc26 <_strtod_l+0x56e>
 800dc10:	4b12      	ldr	r3, [pc, #72]	; (800dc5c <_strtod_l+0x5a4>)
 800dc12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc16:	4650      	mov	r0, sl
 800dc18:	4659      	mov	r1, fp
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f7f2 fe25 	bl	800086c <__aeabi_ddiv>
 800dc22:	4682      	mov	sl, r0
 800dc24:	468b      	mov	fp, r1
 800dc26:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dc2a:	d0d8      	beq.n	800dbde <_strtod_l+0x526>
 800dc2c:	f1b8 0f1f 	cmp.w	r8, #31
 800dc30:	dd1e      	ble.n	800dc70 <_strtod_l+0x5b8>
 800dc32:	2500      	movs	r5, #0
 800dc34:	462e      	mov	r6, r5
 800dc36:	9509      	str	r5, [sp, #36]	; 0x24
 800dc38:	9507      	str	r5, [sp, #28]
 800dc3a:	2322      	movs	r3, #34	; 0x22
 800dc3c:	f04f 0a00 	mov.w	sl, #0
 800dc40:	f04f 0b00 	mov.w	fp, #0
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	e789      	b.n	800db5c <_strtod_l+0x4a4>
 800dc48:	08011c6d 	.word	0x08011c6d
 800dc4c:	08012090 	.word	0x08012090
 800dc50:	08011c65 	.word	0x08011c65
 800dc54:	08011e99 	.word	0x08011e99
 800dc58:	08011d57 	.word	0x08011d57
 800dc5c:	08011fa8 	.word	0x08011fa8
 800dc60:	08011f80 	.word	0x08011f80
 800dc64:	7ff00000 	.word	0x7ff00000
 800dc68:	7ca00000 	.word	0x7ca00000
 800dc6c:	7fefffff 	.word	0x7fefffff
 800dc70:	f018 0310 	ands.w	r3, r8, #16
 800dc74:	bf18      	it	ne
 800dc76:	236a      	movne	r3, #106	; 0x6a
 800dc78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e030 <_strtod_l+0x978>
 800dc7c:	9304      	str	r3, [sp, #16]
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	2300      	movs	r3, #0
 800dc84:	f018 0f01 	tst.w	r8, #1
 800dc88:	d004      	beq.n	800dc94 <_strtod_l+0x5dc>
 800dc8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc8e:	f7f2 fcc3 	bl	8000618 <__aeabi_dmul>
 800dc92:	2301      	movs	r3, #1
 800dc94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dc98:	f109 0908 	add.w	r9, r9, #8
 800dc9c:	d1f2      	bne.n	800dc84 <_strtod_l+0x5cc>
 800dc9e:	b10b      	cbz	r3, 800dca4 <_strtod_l+0x5ec>
 800dca0:	4682      	mov	sl, r0
 800dca2:	468b      	mov	fp, r1
 800dca4:	9b04      	ldr	r3, [sp, #16]
 800dca6:	b1bb      	cbz	r3, 800dcd8 <_strtod_l+0x620>
 800dca8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dcac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	4659      	mov	r1, fp
 800dcb4:	dd10      	ble.n	800dcd8 <_strtod_l+0x620>
 800dcb6:	2b1f      	cmp	r3, #31
 800dcb8:	f340 8128 	ble.w	800df0c <_strtod_l+0x854>
 800dcbc:	2b34      	cmp	r3, #52	; 0x34
 800dcbe:	bfde      	ittt	le
 800dcc0:	3b20      	suble	r3, #32
 800dcc2:	f04f 32ff 	movle.w	r2, #4294967295
 800dcc6:	fa02 f303 	lslle.w	r3, r2, r3
 800dcca:	f04f 0a00 	mov.w	sl, #0
 800dcce:	bfcc      	ite	gt
 800dcd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dcd4:	ea03 0b01 	andle.w	fp, r3, r1
 800dcd8:	2200      	movs	r2, #0
 800dcda:	2300      	movs	r3, #0
 800dcdc:	4650      	mov	r0, sl
 800dcde:	4659      	mov	r1, fp
 800dce0:	f7f2 ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d1a4      	bne.n	800dc32 <_strtod_l+0x57a>
 800dce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dcee:	462b      	mov	r3, r5
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7fe fd3e 	bl	800c774 <__s2b>
 800dcf8:	9009      	str	r0, [sp, #36]	; 0x24
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	f43f af24 	beq.w	800db48 <_strtod_l+0x490>
 800dd00:	9b07      	ldr	r3, [sp, #28]
 800dd02:	1b9e      	subs	r6, r3, r6
 800dd04:	9b08      	ldr	r3, [sp, #32]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfb4      	ite	lt
 800dd0a:	4633      	movlt	r3, r6
 800dd0c:	2300      	movge	r3, #0
 800dd0e:	9310      	str	r3, [sp, #64]	; 0x40
 800dd10:	9b08      	ldr	r3, [sp, #32]
 800dd12:	2500      	movs	r5, #0
 800dd14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd18:	9318      	str	r3, [sp, #96]	; 0x60
 800dd1a:	462e      	mov	r6, r5
 800dd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1e:	4620      	mov	r0, r4
 800dd20:	6859      	ldr	r1, [r3, #4]
 800dd22:	f7fe fcaf 	bl	800c684 <_Balloc>
 800dd26:	9007      	str	r0, [sp, #28]
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	f43f af11 	beq.w	800db50 <_strtod_l+0x498>
 800dd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	3202      	adds	r2, #2
 800dd34:	f103 010c 	add.w	r1, r3, #12
 800dd38:	0092      	lsls	r2, r2, #2
 800dd3a:	300c      	adds	r0, #12
 800dd3c:	f7fe fc7a 	bl	800c634 <memcpy>
 800dd40:	ec4b ab10 	vmov	d0, sl, fp
 800dd44:	aa20      	add	r2, sp, #128	; 0x80
 800dd46:	a91f      	add	r1, sp, #124	; 0x7c
 800dd48:	4620      	mov	r0, r4
 800dd4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dd4e:	f7ff f833 	bl	800cdb8 <__d2b>
 800dd52:	901e      	str	r0, [sp, #120]	; 0x78
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f43f aefb 	beq.w	800db50 <_strtod_l+0x498>
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7fe fda3 	bl	800c8a8 <__i2b>
 800dd62:	4606      	mov	r6, r0
 800dd64:	2800      	cmp	r0, #0
 800dd66:	f43f aef3 	beq.w	800db50 <_strtod_l+0x498>
 800dd6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd6c:	9904      	ldr	r1, [sp, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bfab      	itete	ge
 800dd72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800dd74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800dd76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dd78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dd7c:	bfac      	ite	ge
 800dd7e:	eb03 0902 	addge.w	r9, r3, r2
 800dd82:	1ad7      	sublt	r7, r2, r3
 800dd84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd86:	eba3 0801 	sub.w	r8, r3, r1
 800dd8a:	4490      	add	r8, r2
 800dd8c:	4ba3      	ldr	r3, [pc, #652]	; (800e01c <_strtod_l+0x964>)
 800dd8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd92:	4598      	cmp	r8, r3
 800dd94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dd98:	f280 80cc 	bge.w	800df34 <_strtod_l+0x87c>
 800dd9c:	eba3 0308 	sub.w	r3, r3, r8
 800dda0:	2b1f      	cmp	r3, #31
 800dda2:	eba2 0203 	sub.w	r2, r2, r3
 800dda6:	f04f 0101 	mov.w	r1, #1
 800ddaa:	f300 80b6 	bgt.w	800df1a <_strtod_l+0x862>
 800ddae:	fa01 f303 	lsl.w	r3, r1, r3
 800ddb2:	9311      	str	r3, [sp, #68]	; 0x44
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	930c      	str	r3, [sp, #48]	; 0x30
 800ddb8:	eb09 0802 	add.w	r8, r9, r2
 800ddbc:	9b04      	ldr	r3, [sp, #16]
 800ddbe:	45c1      	cmp	r9, r8
 800ddc0:	4417      	add	r7, r2
 800ddc2:	441f      	add	r7, r3
 800ddc4:	464b      	mov	r3, r9
 800ddc6:	bfa8      	it	ge
 800ddc8:	4643      	movge	r3, r8
 800ddca:	42bb      	cmp	r3, r7
 800ddcc:	bfa8      	it	ge
 800ddce:	463b      	movge	r3, r7
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	bfc2      	ittt	gt
 800ddd4:	eba8 0803 	subgt.w	r8, r8, r3
 800ddd8:	1aff      	subgt	r7, r7, r3
 800ddda:	eba9 0903 	subgt.w	r9, r9, r3
 800ddde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dd17      	ble.n	800de14 <_strtod_l+0x75c>
 800dde4:	4631      	mov	r1, r6
 800dde6:	461a      	mov	r2, r3
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7fe fe19 	bl	800ca20 <__pow5mult>
 800ddee:	4606      	mov	r6, r0
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f43f aead 	beq.w	800db50 <_strtod_l+0x498>
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7fe fd6a 	bl	800c8d4 <__multiply>
 800de00:	900f      	str	r0, [sp, #60]	; 0x3c
 800de02:	2800      	cmp	r0, #0
 800de04:	f43f aea4 	beq.w	800db50 <_strtod_l+0x498>
 800de08:	991e      	ldr	r1, [sp, #120]	; 0x78
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7fe fc5f 	bl	800c6ce <_Bfree>
 800de10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de12:	931e      	str	r3, [sp, #120]	; 0x78
 800de14:	f1b8 0f00 	cmp.w	r8, #0
 800de18:	f300 8091 	bgt.w	800df3e <_strtod_l+0x886>
 800de1c:	9b08      	ldr	r3, [sp, #32]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd08      	ble.n	800de34 <_strtod_l+0x77c>
 800de22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de24:	9907      	ldr	r1, [sp, #28]
 800de26:	4620      	mov	r0, r4
 800de28:	f7fe fdfa 	bl	800ca20 <__pow5mult>
 800de2c:	9007      	str	r0, [sp, #28]
 800de2e:	2800      	cmp	r0, #0
 800de30:	f43f ae8e 	beq.w	800db50 <_strtod_l+0x498>
 800de34:	2f00      	cmp	r7, #0
 800de36:	dd08      	ble.n	800de4a <_strtod_l+0x792>
 800de38:	9907      	ldr	r1, [sp, #28]
 800de3a:	463a      	mov	r2, r7
 800de3c:	4620      	mov	r0, r4
 800de3e:	f7fe fe2f 	bl	800caa0 <__lshift>
 800de42:	9007      	str	r0, [sp, #28]
 800de44:	2800      	cmp	r0, #0
 800de46:	f43f ae83 	beq.w	800db50 <_strtod_l+0x498>
 800de4a:	f1b9 0f00 	cmp.w	r9, #0
 800de4e:	dd08      	ble.n	800de62 <_strtod_l+0x7aa>
 800de50:	4631      	mov	r1, r6
 800de52:	464a      	mov	r2, r9
 800de54:	4620      	mov	r0, r4
 800de56:	f7fe fe23 	bl	800caa0 <__lshift>
 800de5a:	4606      	mov	r6, r0
 800de5c:	2800      	cmp	r0, #0
 800de5e:	f43f ae77 	beq.w	800db50 <_strtod_l+0x498>
 800de62:	9a07      	ldr	r2, [sp, #28]
 800de64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800de66:	4620      	mov	r0, r4
 800de68:	f7fe fea2 	bl	800cbb0 <__mdiff>
 800de6c:	4605      	mov	r5, r0
 800de6e:	2800      	cmp	r0, #0
 800de70:	f43f ae6e 	beq.w	800db50 <_strtod_l+0x498>
 800de74:	68c3      	ldr	r3, [r0, #12]
 800de76:	930f      	str	r3, [sp, #60]	; 0x3c
 800de78:	2300      	movs	r3, #0
 800de7a:	60c3      	str	r3, [r0, #12]
 800de7c:	4631      	mov	r1, r6
 800de7e:	f7fe fe7b 	bl	800cb78 <__mcmp>
 800de82:	2800      	cmp	r0, #0
 800de84:	da65      	bge.n	800df52 <_strtod_l+0x89a>
 800de86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de88:	ea53 030a 	orrs.w	r3, r3, sl
 800de8c:	f040 8087 	bne.w	800df9e <_strtod_l+0x8e6>
 800de90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de94:	2b00      	cmp	r3, #0
 800de96:	f040 8082 	bne.w	800df9e <_strtod_l+0x8e6>
 800de9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de9e:	0d1b      	lsrs	r3, r3, #20
 800dea0:	051b      	lsls	r3, r3, #20
 800dea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dea6:	d97a      	bls.n	800df9e <_strtod_l+0x8e6>
 800dea8:	696b      	ldr	r3, [r5, #20]
 800deaa:	b913      	cbnz	r3, 800deb2 <_strtod_l+0x7fa>
 800deac:	692b      	ldr	r3, [r5, #16]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	dd75      	ble.n	800df9e <_strtod_l+0x8e6>
 800deb2:	4629      	mov	r1, r5
 800deb4:	2201      	movs	r2, #1
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7fe fdf2 	bl	800caa0 <__lshift>
 800debc:	4631      	mov	r1, r6
 800debe:	4605      	mov	r5, r0
 800dec0:	f7fe fe5a 	bl	800cb78 <__mcmp>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	dd6a      	ble.n	800df9e <_strtod_l+0x8e6>
 800dec8:	9904      	ldr	r1, [sp, #16]
 800deca:	4a55      	ldr	r2, [pc, #340]	; (800e020 <_strtod_l+0x968>)
 800decc:	465b      	mov	r3, fp
 800dece:	2900      	cmp	r1, #0
 800ded0:	f000 8085 	beq.w	800dfde <_strtod_l+0x926>
 800ded4:	ea02 010b 	and.w	r1, r2, fp
 800ded8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dedc:	dc7f      	bgt.n	800dfde <_strtod_l+0x926>
 800dede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dee2:	f77f aeaa 	ble.w	800dc3a <_strtod_l+0x582>
 800dee6:	4a4f      	ldr	r2, [pc, #316]	; (800e024 <_strtod_l+0x96c>)
 800dee8:	2300      	movs	r3, #0
 800deea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800deee:	4650      	mov	r0, sl
 800def0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800def4:	4659      	mov	r1, fp
 800def6:	f7f2 fb8f 	bl	8000618 <__aeabi_dmul>
 800defa:	460b      	mov	r3, r1
 800defc:	4303      	orrs	r3, r0
 800defe:	bf08      	it	eq
 800df00:	2322      	moveq	r3, #34	; 0x22
 800df02:	4682      	mov	sl, r0
 800df04:	468b      	mov	fp, r1
 800df06:	bf08      	it	eq
 800df08:	6023      	streq	r3, [r4, #0]
 800df0a:	e62b      	b.n	800db64 <_strtod_l+0x4ac>
 800df0c:	f04f 32ff 	mov.w	r2, #4294967295
 800df10:	fa02 f303 	lsl.w	r3, r2, r3
 800df14:	ea03 0a0a 	and.w	sl, r3, sl
 800df18:	e6de      	b.n	800dcd8 <_strtod_l+0x620>
 800df1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800df1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800df22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800df26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800df2a:	fa01 f308 	lsl.w	r3, r1, r8
 800df2e:	930c      	str	r3, [sp, #48]	; 0x30
 800df30:	9111      	str	r1, [sp, #68]	; 0x44
 800df32:	e741      	b.n	800ddb8 <_strtod_l+0x700>
 800df34:	2300      	movs	r3, #0
 800df36:	930c      	str	r3, [sp, #48]	; 0x30
 800df38:	2301      	movs	r3, #1
 800df3a:	9311      	str	r3, [sp, #68]	; 0x44
 800df3c:	e73c      	b.n	800ddb8 <_strtod_l+0x700>
 800df3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df40:	4642      	mov	r2, r8
 800df42:	4620      	mov	r0, r4
 800df44:	f7fe fdac 	bl	800caa0 <__lshift>
 800df48:	901e      	str	r0, [sp, #120]	; 0x78
 800df4a:	2800      	cmp	r0, #0
 800df4c:	f47f af66 	bne.w	800de1c <_strtod_l+0x764>
 800df50:	e5fe      	b.n	800db50 <_strtod_l+0x498>
 800df52:	465f      	mov	r7, fp
 800df54:	d16e      	bne.n	800e034 <_strtod_l+0x97c>
 800df56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df5c:	b342      	cbz	r2, 800dfb0 <_strtod_l+0x8f8>
 800df5e:	4a32      	ldr	r2, [pc, #200]	; (800e028 <_strtod_l+0x970>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d128      	bne.n	800dfb6 <_strtod_l+0x8fe>
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	4650      	mov	r0, sl
 800df68:	b1eb      	cbz	r3, 800dfa6 <_strtod_l+0x8ee>
 800df6a:	4a2d      	ldr	r2, [pc, #180]	; (800e020 <_strtod_l+0x968>)
 800df6c:	403a      	ands	r2, r7
 800df6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800df72:	f04f 31ff 	mov.w	r1, #4294967295
 800df76:	d819      	bhi.n	800dfac <_strtod_l+0x8f4>
 800df78:	0d12      	lsrs	r2, r2, #20
 800df7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df7e:	fa01 f303 	lsl.w	r3, r1, r3
 800df82:	4298      	cmp	r0, r3
 800df84:	d117      	bne.n	800dfb6 <_strtod_l+0x8fe>
 800df86:	4b29      	ldr	r3, [pc, #164]	; (800e02c <_strtod_l+0x974>)
 800df88:	429f      	cmp	r7, r3
 800df8a:	d102      	bne.n	800df92 <_strtod_l+0x8da>
 800df8c:	3001      	adds	r0, #1
 800df8e:	f43f addf 	beq.w	800db50 <_strtod_l+0x498>
 800df92:	4b23      	ldr	r3, [pc, #140]	; (800e020 <_strtod_l+0x968>)
 800df94:	403b      	ands	r3, r7
 800df96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800df9a:	f04f 0a00 	mov.w	sl, #0
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1a0      	bne.n	800dee6 <_strtod_l+0x82e>
 800dfa4:	e5de      	b.n	800db64 <_strtod_l+0x4ac>
 800dfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfaa:	e7ea      	b.n	800df82 <_strtod_l+0x8ca>
 800dfac:	460b      	mov	r3, r1
 800dfae:	e7e8      	b.n	800df82 <_strtod_l+0x8ca>
 800dfb0:	ea53 030a 	orrs.w	r3, r3, sl
 800dfb4:	d088      	beq.n	800dec8 <_strtod_l+0x810>
 800dfb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfb8:	b1db      	cbz	r3, 800dff2 <_strtod_l+0x93a>
 800dfba:	423b      	tst	r3, r7
 800dfbc:	d0ef      	beq.n	800df9e <_strtod_l+0x8e6>
 800dfbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfc0:	9a04      	ldr	r2, [sp, #16]
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	4659      	mov	r1, fp
 800dfc6:	b1c3      	cbz	r3, 800dffa <_strtod_l+0x942>
 800dfc8:	f7ff fb5a 	bl	800d680 <sulp>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfd4:	f7f2 f96a 	bl	80002ac <__adddf3>
 800dfd8:	4682      	mov	sl, r0
 800dfda:	468b      	mov	fp, r1
 800dfdc:	e7df      	b.n	800df9e <_strtod_l+0x8e6>
 800dfde:	4013      	ands	r3, r2
 800dfe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dfe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfec:	f04f 3aff 	mov.w	sl, #4294967295
 800dff0:	e7d5      	b.n	800df9e <_strtod_l+0x8e6>
 800dff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dff4:	ea13 0f0a 	tst.w	r3, sl
 800dff8:	e7e0      	b.n	800dfbc <_strtod_l+0x904>
 800dffa:	f7ff fb41 	bl	800d680 <sulp>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e006:	f7f2 f94f 	bl	80002a8 <__aeabi_dsub>
 800e00a:	2200      	movs	r2, #0
 800e00c:	2300      	movs	r3, #0
 800e00e:	4682      	mov	sl, r0
 800e010:	468b      	mov	fp, r1
 800e012:	f7f2 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 800e016:	2800      	cmp	r0, #0
 800e018:	d0c1      	beq.n	800df9e <_strtod_l+0x8e6>
 800e01a:	e60e      	b.n	800dc3a <_strtod_l+0x582>
 800e01c:	fffffc02 	.word	0xfffffc02
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	39500000 	.word	0x39500000
 800e028:	000fffff 	.word	0x000fffff
 800e02c:	7fefffff 	.word	0x7fefffff
 800e030:	080120a8 	.word	0x080120a8
 800e034:	4631      	mov	r1, r6
 800e036:	4628      	mov	r0, r5
 800e038:	f7fe ff1a 	bl	800ce70 <__ratio>
 800e03c:	ec59 8b10 	vmov	r8, r9, d0
 800e040:	ee10 0a10 	vmov	r0, s0
 800e044:	2200      	movs	r2, #0
 800e046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e04a:	4649      	mov	r1, r9
 800e04c:	f7f2 fd60 	bl	8000b10 <__aeabi_dcmple>
 800e050:	2800      	cmp	r0, #0
 800e052:	d07c      	beq.n	800e14e <_strtod_l+0xa96>
 800e054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e056:	2b00      	cmp	r3, #0
 800e058:	d04c      	beq.n	800e0f4 <_strtod_l+0xa3c>
 800e05a:	4b95      	ldr	r3, [pc, #596]	; (800e2b0 <_strtod_l+0xbf8>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e062:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e2b0 <_strtod_l+0xbf8>
 800e066:	f04f 0800 	mov.w	r8, #0
 800e06a:	4b92      	ldr	r3, [pc, #584]	; (800e2b4 <_strtod_l+0xbfc>)
 800e06c:	403b      	ands	r3, r7
 800e06e:	9311      	str	r3, [sp, #68]	; 0x44
 800e070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e072:	4b91      	ldr	r3, [pc, #580]	; (800e2b8 <_strtod_l+0xc00>)
 800e074:	429a      	cmp	r2, r3
 800e076:	f040 80b2 	bne.w	800e1de <_strtod_l+0xb26>
 800e07a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e082:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e086:	ec4b ab10 	vmov	d0, sl, fp
 800e08a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e08e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e092:	f7fe fe15 	bl	800ccc0 <__ulp>
 800e096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e09a:	ec53 2b10 	vmov	r2, r3, d0
 800e09e:	f7f2 fabb 	bl	8000618 <__aeabi_dmul>
 800e0a2:	4652      	mov	r2, sl
 800e0a4:	465b      	mov	r3, fp
 800e0a6:	f7f2 f901 	bl	80002ac <__adddf3>
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4981      	ldr	r1, [pc, #516]	; (800e2b4 <_strtod_l+0xbfc>)
 800e0ae:	4a83      	ldr	r2, [pc, #524]	; (800e2bc <_strtod_l+0xc04>)
 800e0b0:	4019      	ands	r1, r3
 800e0b2:	4291      	cmp	r1, r2
 800e0b4:	4682      	mov	sl, r0
 800e0b6:	d95e      	bls.n	800e176 <_strtod_l+0xabe>
 800e0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d103      	bne.n	800e0ca <_strtod_l+0xa12>
 800e0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f43f ad43 	beq.w	800db50 <_strtod_l+0x498>
 800e0ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e2c8 <_strtod_l+0xc10>
 800e0ce:	f04f 3aff 	mov.w	sl, #4294967295
 800e0d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f7fe fafa 	bl	800c6ce <_Bfree>
 800e0da:	9907      	ldr	r1, [sp, #28]
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7fe faf6 	bl	800c6ce <_Bfree>
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f7fe faf2 	bl	800c6ce <_Bfree>
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7fe faee 	bl	800c6ce <_Bfree>
 800e0f2:	e613      	b.n	800dd1c <_strtod_l+0x664>
 800e0f4:	f1ba 0f00 	cmp.w	sl, #0
 800e0f8:	d11b      	bne.n	800e132 <_strtod_l+0xa7a>
 800e0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0fe:	b9f3      	cbnz	r3, 800e13e <_strtod_l+0xa86>
 800e100:	4b6b      	ldr	r3, [pc, #428]	; (800e2b0 <_strtod_l+0xbf8>)
 800e102:	2200      	movs	r2, #0
 800e104:	4640      	mov	r0, r8
 800e106:	4649      	mov	r1, r9
 800e108:	f7f2 fcf8 	bl	8000afc <__aeabi_dcmplt>
 800e10c:	b9d0      	cbnz	r0, 800e144 <_strtod_l+0xa8c>
 800e10e:	4640      	mov	r0, r8
 800e110:	4649      	mov	r1, r9
 800e112:	4b6b      	ldr	r3, [pc, #428]	; (800e2c0 <_strtod_l+0xc08>)
 800e114:	2200      	movs	r2, #0
 800e116:	f7f2 fa7f 	bl	8000618 <__aeabi_dmul>
 800e11a:	4680      	mov	r8, r0
 800e11c:	4689      	mov	r9, r1
 800e11e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e122:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e126:	931b      	str	r3, [sp, #108]	; 0x6c
 800e128:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e12c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e130:	e79b      	b.n	800e06a <_strtod_l+0x9b2>
 800e132:	f1ba 0f01 	cmp.w	sl, #1
 800e136:	d102      	bne.n	800e13e <_strtod_l+0xa86>
 800e138:	2f00      	cmp	r7, #0
 800e13a:	f43f ad7e 	beq.w	800dc3a <_strtod_l+0x582>
 800e13e:	4b61      	ldr	r3, [pc, #388]	; (800e2c4 <_strtod_l+0xc0c>)
 800e140:	2200      	movs	r2, #0
 800e142:	e78c      	b.n	800e05e <_strtod_l+0x9a6>
 800e144:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e2c0 <_strtod_l+0xc08>
 800e148:	f04f 0800 	mov.w	r8, #0
 800e14c:	e7e7      	b.n	800e11e <_strtod_l+0xa66>
 800e14e:	4b5c      	ldr	r3, [pc, #368]	; (800e2c0 <_strtod_l+0xc08>)
 800e150:	4640      	mov	r0, r8
 800e152:	4649      	mov	r1, r9
 800e154:	2200      	movs	r2, #0
 800e156:	f7f2 fa5f 	bl	8000618 <__aeabi_dmul>
 800e15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e15c:	4680      	mov	r8, r0
 800e15e:	4689      	mov	r9, r1
 800e160:	b933      	cbnz	r3, 800e170 <_strtod_l+0xab8>
 800e162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e166:	9012      	str	r0, [sp, #72]	; 0x48
 800e168:	9313      	str	r3, [sp, #76]	; 0x4c
 800e16a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e16e:	e7dd      	b.n	800e12c <_strtod_l+0xa74>
 800e170:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e174:	e7f9      	b.n	800e16a <_strtod_l+0xab2>
 800e176:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e17a:	9b04      	ldr	r3, [sp, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1a8      	bne.n	800e0d2 <_strtod_l+0xa1a>
 800e180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e184:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e186:	0d1b      	lsrs	r3, r3, #20
 800e188:	051b      	lsls	r3, r3, #20
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d1a1      	bne.n	800e0d2 <_strtod_l+0xa1a>
 800e18e:	4640      	mov	r0, r8
 800e190:	4649      	mov	r1, r9
 800e192:	f7f2 fdf1 	bl	8000d78 <__aeabi_d2lz>
 800e196:	f7f2 fa11 	bl	80005bc <__aeabi_l2d>
 800e19a:	4602      	mov	r2, r0
 800e19c:	460b      	mov	r3, r1
 800e19e:	4640      	mov	r0, r8
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	f7f2 f881 	bl	80002a8 <__aeabi_dsub>
 800e1a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1ac:	ea43 030a 	orr.w	r3, r3, sl
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	4680      	mov	r8, r0
 800e1b4:	4689      	mov	r9, r1
 800e1b6:	d053      	beq.n	800e260 <_strtod_l+0xba8>
 800e1b8:	a335      	add	r3, pc, #212	; (adr r3, 800e290 <_strtod_l+0xbd8>)
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	f7f2 fc9d 	bl	8000afc <__aeabi_dcmplt>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f47f acce 	bne.w	800db64 <_strtod_l+0x4ac>
 800e1c8:	a333      	add	r3, pc, #204	; (adr r3, 800e298 <_strtod_l+0xbe0>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 fcb1 	bl	8000b38 <__aeabi_dcmpgt>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f43f af7b 	beq.w	800e0d2 <_strtod_l+0xa1a>
 800e1dc:	e4c2      	b.n	800db64 <_strtod_l+0x4ac>
 800e1de:	9b04      	ldr	r3, [sp, #16]
 800e1e0:	b333      	cbz	r3, 800e230 <_strtod_l+0xb78>
 800e1e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e1e8:	d822      	bhi.n	800e230 <_strtod_l+0xb78>
 800e1ea:	a32d      	add	r3, pc, #180	; (adr r3, 800e2a0 <_strtod_l+0xbe8>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	4640      	mov	r0, r8
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	f7f2 fc8c 	bl	8000b10 <__aeabi_dcmple>
 800e1f8:	b1a0      	cbz	r0, 800e224 <_strtod_l+0xb6c>
 800e1fa:	4649      	mov	r1, r9
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	f7f2 fce3 	bl	8000bc8 <__aeabi_d2uiz>
 800e202:	2801      	cmp	r0, #1
 800e204:	bf38      	it	cc
 800e206:	2001      	movcc	r0, #1
 800e208:	f7f2 f98c 	bl	8000524 <__aeabi_ui2d>
 800e20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e20e:	4680      	mov	r8, r0
 800e210:	4689      	mov	r9, r1
 800e212:	bb13      	cbnz	r3, 800e25a <_strtod_l+0xba2>
 800e214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e218:	9014      	str	r0, [sp, #80]	; 0x50
 800e21a:	9315      	str	r3, [sp, #84]	; 0x54
 800e21c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e220:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e228:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e22c:	1a9b      	subs	r3, r3, r2
 800e22e:	930d      	str	r3, [sp, #52]	; 0x34
 800e230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e234:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e23c:	f7fe fd40 	bl	800ccc0 <__ulp>
 800e240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e244:	ec53 2b10 	vmov	r2, r3, d0
 800e248:	f7f2 f9e6 	bl	8000618 <__aeabi_dmul>
 800e24c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e250:	f7f2 f82c 	bl	80002ac <__adddf3>
 800e254:	4682      	mov	sl, r0
 800e256:	468b      	mov	fp, r1
 800e258:	e78f      	b.n	800e17a <_strtod_l+0xac2>
 800e25a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e25e:	e7dd      	b.n	800e21c <_strtod_l+0xb64>
 800e260:	a311      	add	r3, pc, #68	; (adr r3, 800e2a8 <_strtod_l+0xbf0>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f2 fc49 	bl	8000afc <__aeabi_dcmplt>
 800e26a:	e7b4      	b.n	800e1d6 <_strtod_l+0xb1e>
 800e26c:	2300      	movs	r3, #0
 800e26e:	930e      	str	r3, [sp, #56]	; 0x38
 800e270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	f7ff ba65 	b.w	800d744 <_strtod_l+0x8c>
 800e27a:	2b65      	cmp	r3, #101	; 0x65
 800e27c:	f43f ab5d 	beq.w	800d93a <_strtod_l+0x282>
 800e280:	2b45      	cmp	r3, #69	; 0x45
 800e282:	f43f ab5a 	beq.w	800d93a <_strtod_l+0x282>
 800e286:	2201      	movs	r2, #1
 800e288:	f7ff bb92 	b.w	800d9b0 <_strtod_l+0x2f8>
 800e28c:	f3af 8000 	nop.w
 800e290:	94a03595 	.word	0x94a03595
 800e294:	3fdfffff 	.word	0x3fdfffff
 800e298:	35afe535 	.word	0x35afe535
 800e29c:	3fe00000 	.word	0x3fe00000
 800e2a0:	ffc00000 	.word	0xffc00000
 800e2a4:	41dfffff 	.word	0x41dfffff
 800e2a8:	94a03595 	.word	0x94a03595
 800e2ac:	3fcfffff 	.word	0x3fcfffff
 800e2b0:	3ff00000 	.word	0x3ff00000
 800e2b4:	7ff00000 	.word	0x7ff00000
 800e2b8:	7fe00000 	.word	0x7fe00000
 800e2bc:	7c9fffff 	.word	0x7c9fffff
 800e2c0:	3fe00000 	.word	0x3fe00000
 800e2c4:	bff00000 	.word	0xbff00000
 800e2c8:	7fefffff 	.word	0x7fefffff

0800e2cc <_strtod_r>:
 800e2cc:	4b01      	ldr	r3, [pc, #4]	; (800e2d4 <_strtod_r+0x8>)
 800e2ce:	f7ff b9f3 	b.w	800d6b8 <_strtod_l>
 800e2d2:	bf00      	nop
 800e2d4:	200008c0 	.word	0x200008c0

0800e2d8 <_strtol_l.isra.0>:
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2de:	d001      	beq.n	800e2e4 <_strtol_l.isra.0+0xc>
 800e2e0:	2b24      	cmp	r3, #36	; 0x24
 800e2e2:	d906      	bls.n	800e2f2 <_strtol_l.isra.0+0x1a>
 800e2e4:	f7f7 ffa8 	bl	8006238 <__errno>
 800e2e8:	2316      	movs	r3, #22
 800e2ea:	6003      	str	r3, [r0, #0]
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2f2:	4f3a      	ldr	r7, [pc, #232]	; (800e3dc <_strtol_l.isra.0+0x104>)
 800e2f4:	468e      	mov	lr, r1
 800e2f6:	4676      	mov	r6, lr
 800e2f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e2fc:	5de5      	ldrb	r5, [r4, r7]
 800e2fe:	f015 0508 	ands.w	r5, r5, #8
 800e302:	d1f8      	bne.n	800e2f6 <_strtol_l.isra.0+0x1e>
 800e304:	2c2d      	cmp	r4, #45	; 0x2d
 800e306:	d134      	bne.n	800e372 <_strtol_l.isra.0+0x9a>
 800e308:	f89e 4000 	ldrb.w	r4, [lr]
 800e30c:	f04f 0801 	mov.w	r8, #1
 800e310:	f106 0e02 	add.w	lr, r6, #2
 800e314:	2b00      	cmp	r3, #0
 800e316:	d05c      	beq.n	800e3d2 <_strtol_l.isra.0+0xfa>
 800e318:	2b10      	cmp	r3, #16
 800e31a:	d10c      	bne.n	800e336 <_strtol_l.isra.0+0x5e>
 800e31c:	2c30      	cmp	r4, #48	; 0x30
 800e31e:	d10a      	bne.n	800e336 <_strtol_l.isra.0+0x5e>
 800e320:	f89e 4000 	ldrb.w	r4, [lr]
 800e324:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e328:	2c58      	cmp	r4, #88	; 0x58
 800e32a:	d14d      	bne.n	800e3c8 <_strtol_l.isra.0+0xf0>
 800e32c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e330:	2310      	movs	r3, #16
 800e332:	f10e 0e02 	add.w	lr, lr, #2
 800e336:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e33a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e33e:	2600      	movs	r6, #0
 800e340:	fbbc f9f3 	udiv	r9, ip, r3
 800e344:	4635      	mov	r5, r6
 800e346:	fb03 ca19 	mls	sl, r3, r9, ip
 800e34a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e34e:	2f09      	cmp	r7, #9
 800e350:	d818      	bhi.n	800e384 <_strtol_l.isra.0+0xac>
 800e352:	463c      	mov	r4, r7
 800e354:	42a3      	cmp	r3, r4
 800e356:	dd24      	ble.n	800e3a2 <_strtol_l.isra.0+0xca>
 800e358:	2e00      	cmp	r6, #0
 800e35a:	db1f      	blt.n	800e39c <_strtol_l.isra.0+0xc4>
 800e35c:	45a9      	cmp	r9, r5
 800e35e:	d31d      	bcc.n	800e39c <_strtol_l.isra.0+0xc4>
 800e360:	d101      	bne.n	800e366 <_strtol_l.isra.0+0x8e>
 800e362:	45a2      	cmp	sl, r4
 800e364:	db1a      	blt.n	800e39c <_strtol_l.isra.0+0xc4>
 800e366:	fb05 4503 	mla	r5, r5, r3, r4
 800e36a:	2601      	movs	r6, #1
 800e36c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e370:	e7eb      	b.n	800e34a <_strtol_l.isra.0+0x72>
 800e372:	2c2b      	cmp	r4, #43	; 0x2b
 800e374:	bf08      	it	eq
 800e376:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e37a:	46a8      	mov	r8, r5
 800e37c:	bf08      	it	eq
 800e37e:	f106 0e02 	addeq.w	lr, r6, #2
 800e382:	e7c7      	b.n	800e314 <_strtol_l.isra.0+0x3c>
 800e384:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e388:	2f19      	cmp	r7, #25
 800e38a:	d801      	bhi.n	800e390 <_strtol_l.isra.0+0xb8>
 800e38c:	3c37      	subs	r4, #55	; 0x37
 800e38e:	e7e1      	b.n	800e354 <_strtol_l.isra.0+0x7c>
 800e390:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e394:	2f19      	cmp	r7, #25
 800e396:	d804      	bhi.n	800e3a2 <_strtol_l.isra.0+0xca>
 800e398:	3c57      	subs	r4, #87	; 0x57
 800e39a:	e7db      	b.n	800e354 <_strtol_l.isra.0+0x7c>
 800e39c:	f04f 36ff 	mov.w	r6, #4294967295
 800e3a0:	e7e4      	b.n	800e36c <_strtol_l.isra.0+0x94>
 800e3a2:	2e00      	cmp	r6, #0
 800e3a4:	da05      	bge.n	800e3b2 <_strtol_l.isra.0+0xda>
 800e3a6:	2322      	movs	r3, #34	; 0x22
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	4665      	mov	r5, ip
 800e3ac:	b942      	cbnz	r2, 800e3c0 <_strtol_l.isra.0+0xe8>
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	e79d      	b.n	800e2ee <_strtol_l.isra.0+0x16>
 800e3b2:	f1b8 0f00 	cmp.w	r8, #0
 800e3b6:	d000      	beq.n	800e3ba <_strtol_l.isra.0+0xe2>
 800e3b8:	426d      	negs	r5, r5
 800e3ba:	2a00      	cmp	r2, #0
 800e3bc:	d0f7      	beq.n	800e3ae <_strtol_l.isra.0+0xd6>
 800e3be:	b10e      	cbz	r6, 800e3c4 <_strtol_l.isra.0+0xec>
 800e3c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e3c4:	6011      	str	r1, [r2, #0]
 800e3c6:	e7f2      	b.n	800e3ae <_strtol_l.isra.0+0xd6>
 800e3c8:	2430      	movs	r4, #48	; 0x30
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1b3      	bne.n	800e336 <_strtol_l.isra.0+0x5e>
 800e3ce:	2308      	movs	r3, #8
 800e3d0:	e7b1      	b.n	800e336 <_strtol_l.isra.0+0x5e>
 800e3d2:	2c30      	cmp	r4, #48	; 0x30
 800e3d4:	d0a4      	beq.n	800e320 <_strtol_l.isra.0+0x48>
 800e3d6:	230a      	movs	r3, #10
 800e3d8:	e7ad      	b.n	800e336 <_strtol_l.isra.0+0x5e>
 800e3da:	bf00      	nop
 800e3dc:	08011d92 	.word	0x08011d92

0800e3e0 <_strtol_r>:
 800e3e0:	f7ff bf7a 	b.w	800e2d8 <_strtol_l.isra.0>

0800e3e4 <_strtoll_l.isra.0>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	b087      	sub	sp, #28
 800e3ea:	4691      	mov	r9, r2
 800e3ec:	4a47      	ldr	r2, [pc, #284]	; (800e50c <_strtoll_l.isra.0+0x128>)
 800e3ee:	9005      	str	r0, [sp, #20]
 800e3f0:	4688      	mov	r8, r1
 800e3f2:	461f      	mov	r7, r3
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	462b      	mov	r3, r5
 800e3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3fc:	5ca6      	ldrb	r6, [r4, r2]
 800e3fe:	f016 0608 	ands.w	r6, r6, #8
 800e402:	d1f8      	bne.n	800e3f6 <_strtoll_l.isra.0+0x12>
 800e404:	2c2d      	cmp	r4, #45	; 0x2d
 800e406:	d147      	bne.n	800e498 <_strtoll_l.isra.0+0xb4>
 800e408:	782c      	ldrb	r4, [r5, #0]
 800e40a:	2601      	movs	r6, #1
 800e40c:	1c9d      	adds	r5, r3, #2
 800e40e:	2f00      	cmp	r7, #0
 800e410:	d077      	beq.n	800e502 <_strtoll_l.isra.0+0x11e>
 800e412:	2f10      	cmp	r7, #16
 800e414:	d109      	bne.n	800e42a <_strtoll_l.isra.0+0x46>
 800e416:	2c30      	cmp	r4, #48	; 0x30
 800e418:	d107      	bne.n	800e42a <_strtoll_l.isra.0+0x46>
 800e41a:	782b      	ldrb	r3, [r5, #0]
 800e41c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e420:	2b58      	cmp	r3, #88	; 0x58
 800e422:	d169      	bne.n	800e4f8 <_strtoll_l.isra.0+0x114>
 800e424:	786c      	ldrb	r4, [r5, #1]
 800e426:	2710      	movs	r7, #16
 800e428:	3502      	adds	r5, #2
 800e42a:	f04f 32ff 	mov.w	r2, #4294967295
 800e42e:	1990      	adds	r0, r2, r6
 800e430:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e434:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800e438:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800e43c:	463a      	mov	r2, r7
 800e43e:	465b      	mov	r3, fp
 800e440:	e9cd 0100 	strd	r0, r1, [sp]
 800e444:	f7f2 fc80 	bl	8000d48 <__aeabi_uldivmod>
 800e448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e44c:	46ba      	mov	sl, r7
 800e44e:	4696      	mov	lr, r2
 800e450:	2300      	movs	r3, #0
 800e452:	2000      	movs	r0, #0
 800e454:	2100      	movs	r1, #0
 800e456:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e45a:	f1bc 0f09 	cmp.w	ip, #9
 800e45e:	d820      	bhi.n	800e4a2 <_strtoll_l.isra.0+0xbe>
 800e460:	4664      	mov	r4, ip
 800e462:	42a7      	cmp	r7, r4
 800e464:	dd2e      	ble.n	800e4c4 <_strtoll_l.isra.0+0xe0>
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	d013      	beq.n	800e492 <_strtoll_l.isra.0+0xae>
 800e46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e46e:	428b      	cmp	r3, r1
 800e470:	bf08      	it	eq
 800e472:	4282      	cmpeq	r2, r0
 800e474:	d323      	bcc.n	800e4be <_strtoll_l.isra.0+0xda>
 800e476:	d101      	bne.n	800e47c <_strtoll_l.isra.0+0x98>
 800e478:	45a6      	cmp	lr, r4
 800e47a:	db20      	blt.n	800e4be <_strtoll_l.isra.0+0xda>
 800e47c:	fb0a f301 	mul.w	r3, sl, r1
 800e480:	fb00 330b 	mla	r3, r0, fp, r3
 800e484:	fbaa 0100 	umull	r0, r1, sl, r0
 800e488:	4419      	add	r1, r3
 800e48a:	1900      	adds	r0, r0, r4
 800e48c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e490:	2301      	movs	r3, #1
 800e492:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e496:	e7de      	b.n	800e456 <_strtoll_l.isra.0+0x72>
 800e498:	2c2b      	cmp	r4, #43	; 0x2b
 800e49a:	bf04      	itt	eq
 800e49c:	782c      	ldrbeq	r4, [r5, #0]
 800e49e:	1c9d      	addeq	r5, r3, #2
 800e4a0:	e7b5      	b.n	800e40e <_strtoll_l.isra.0+0x2a>
 800e4a2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e4a6:	f1bc 0f19 	cmp.w	ip, #25
 800e4aa:	d801      	bhi.n	800e4b0 <_strtoll_l.isra.0+0xcc>
 800e4ac:	3c37      	subs	r4, #55	; 0x37
 800e4ae:	e7d8      	b.n	800e462 <_strtoll_l.isra.0+0x7e>
 800e4b0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e4b4:	f1bc 0f19 	cmp.w	ip, #25
 800e4b8:	d804      	bhi.n	800e4c4 <_strtoll_l.isra.0+0xe0>
 800e4ba:	3c57      	subs	r4, #87	; 0x57
 800e4bc:	e7d1      	b.n	800e462 <_strtoll_l.isra.0+0x7e>
 800e4be:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c2:	e7e6      	b.n	800e492 <_strtoll_l.isra.0+0xae>
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	d10a      	bne.n	800e4de <_strtoll_l.isra.0+0xfa>
 800e4c8:	9a05      	ldr	r2, [sp, #20]
 800e4ca:	2322      	movs	r3, #34	; 0x22
 800e4cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	f1b9 0f00 	cmp.w	r9, #0
 800e4d6:	d10a      	bne.n	800e4ee <_strtoll_l.isra.0+0x10a>
 800e4d8:	b007      	add	sp, #28
 800e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4de:	b116      	cbz	r6, 800e4e6 <_strtoll_l.isra.0+0x102>
 800e4e0:	4240      	negs	r0, r0
 800e4e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e4e6:	f1b9 0f00 	cmp.w	r9, #0
 800e4ea:	d0f5      	beq.n	800e4d8 <_strtoll_l.isra.0+0xf4>
 800e4ec:	b10b      	cbz	r3, 800e4f2 <_strtoll_l.isra.0+0x10e>
 800e4ee:	f105 38ff 	add.w	r8, r5, #4294967295
 800e4f2:	f8c9 8000 	str.w	r8, [r9]
 800e4f6:	e7ef      	b.n	800e4d8 <_strtoll_l.isra.0+0xf4>
 800e4f8:	2430      	movs	r4, #48	; 0x30
 800e4fa:	2f00      	cmp	r7, #0
 800e4fc:	d195      	bne.n	800e42a <_strtoll_l.isra.0+0x46>
 800e4fe:	2708      	movs	r7, #8
 800e500:	e793      	b.n	800e42a <_strtoll_l.isra.0+0x46>
 800e502:	2c30      	cmp	r4, #48	; 0x30
 800e504:	d089      	beq.n	800e41a <_strtoll_l.isra.0+0x36>
 800e506:	270a      	movs	r7, #10
 800e508:	e78f      	b.n	800e42a <_strtoll_l.isra.0+0x46>
 800e50a:	bf00      	nop
 800e50c:	08011d92 	.word	0x08011d92

0800e510 <_strtoll_r>:
 800e510:	f7ff bf68 	b.w	800e3e4 <_strtoll_l.isra.0>

0800e514 <_strtoul_l.isra.0>:
 800e514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e518:	4e3b      	ldr	r6, [pc, #236]	; (800e608 <_strtoul_l.isra.0+0xf4>)
 800e51a:	4686      	mov	lr, r0
 800e51c:	468c      	mov	ip, r1
 800e51e:	4660      	mov	r0, ip
 800e520:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e524:	5da5      	ldrb	r5, [r4, r6]
 800e526:	f015 0508 	ands.w	r5, r5, #8
 800e52a:	d1f8      	bne.n	800e51e <_strtoul_l.isra.0+0xa>
 800e52c:	2c2d      	cmp	r4, #45	; 0x2d
 800e52e:	d134      	bne.n	800e59a <_strtoul_l.isra.0+0x86>
 800e530:	f89c 4000 	ldrb.w	r4, [ip]
 800e534:	f04f 0801 	mov.w	r8, #1
 800e538:	f100 0c02 	add.w	ip, r0, #2
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d05e      	beq.n	800e5fe <_strtoul_l.isra.0+0xea>
 800e540:	2b10      	cmp	r3, #16
 800e542:	d10c      	bne.n	800e55e <_strtoul_l.isra.0+0x4a>
 800e544:	2c30      	cmp	r4, #48	; 0x30
 800e546:	d10a      	bne.n	800e55e <_strtoul_l.isra.0+0x4a>
 800e548:	f89c 0000 	ldrb.w	r0, [ip]
 800e54c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e550:	2858      	cmp	r0, #88	; 0x58
 800e552:	d14f      	bne.n	800e5f4 <_strtoul_l.isra.0+0xe0>
 800e554:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e558:	2310      	movs	r3, #16
 800e55a:	f10c 0c02 	add.w	ip, ip, #2
 800e55e:	f04f 37ff 	mov.w	r7, #4294967295
 800e562:	2500      	movs	r5, #0
 800e564:	fbb7 f7f3 	udiv	r7, r7, r3
 800e568:	fb03 f907 	mul.w	r9, r3, r7
 800e56c:	ea6f 0909 	mvn.w	r9, r9
 800e570:	4628      	mov	r0, r5
 800e572:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e576:	2e09      	cmp	r6, #9
 800e578:	d818      	bhi.n	800e5ac <_strtoul_l.isra.0+0x98>
 800e57a:	4634      	mov	r4, r6
 800e57c:	42a3      	cmp	r3, r4
 800e57e:	dd24      	ble.n	800e5ca <_strtoul_l.isra.0+0xb6>
 800e580:	2d00      	cmp	r5, #0
 800e582:	db1f      	blt.n	800e5c4 <_strtoul_l.isra.0+0xb0>
 800e584:	4287      	cmp	r7, r0
 800e586:	d31d      	bcc.n	800e5c4 <_strtoul_l.isra.0+0xb0>
 800e588:	d101      	bne.n	800e58e <_strtoul_l.isra.0+0x7a>
 800e58a:	45a1      	cmp	r9, r4
 800e58c:	db1a      	blt.n	800e5c4 <_strtoul_l.isra.0+0xb0>
 800e58e:	fb00 4003 	mla	r0, r0, r3, r4
 800e592:	2501      	movs	r5, #1
 800e594:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e598:	e7eb      	b.n	800e572 <_strtoul_l.isra.0+0x5e>
 800e59a:	2c2b      	cmp	r4, #43	; 0x2b
 800e59c:	bf08      	it	eq
 800e59e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e5a2:	46a8      	mov	r8, r5
 800e5a4:	bf08      	it	eq
 800e5a6:	f100 0c02 	addeq.w	ip, r0, #2
 800e5aa:	e7c7      	b.n	800e53c <_strtoul_l.isra.0+0x28>
 800e5ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e5b0:	2e19      	cmp	r6, #25
 800e5b2:	d801      	bhi.n	800e5b8 <_strtoul_l.isra.0+0xa4>
 800e5b4:	3c37      	subs	r4, #55	; 0x37
 800e5b6:	e7e1      	b.n	800e57c <_strtoul_l.isra.0+0x68>
 800e5b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e5bc:	2e19      	cmp	r6, #25
 800e5be:	d804      	bhi.n	800e5ca <_strtoul_l.isra.0+0xb6>
 800e5c0:	3c57      	subs	r4, #87	; 0x57
 800e5c2:	e7db      	b.n	800e57c <_strtoul_l.isra.0+0x68>
 800e5c4:	f04f 35ff 	mov.w	r5, #4294967295
 800e5c8:	e7e4      	b.n	800e594 <_strtoul_l.isra.0+0x80>
 800e5ca:	2d00      	cmp	r5, #0
 800e5cc:	da07      	bge.n	800e5de <_strtoul_l.isra.0+0xca>
 800e5ce:	2322      	movs	r3, #34	; 0x22
 800e5d0:	f8ce 3000 	str.w	r3, [lr]
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d8:	b942      	cbnz	r2, 800e5ec <_strtoul_l.isra.0+0xd8>
 800e5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5de:	f1b8 0f00 	cmp.w	r8, #0
 800e5e2:	d000      	beq.n	800e5e6 <_strtoul_l.isra.0+0xd2>
 800e5e4:	4240      	negs	r0, r0
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	d0f7      	beq.n	800e5da <_strtoul_l.isra.0+0xc6>
 800e5ea:	b10d      	cbz	r5, 800e5f0 <_strtoul_l.isra.0+0xdc>
 800e5ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e5f0:	6011      	str	r1, [r2, #0]
 800e5f2:	e7f2      	b.n	800e5da <_strtoul_l.isra.0+0xc6>
 800e5f4:	2430      	movs	r4, #48	; 0x30
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1b1      	bne.n	800e55e <_strtoul_l.isra.0+0x4a>
 800e5fa:	2308      	movs	r3, #8
 800e5fc:	e7af      	b.n	800e55e <_strtoul_l.isra.0+0x4a>
 800e5fe:	2c30      	cmp	r4, #48	; 0x30
 800e600:	d0a2      	beq.n	800e548 <_strtoul_l.isra.0+0x34>
 800e602:	230a      	movs	r3, #10
 800e604:	e7ab      	b.n	800e55e <_strtoul_l.isra.0+0x4a>
 800e606:	bf00      	nop
 800e608:	08011d92 	.word	0x08011d92

0800e60c <_strtoul_r>:
 800e60c:	f7ff bf82 	b.w	800e514 <_strtoul_l.isra.0>

0800e610 <strtoul>:
 800e610:	4613      	mov	r3, r2
 800e612:	460a      	mov	r2, r1
 800e614:	4601      	mov	r1, r0
 800e616:	4802      	ldr	r0, [pc, #8]	; (800e620 <strtoul+0x10>)
 800e618:	6800      	ldr	r0, [r0, #0]
 800e61a:	f7ff bf7b 	b.w	800e514 <_strtoul_l.isra.0>
 800e61e:	bf00      	nop
 800e620:	2000001c 	.word	0x2000001c

0800e624 <_strtoull_l.isra.0>:
 800e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	b085      	sub	sp, #20
 800e62a:	4691      	mov	r9, r2
 800e62c:	4a49      	ldr	r2, [pc, #292]	; (800e754 <_strtoull_l.isra.0+0x130>)
 800e62e:	9003      	str	r0, [sp, #12]
 800e630:	4688      	mov	r8, r1
 800e632:	461e      	mov	r6, r3
 800e634:	460d      	mov	r5, r1
 800e636:	462b      	mov	r3, r5
 800e638:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e63c:	5ca7      	ldrb	r7, [r4, r2]
 800e63e:	f017 0708 	ands.w	r7, r7, #8
 800e642:	d1f8      	bne.n	800e636 <_strtoull_l.isra.0+0x12>
 800e644:	2c2d      	cmp	r4, #45	; 0x2d
 800e646:	d14a      	bne.n	800e6de <_strtoull_l.isra.0+0xba>
 800e648:	782c      	ldrb	r4, [r5, #0]
 800e64a:	2701      	movs	r7, #1
 800e64c:	1c9d      	adds	r5, r3, #2
 800e64e:	2e00      	cmp	r6, #0
 800e650:	d07c      	beq.n	800e74c <_strtoull_l.isra.0+0x128>
 800e652:	2e10      	cmp	r6, #16
 800e654:	d109      	bne.n	800e66a <_strtoull_l.isra.0+0x46>
 800e656:	2c30      	cmp	r4, #48	; 0x30
 800e658:	d107      	bne.n	800e66a <_strtoull_l.isra.0+0x46>
 800e65a:	782b      	ldrb	r3, [r5, #0]
 800e65c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e660:	2b58      	cmp	r3, #88	; 0x58
 800e662:	d16e      	bne.n	800e742 <_strtoull_l.isra.0+0x11e>
 800e664:	786c      	ldrb	r4, [r5, #1]
 800e666:	2610      	movs	r6, #16
 800e668:	3502      	adds	r5, #2
 800e66a:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800e66e:	4632      	mov	r2, r6
 800e670:	465b      	mov	r3, fp
 800e672:	f04f 30ff 	mov.w	r0, #4294967295
 800e676:	f04f 31ff 	mov.w	r1, #4294967295
 800e67a:	f7f2 fb65 	bl	8000d48 <__aeabi_uldivmod>
 800e67e:	e9cd 0100 	strd	r0, r1, [sp]
 800e682:	4632      	mov	r2, r6
 800e684:	465b      	mov	r3, fp
 800e686:	f04f 30ff 	mov.w	r0, #4294967295
 800e68a:	f04f 31ff 	mov.w	r1, #4294967295
 800e68e:	f7f2 fb5b 	bl	8000d48 <__aeabi_uldivmod>
 800e692:	46b2      	mov	sl, r6
 800e694:	4696      	mov	lr, r2
 800e696:	2300      	movs	r3, #0
 800e698:	2000      	movs	r0, #0
 800e69a:	2100      	movs	r1, #0
 800e69c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e6a0:	f1bc 0f09 	cmp.w	ip, #9
 800e6a4:	d820      	bhi.n	800e6e8 <_strtoull_l.isra.0+0xc4>
 800e6a6:	4664      	mov	r4, ip
 800e6a8:	42a6      	cmp	r6, r4
 800e6aa:	dd2e      	ble.n	800e70a <_strtoull_l.isra.0+0xe6>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	db29      	blt.n	800e704 <_strtoull_l.isra.0+0xe0>
 800e6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6b4:	428b      	cmp	r3, r1
 800e6b6:	bf08      	it	eq
 800e6b8:	4282      	cmpeq	r2, r0
 800e6ba:	d323      	bcc.n	800e704 <_strtoull_l.isra.0+0xe0>
 800e6bc:	d101      	bne.n	800e6c2 <_strtoull_l.isra.0+0x9e>
 800e6be:	45a6      	cmp	lr, r4
 800e6c0:	db20      	blt.n	800e704 <_strtoull_l.isra.0+0xe0>
 800e6c2:	fb0a f301 	mul.w	r3, sl, r1
 800e6c6:	fb00 330b 	mla	r3, r0, fp, r3
 800e6ca:	fbaa 0100 	umull	r0, r1, sl, r0
 800e6ce:	4419      	add	r1, r3
 800e6d0:	1900      	adds	r0, r0, r4
 800e6d2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6dc:	e7de      	b.n	800e69c <_strtoull_l.isra.0+0x78>
 800e6de:	2c2b      	cmp	r4, #43	; 0x2b
 800e6e0:	bf04      	itt	eq
 800e6e2:	782c      	ldrbeq	r4, [r5, #0]
 800e6e4:	1c9d      	addeq	r5, r3, #2
 800e6e6:	e7b2      	b.n	800e64e <_strtoull_l.isra.0+0x2a>
 800e6e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e6ec:	f1bc 0f19 	cmp.w	ip, #25
 800e6f0:	d801      	bhi.n	800e6f6 <_strtoull_l.isra.0+0xd2>
 800e6f2:	3c37      	subs	r4, #55	; 0x37
 800e6f4:	e7d8      	b.n	800e6a8 <_strtoull_l.isra.0+0x84>
 800e6f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6fa:	f1bc 0f19 	cmp.w	ip, #25
 800e6fe:	d804      	bhi.n	800e70a <_strtoull_l.isra.0+0xe6>
 800e700:	3c57      	subs	r4, #87	; 0x57
 800e702:	e7d1      	b.n	800e6a8 <_strtoull_l.isra.0+0x84>
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	e7e6      	b.n	800e6d8 <_strtoull_l.isra.0+0xb4>
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	da0c      	bge.n	800e728 <_strtoull_l.isra.0+0x104>
 800e70e:	9a03      	ldr	r2, [sp, #12]
 800e710:	2322      	movs	r3, #34	; 0x22
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	f04f 31ff 	mov.w	r1, #4294967295
 800e71c:	f1b9 0f00 	cmp.w	r9, #0
 800e720:	d10a      	bne.n	800e738 <_strtoull_l.isra.0+0x114>
 800e722:	b005      	add	sp, #20
 800e724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e728:	b117      	cbz	r7, 800e730 <_strtoull_l.isra.0+0x10c>
 800e72a:	4240      	negs	r0, r0
 800e72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e730:	f1b9 0f00 	cmp.w	r9, #0
 800e734:	d0f5      	beq.n	800e722 <_strtoull_l.isra.0+0xfe>
 800e736:	b10b      	cbz	r3, 800e73c <_strtoull_l.isra.0+0x118>
 800e738:	f105 38ff 	add.w	r8, r5, #4294967295
 800e73c:	f8c9 8000 	str.w	r8, [r9]
 800e740:	e7ef      	b.n	800e722 <_strtoull_l.isra.0+0xfe>
 800e742:	2430      	movs	r4, #48	; 0x30
 800e744:	2e00      	cmp	r6, #0
 800e746:	d190      	bne.n	800e66a <_strtoull_l.isra.0+0x46>
 800e748:	2608      	movs	r6, #8
 800e74a:	e78e      	b.n	800e66a <_strtoull_l.isra.0+0x46>
 800e74c:	2c30      	cmp	r4, #48	; 0x30
 800e74e:	d084      	beq.n	800e65a <_strtoull_l.isra.0+0x36>
 800e750:	260a      	movs	r6, #10
 800e752:	e78a      	b.n	800e66a <_strtoull_l.isra.0+0x46>
 800e754:	08011d92 	.word	0x08011d92

0800e758 <_strtoull_r>:
 800e758:	f7ff bf64 	b.w	800e624 <_strtoull_l.isra.0>

0800e75c <__ssprint_r>:
 800e75c:	6893      	ldr	r3, [r2, #8]
 800e75e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e762:	4680      	mov	r8, r0
 800e764:	460c      	mov	r4, r1
 800e766:	4617      	mov	r7, r2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d061      	beq.n	800e830 <__ssprint_r+0xd4>
 800e76c:	2300      	movs	r3, #0
 800e76e:	f8d2 a000 	ldr.w	sl, [r2]
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	469b      	mov	fp, r3
 800e776:	f1bb 0f00 	cmp.w	fp, #0
 800e77a:	d02b      	beq.n	800e7d4 <__ssprint_r+0x78>
 800e77c:	68a6      	ldr	r6, [r4, #8]
 800e77e:	45b3      	cmp	fp, r6
 800e780:	d342      	bcc.n	800e808 <__ssprint_r+0xac>
 800e782:	89a2      	ldrh	r2, [r4, #12]
 800e784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e788:	d03e      	beq.n	800e808 <__ssprint_r+0xac>
 800e78a:	6825      	ldr	r5, [r4, #0]
 800e78c:	6921      	ldr	r1, [r4, #16]
 800e78e:	eba5 0901 	sub.w	r9, r5, r1
 800e792:	6965      	ldr	r5, [r4, #20]
 800e794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e79c:	f109 0001 	add.w	r0, r9, #1
 800e7a0:	106d      	asrs	r5, r5, #1
 800e7a2:	4458      	add	r0, fp
 800e7a4:	4285      	cmp	r5, r0
 800e7a6:	bf38      	it	cc
 800e7a8:	4605      	movcc	r5, r0
 800e7aa:	0553      	lsls	r3, r2, #21
 800e7ac:	d545      	bpl.n	800e83a <__ssprint_r+0xde>
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4640      	mov	r0, r8
 800e7b2:	f7f7 ffe1 	bl	8006778 <_malloc_r>
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	b9a0      	cbnz	r0, 800e7e4 <__ssprint_r+0x88>
 800e7ba:	230c      	movs	r3, #12
 800e7bc:	f8c8 3000 	str.w	r3, [r8]
 800e7c0:	89a3      	ldrh	r3, [r4, #12]
 800e7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800e7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d2:	e02f      	b.n	800e834 <__ssprint_r+0xd8>
 800e7d4:	f8da 3000 	ldr.w	r3, [sl]
 800e7d8:	f8da b004 	ldr.w	fp, [sl, #4]
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	f10a 0a08 	add.w	sl, sl, #8
 800e7e2:	e7c8      	b.n	800e776 <__ssprint_r+0x1a>
 800e7e4:	464a      	mov	r2, r9
 800e7e6:	6921      	ldr	r1, [r4, #16]
 800e7e8:	f7fd ff24 	bl	800c634 <memcpy>
 800e7ec:	89a2      	ldrh	r2, [r4, #12]
 800e7ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e7f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7f6:	81a2      	strh	r2, [r4, #12]
 800e7f8:	6126      	str	r6, [r4, #16]
 800e7fa:	6165      	str	r5, [r4, #20]
 800e7fc:	444e      	add	r6, r9
 800e7fe:	eba5 0509 	sub.w	r5, r5, r9
 800e802:	6026      	str	r6, [r4, #0]
 800e804:	60a5      	str	r5, [r4, #8]
 800e806:	465e      	mov	r6, fp
 800e808:	455e      	cmp	r6, fp
 800e80a:	bf28      	it	cs
 800e80c:	465e      	movcs	r6, fp
 800e80e:	4632      	mov	r2, r6
 800e810:	9901      	ldr	r1, [sp, #4]
 800e812:	6820      	ldr	r0, [r4, #0]
 800e814:	f7fd ff1c 	bl	800c650 <memmove>
 800e818:	68a2      	ldr	r2, [r4, #8]
 800e81a:	1b92      	subs	r2, r2, r6
 800e81c:	60a2      	str	r2, [r4, #8]
 800e81e:	6822      	ldr	r2, [r4, #0]
 800e820:	4432      	add	r2, r6
 800e822:	6022      	str	r2, [r4, #0]
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	eba2 030b 	sub.w	r3, r2, fp
 800e82a:	60bb      	str	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1d1      	bne.n	800e7d4 <__ssprint_r+0x78>
 800e830:	2000      	movs	r0, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	b003      	add	sp, #12
 800e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83a:	462a      	mov	r2, r5
 800e83c:	4640      	mov	r0, r8
 800e83e:	f7fe fb97 	bl	800cf70 <_realloc_r>
 800e842:	4606      	mov	r6, r0
 800e844:	2800      	cmp	r0, #0
 800e846:	d1d7      	bne.n	800e7f8 <__ssprint_r+0x9c>
 800e848:	6921      	ldr	r1, [r4, #16]
 800e84a:	4640      	mov	r0, r8
 800e84c:	f7f7 fd9c 	bl	8006388 <_free_r>
 800e850:	e7b3      	b.n	800e7ba <__ssprint_r+0x5e>
	...

0800e854 <_svfiprintf_r>:
 800e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	ed2d 8b02 	vpush	{d8}
 800e85c:	461c      	mov	r4, r3
 800e85e:	898b      	ldrh	r3, [r1, #12]
 800e860:	b0b9      	sub	sp, #228	; 0xe4
 800e862:	061d      	lsls	r5, r3, #24
 800e864:	4681      	mov	r9, r0
 800e866:	4688      	mov	r8, r1
 800e868:	9201      	str	r2, [sp, #4]
 800e86a:	d518      	bpl.n	800e89e <_svfiprintf_r+0x4a>
 800e86c:	690b      	ldr	r3, [r1, #16]
 800e86e:	b9b3      	cbnz	r3, 800e89e <_svfiprintf_r+0x4a>
 800e870:	2140      	movs	r1, #64	; 0x40
 800e872:	f7f7 ff81 	bl	8006778 <_malloc_r>
 800e876:	f8c8 0000 	str.w	r0, [r8]
 800e87a:	f8c8 0010 	str.w	r0, [r8, #16]
 800e87e:	b958      	cbnz	r0, 800e898 <_svfiprintf_r+0x44>
 800e880:	230c      	movs	r3, #12
 800e882:	f8c9 3000 	str.w	r3, [r9]
 800e886:	f04f 33ff 	mov.w	r3, #4294967295
 800e88a:	9302      	str	r3, [sp, #8]
 800e88c:	9802      	ldr	r0, [sp, #8]
 800e88e:	b039      	add	sp, #228	; 0xe4
 800e890:	ecbd 8b02 	vpop	{d8}
 800e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e898:	2340      	movs	r3, #64	; 0x40
 800e89a:	f8c8 3014 	str.w	r3, [r8, #20]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800e8a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e8a8:	ae0f      	add	r6, sp, #60	; 0x3c
 800e8aa:	ee08 3a10 	vmov	s16, r3
 800e8ae:	960c      	str	r6, [sp, #48]	; 0x30
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	9302      	str	r3, [sp, #8]
 800e8b4:	9b01      	ldr	r3, [sp, #4]
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8bc:	b10a      	cbz	r2, 800e8c2 <_svfiprintf_r+0x6e>
 800e8be:	2a25      	cmp	r2, #37	; 0x25
 800e8c0:	d1f9      	bne.n	800e8b6 <_svfiprintf_r+0x62>
 800e8c2:	9b01      	ldr	r3, [sp, #4]
 800e8c4:	1aef      	subs	r7, r5, r3
 800e8c6:	d00d      	beq.n	800e8e4 <_svfiprintf_r+0x90>
 800e8c8:	e9c6 3700 	strd	r3, r7, [r6]
 800e8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8ce:	443b      	add	r3, r7
 800e8d0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	2b07      	cmp	r3, #7
 800e8d8:	930d      	str	r3, [sp, #52]	; 0x34
 800e8da:	dc76      	bgt.n	800e9ca <_svfiprintf_r+0x176>
 800e8dc:	3608      	adds	r6, #8
 800e8de:	9b02      	ldr	r3, [sp, #8]
 800e8e0:	443b      	add	r3, r7
 800e8e2:	9302      	str	r3, [sp, #8]
 800e8e4:	782b      	ldrb	r3, [r5, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 83bb 	beq.w	800f062 <_svfiprintf_r+0x80e>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f04f 31ff 	mov.w	r1, #4294967295
 800e8f2:	1c6a      	adds	r2, r5, #1
 800e8f4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e8f8:	9100      	str	r1, [sp, #0]
 800e8fa:	9303      	str	r3, [sp, #12]
 800e8fc:	469a      	mov	sl, r3
 800e8fe:	4613      	mov	r3, r2
 800e900:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f1a1 0320 	sub.w	r3, r1, #32
 800e90a:	2b5a      	cmp	r3, #90	; 0x5a
 800e90c:	f200 8309 	bhi.w	800ef22 <_svfiprintf_r+0x6ce>
 800e910:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e914:	03070099 	.word	0x03070099
 800e918:	00a10307 	.word	0x00a10307
 800e91c:	03070307 	.word	0x03070307
 800e920:	00800307 	.word	0x00800307
 800e924:	03070307 	.word	0x03070307
 800e928:	00ae00a4 	.word	0x00ae00a4
 800e92c:	00ab0307 	.word	0x00ab0307
 800e930:	030700b0 	.word	0x030700b0
 800e934:	00cf00cc 	.word	0x00cf00cc
 800e938:	00cf00cf 	.word	0x00cf00cf
 800e93c:	00cf00cf 	.word	0x00cf00cf
 800e940:	00cf00cf 	.word	0x00cf00cf
 800e944:	00cf00cf 	.word	0x00cf00cf
 800e948:	03070307 	.word	0x03070307
 800e94c:	03070307 	.word	0x03070307
 800e950:	03070307 	.word	0x03070307
 800e954:	03070307 	.word	0x03070307
 800e958:	00f90307 	.word	0x00f90307
 800e95c:	03070106 	.word	0x03070106
 800e960:	03070307 	.word	0x03070307
 800e964:	03070307 	.word	0x03070307
 800e968:	03070307 	.word	0x03070307
 800e96c:	03070307 	.word	0x03070307
 800e970:	014d0307 	.word	0x014d0307
 800e974:	03070307 	.word	0x03070307
 800e978:	01920307 	.word	0x01920307
 800e97c:	026d0307 	.word	0x026d0307
 800e980:	03070307 	.word	0x03070307
 800e984:	0307028b 	.word	0x0307028b
 800e988:	03070307 	.word	0x03070307
 800e98c:	03070307 	.word	0x03070307
 800e990:	03070307 	.word	0x03070307
 800e994:	03070307 	.word	0x03070307
 800e998:	00f90307 	.word	0x00f90307
 800e99c:	03070108 	.word	0x03070108
 800e9a0:	03070307 	.word	0x03070307
 800e9a4:	010800df 	.word	0x010800df
 800e9a8:	030700f3 	.word	0x030700f3
 800e9ac:	030700ec 	.word	0x030700ec
 800e9b0:	014f0130 	.word	0x014f0130
 800e9b4:	00f30182 	.word	0x00f30182
 800e9b8:	01920307 	.word	0x01920307
 800e9bc:	026f0097 	.word	0x026f0097
 800e9c0:	03070307 	.word	0x03070307
 800e9c4:	03070065 	.word	0x03070065
 800e9c8:	0097      	.short	0x0097
 800e9ca:	aa0c      	add	r2, sp, #48	; 0x30
 800e9cc:	4641      	mov	r1, r8
 800e9ce:	4648      	mov	r0, r9
 800e9d0:	f7ff fec4 	bl	800e75c <__ssprint_r>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f040 8329 	bne.w	800f02c <_svfiprintf_r+0x7d8>
 800e9da:	ae0f      	add	r6, sp, #60	; 0x3c
 800e9dc:	e77f      	b.n	800e8de <_svfiprintf_r+0x8a>
 800e9de:	4b95      	ldr	r3, [pc, #596]	; (800ec34 <_svfiprintf_r+0x3e0>)
 800e9e0:	9305      	str	r3, [sp, #20]
 800e9e2:	f01a 0f20 	tst.w	sl, #32
 800e9e6:	f000 8222 	beq.w	800ee2e <_svfiprintf_r+0x5da>
 800e9ea:	3407      	adds	r4, #7
 800e9ec:	f024 0b07 	bic.w	fp, r4, #7
 800e9f0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800e9f4:	f01a 0f01 	tst.w	sl, #1
 800e9f8:	d009      	beq.n	800ea0e <_svfiprintf_r+0x1ba>
 800e9fa:	ea54 0305 	orrs.w	r3, r4, r5
 800e9fe:	bf1f      	itttt	ne
 800ea00:	2330      	movne	r3, #48	; 0x30
 800ea02:	f88d 302c 	strbne.w	r3, [sp, #44]	; 0x2c
 800ea06:	f88d 102d 	strbne.w	r1, [sp, #45]	; 0x2d
 800ea0a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ea0e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ea12:	e10d      	b.n	800ec30 <_svfiprintf_r+0x3dc>
 800ea14:	4648      	mov	r0, r9
 800ea16:	f7fd fd71 	bl	800c4fc <_localeconv_r>
 800ea1a:	6843      	ldr	r3, [r0, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	ee08 3a10 	vmov	s16, r3
 800ea22:	f7f1 fbdf 	bl	80001e4 <strlen>
 800ea26:	9007      	str	r0, [sp, #28]
 800ea28:	4648      	mov	r0, r9
 800ea2a:	f7fd fd67 	bl	800c4fc <_localeconv_r>
 800ea2e:	6883      	ldr	r3, [r0, #8]
 800ea30:	9306      	str	r3, [sp, #24]
 800ea32:	9b07      	ldr	r3, [sp, #28]
 800ea34:	b12b      	cbz	r3, 800ea42 <_svfiprintf_r+0x1ee>
 800ea36:	9b06      	ldr	r3, [sp, #24]
 800ea38:	b11b      	cbz	r3, 800ea42 <_svfiprintf_r+0x1ee>
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b10b      	cbz	r3, 800ea42 <_svfiprintf_r+0x1ee>
 800ea3e:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800ea42:	9a01      	ldr	r2, [sp, #4]
 800ea44:	e75b      	b.n	800e8fe <_svfiprintf_r+0xaa>
 800ea46:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1f9      	bne.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea4e:	2320      	movs	r3, #32
 800ea50:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ea54:	e7f5      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea56:	f04a 0a01 	orr.w	sl, sl, #1
 800ea5a:	e7f2      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea5c:	f854 3b04 	ldr.w	r3, [r4], #4
 800ea60:	9303      	str	r3, [sp, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	daed      	bge.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea66:	425b      	negs	r3, r3
 800ea68:	9303      	str	r3, [sp, #12]
 800ea6a:	f04a 0a04 	orr.w	sl, sl, #4
 800ea6e:	e7e8      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea70:	232b      	movs	r3, #43	; 0x2b
 800ea72:	e7ed      	b.n	800ea50 <_svfiprintf_r+0x1fc>
 800ea74:	9a01      	ldr	r2, [sp, #4]
 800ea76:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ea7a:	292a      	cmp	r1, #42	; 0x2a
 800ea7c:	d113      	bne.n	800eaa6 <_svfiprintf_r+0x252>
 800ea7e:	f854 0b04 	ldr.w	r0, [r4], #4
 800ea82:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800ea86:	e9cd 3200 	strd	r3, r2, [sp]
 800ea8a:	e7da      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800ea8c:	9900      	ldr	r1, [sp, #0]
 800ea8e:	200a      	movs	r0, #10
 800ea90:	fb00 3301 	mla	r3, r0, r1, r3
 800ea94:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ea9e:	2b09      	cmp	r3, #9
 800eaa0:	d9f4      	bls.n	800ea8c <_svfiprintf_r+0x238>
 800eaa2:	9201      	str	r2, [sp, #4]
 800eaa4:	e72f      	b.n	800e906 <_svfiprintf_r+0xb2>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	e7f6      	b.n	800ea9a <_svfiprintf_r+0x246>
 800eaac:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800eab0:	e7c7      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800eab2:	2300      	movs	r3, #0
 800eab4:	9a01      	ldr	r2, [sp, #4]
 800eab6:	9303      	str	r3, [sp, #12]
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	3930      	subs	r1, #48	; 0x30
 800eabc:	200a      	movs	r0, #10
 800eabe:	fb00 1303 	mla	r3, r0, r3, r1
 800eac2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eac6:	9303      	str	r3, [sp, #12]
 800eac8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800eacc:	2b09      	cmp	r3, #9
 800eace:	d9f3      	bls.n	800eab8 <_svfiprintf_r+0x264>
 800ead0:	e7e7      	b.n	800eaa2 <_svfiprintf_r+0x24e>
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b68      	cmp	r3, #104	; 0x68
 800ead8:	bf01      	itttt	eq
 800eada:	9b01      	ldreq	r3, [sp, #4]
 800eadc:	3301      	addeq	r3, #1
 800eade:	9301      	streq	r3, [sp, #4]
 800eae0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800eae4:	bf18      	it	ne
 800eae6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800eaea:	e7aa      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800eaec:	9b01      	ldr	r3, [sp, #4]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b6c      	cmp	r3, #108	; 0x6c
 800eaf2:	d105      	bne.n	800eb00 <_svfiprintf_r+0x2ac>
 800eaf4:	9b01      	ldr	r3, [sp, #4]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	f04a 0a20 	orr.w	sl, sl, #32
 800eafe:	e7a0      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800eb00:	f04a 0a10 	orr.w	sl, sl, #16
 800eb04:	e79d      	b.n	800ea42 <_svfiprintf_r+0x1ee>
 800eb06:	46a3      	mov	fp, r4
 800eb08:	2100      	movs	r1, #0
 800eb0a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800eb0e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800eb12:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800eb16:	2301      	movs	r3, #1
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	af1f      	add	r7, sp, #124	; 0x7c
 800eb1e:	e09f      	b.n	800ec60 <_svfiprintf_r+0x40c>
 800eb20:	f04a 0a10 	orr.w	sl, sl, #16
 800eb24:	f01a 0f20 	tst.w	sl, #32
 800eb28:	d011      	beq.n	800eb4e <_svfiprintf_r+0x2fa>
 800eb2a:	3407      	adds	r4, #7
 800eb2c:	f024 0b07 	bic.w	fp, r4, #7
 800eb30:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800eb34:	2c00      	cmp	r4, #0
 800eb36:	f175 0300 	sbcs.w	r3, r5, #0
 800eb3a:	da06      	bge.n	800eb4a <_svfiprintf_r+0x2f6>
 800eb3c:	4264      	negs	r4, r4
 800eb3e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800eb42:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800eb46:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e03f      	b.n	800ebce <_svfiprintf_r+0x37a>
 800eb4e:	f01a 0f10 	tst.w	sl, #16
 800eb52:	f104 0b04 	add.w	fp, r4, #4
 800eb56:	d002      	beq.n	800eb5e <_svfiprintf_r+0x30a>
 800eb58:	6824      	ldr	r4, [r4, #0]
 800eb5a:	17e5      	asrs	r5, r4, #31
 800eb5c:	e7ea      	b.n	800eb34 <_svfiprintf_r+0x2e0>
 800eb5e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eb62:	6824      	ldr	r4, [r4, #0]
 800eb64:	d001      	beq.n	800eb6a <_svfiprintf_r+0x316>
 800eb66:	b224      	sxth	r4, r4
 800eb68:	e7f7      	b.n	800eb5a <_svfiprintf_r+0x306>
 800eb6a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eb6e:	bf18      	it	ne
 800eb70:	b264      	sxtbne	r4, r4
 800eb72:	e7f2      	b.n	800eb5a <_svfiprintf_r+0x306>
 800eb74:	f01a 0f20 	tst.w	sl, #32
 800eb78:	f854 3b04 	ldr.w	r3, [r4], #4
 800eb7c:	d005      	beq.n	800eb8a <_svfiprintf_r+0x336>
 800eb7e:	9a02      	ldr	r2, [sp, #8]
 800eb80:	4610      	mov	r0, r2
 800eb82:	17d1      	asrs	r1, r2, #31
 800eb84:	e9c3 0100 	strd	r0, r1, [r3]
 800eb88:	e694      	b.n	800e8b4 <_svfiprintf_r+0x60>
 800eb8a:	f01a 0f10 	tst.w	sl, #16
 800eb8e:	d002      	beq.n	800eb96 <_svfiprintf_r+0x342>
 800eb90:	9a02      	ldr	r2, [sp, #8]
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	e68e      	b.n	800e8b4 <_svfiprintf_r+0x60>
 800eb96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eb9a:	d002      	beq.n	800eba2 <_svfiprintf_r+0x34e>
 800eb9c:	9a02      	ldr	r2, [sp, #8]
 800eb9e:	801a      	strh	r2, [r3, #0]
 800eba0:	e688      	b.n	800e8b4 <_svfiprintf_r+0x60>
 800eba2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eba6:	d0f3      	beq.n	800eb90 <_svfiprintf_r+0x33c>
 800eba8:	9a02      	ldr	r2, [sp, #8]
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	e682      	b.n	800e8b4 <_svfiprintf_r+0x60>
 800ebae:	f04a 0a10 	orr.w	sl, sl, #16
 800ebb2:	f01a 0f20 	tst.w	sl, #32
 800ebb6:	d01d      	beq.n	800ebf4 <_svfiprintf_r+0x3a0>
 800ebb8:	3407      	adds	r4, #7
 800ebba:	f024 0b07 	bic.w	fp, r4, #7
 800ebbe:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800ebc2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800ebce:	9a00      	ldr	r2, [sp, #0]
 800ebd0:	3201      	adds	r2, #1
 800ebd2:	f000 824f 	beq.w	800f074 <_svfiprintf_r+0x820>
 800ebd6:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ebda:	9204      	str	r2, [sp, #16]
 800ebdc:	ea54 0205 	orrs.w	r2, r4, r5
 800ebe0:	f040 824e 	bne.w	800f080 <_svfiprintf_r+0x82c>
 800ebe4:	9a00      	ldr	r2, [sp, #0]
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	f000 8191 	beq.w	800ef0e <_svfiprintf_r+0x6ba>
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	f040 824a 	bne.w	800f086 <_svfiprintf_r+0x832>
 800ebf2:	e132      	b.n	800ee5a <_svfiprintf_r+0x606>
 800ebf4:	f01a 0f10 	tst.w	sl, #16
 800ebf8:	f104 0b04 	add.w	fp, r4, #4
 800ebfc:	d001      	beq.n	800ec02 <_svfiprintf_r+0x3ae>
 800ebfe:	6824      	ldr	r4, [r4, #0]
 800ec00:	e003      	b.n	800ec0a <_svfiprintf_r+0x3b6>
 800ec02:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ec06:	d002      	beq.n	800ec0e <_svfiprintf_r+0x3ba>
 800ec08:	8824      	ldrh	r4, [r4, #0]
 800ec0a:	2500      	movs	r5, #0
 800ec0c:	e7d9      	b.n	800ebc2 <_svfiprintf_r+0x36e>
 800ec0e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ec12:	d0f4      	beq.n	800ebfe <_svfiprintf_r+0x3aa>
 800ec14:	7824      	ldrb	r4, [r4, #0]
 800ec16:	e7f8      	b.n	800ec0a <_svfiprintf_r+0x3b6>
 800ec18:	46a3      	mov	fp, r4
 800ec1a:	f647 0330 	movw	r3, #30768	; 0x7830
 800ec1e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800ec22:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ec26:	4b03      	ldr	r3, [pc, #12]	; (800ec34 <_svfiprintf_r+0x3e0>)
 800ec28:	9305      	str	r3, [sp, #20]
 800ec2a:	2500      	movs	r5, #0
 800ec2c:	f04a 0a02 	orr.w	sl, sl, #2
 800ec30:	2302      	movs	r3, #2
 800ec32:	e7c9      	b.n	800ebc8 <_svfiprintf_r+0x374>
 800ec34:	08011c70 	.word	0x08011c70
 800ec38:	9b00      	ldr	r3, [sp, #0]
 800ec3a:	46a3      	mov	fp, r4
 800ec3c:	2500      	movs	r5, #0
 800ec3e:	1c59      	adds	r1, r3, #1
 800ec40:	f85b 7b04 	ldr.w	r7, [fp], #4
 800ec44:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ec48:	f000 80cc 	beq.w	800ede4 <_svfiprintf_r+0x590>
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4638      	mov	r0, r7
 800ec52:	f7f1 fad5 	bl	8000200 <memchr>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f000 816d 	beq.w	800ef36 <_svfiprintf_r+0x6e2>
 800ec5c:	1bc3      	subs	r3, r0, r7
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	9b00      	ldr	r3, [sp, #0]
 800ec62:	42ab      	cmp	r3, r5
 800ec64:	bfb8      	it	lt
 800ec66:	462b      	movlt	r3, r5
 800ec68:	9304      	str	r3, [sp, #16]
 800ec6a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ec6e:	b113      	cbz	r3, 800ec76 <_svfiprintf_r+0x422>
 800ec70:	9b04      	ldr	r3, [sp, #16]
 800ec72:	3301      	adds	r3, #1
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	f01a 0302 	ands.w	r3, sl, #2
 800ec7a:	9308      	str	r3, [sp, #32]
 800ec7c:	bf1e      	ittt	ne
 800ec7e:	9b04      	ldrne	r3, [sp, #16]
 800ec80:	3302      	addne	r3, #2
 800ec82:	9304      	strne	r3, [sp, #16]
 800ec84:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800ec88:	9309      	str	r3, [sp, #36]	; 0x24
 800ec8a:	d11f      	bne.n	800eccc <_svfiprintf_r+0x478>
 800ec8c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ec90:	1a9c      	subs	r4, r3, r2
 800ec92:	2c00      	cmp	r4, #0
 800ec94:	dd1a      	ble.n	800eccc <_svfiprintf_r+0x478>
 800ec96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ec9a:	48b6      	ldr	r0, [pc, #728]	; (800ef74 <_svfiprintf_r+0x720>)
 800ec9c:	6030      	str	r0, [r6, #0]
 800ec9e:	2c10      	cmp	r4, #16
 800eca0:	f103 0301 	add.w	r3, r3, #1
 800eca4:	f106 0108 	add.w	r1, r6, #8
 800eca8:	f300 8147 	bgt.w	800ef3a <_svfiprintf_r+0x6e6>
 800ecac:	6074      	str	r4, [r6, #4]
 800ecae:	2b07      	cmp	r3, #7
 800ecb0:	4414      	add	r4, r2
 800ecb2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ecb6:	f340 8152 	ble.w	800ef5e <_svfiprintf_r+0x70a>
 800ecba:	aa0c      	add	r2, sp, #48	; 0x30
 800ecbc:	4641      	mov	r1, r8
 800ecbe:	4648      	mov	r0, r9
 800ecc0:	f7ff fd4c 	bl	800e75c <__ssprint_r>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f040 81b1 	bne.w	800f02c <_svfiprintf_r+0x7d8>
 800ecca:	ae0f      	add	r6, sp, #60	; 0x3c
 800eccc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ecd0:	b173      	cbz	r3, 800ecf0 <_svfiprintf_r+0x49c>
 800ecd2:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800ecd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecd8:	6032      	str	r2, [r6, #0]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	6072      	str	r2, [r6, #4]
 800ecde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ece0:	3301      	adds	r3, #1
 800ece2:	3201      	adds	r2, #1
 800ece4:	2b07      	cmp	r3, #7
 800ece6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ecea:	f300 813a 	bgt.w	800ef62 <_svfiprintf_r+0x70e>
 800ecee:	3608      	adds	r6, #8
 800ecf0:	9b08      	ldr	r3, [sp, #32]
 800ecf2:	b16b      	cbz	r3, 800ed10 <_svfiprintf_r+0x4bc>
 800ecf4:	aa0b      	add	r2, sp, #44	; 0x2c
 800ecf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecf8:	6032      	str	r2, [r6, #0]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	6072      	str	r2, [r6, #4]
 800ecfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed00:	3301      	adds	r3, #1
 800ed02:	3202      	adds	r2, #2
 800ed04:	2b07      	cmp	r3, #7
 800ed06:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ed0a:	f300 8139 	bgt.w	800ef80 <_svfiprintf_r+0x72c>
 800ed0e:	3608      	adds	r6, #8
 800ed10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed12:	2b80      	cmp	r3, #128	; 0x80
 800ed14:	d11f      	bne.n	800ed56 <_svfiprintf_r+0x502>
 800ed16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ed1a:	1a9c      	subs	r4, r3, r2
 800ed1c:	2c00      	cmp	r4, #0
 800ed1e:	dd1a      	ble.n	800ed56 <_svfiprintf_r+0x502>
 800ed20:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ed24:	4894      	ldr	r0, [pc, #592]	; (800ef78 <_svfiprintf_r+0x724>)
 800ed26:	6030      	str	r0, [r6, #0]
 800ed28:	2c10      	cmp	r4, #16
 800ed2a:	f103 0301 	add.w	r3, r3, #1
 800ed2e:	f106 0108 	add.w	r1, r6, #8
 800ed32:	f300 812e 	bgt.w	800ef92 <_svfiprintf_r+0x73e>
 800ed36:	6074      	str	r4, [r6, #4]
 800ed38:	2b07      	cmp	r3, #7
 800ed3a:	4414      	add	r4, r2
 800ed3c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ed40:	f340 8139 	ble.w	800efb6 <_svfiprintf_r+0x762>
 800ed44:	aa0c      	add	r2, sp, #48	; 0x30
 800ed46:	4641      	mov	r1, r8
 800ed48:	4648      	mov	r0, r9
 800ed4a:	f7ff fd07 	bl	800e75c <__ssprint_r>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	f040 816c 	bne.w	800f02c <_svfiprintf_r+0x7d8>
 800ed54:	ae0f      	add	r6, sp, #60	; 0x3c
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	1aec      	subs	r4, r5, r3
 800ed5a:	2c00      	cmp	r4, #0
 800ed5c:	dd1a      	ble.n	800ed94 <_svfiprintf_r+0x540>
 800ed5e:	4d86      	ldr	r5, [pc, #536]	; (800ef78 <_svfiprintf_r+0x724>)
 800ed60:	6035      	str	r5, [r6, #0]
 800ed62:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800ed66:	2c10      	cmp	r4, #16
 800ed68:	f103 0301 	add.w	r3, r3, #1
 800ed6c:	f106 0208 	add.w	r2, r6, #8
 800ed70:	f300 8123 	bgt.w	800efba <_svfiprintf_r+0x766>
 800ed74:	6074      	str	r4, [r6, #4]
 800ed76:	2b07      	cmp	r3, #7
 800ed78:	440c      	add	r4, r1
 800ed7a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ed7e:	f340 812d 	ble.w	800efdc <_svfiprintf_r+0x788>
 800ed82:	aa0c      	add	r2, sp, #48	; 0x30
 800ed84:	4641      	mov	r1, r8
 800ed86:	4648      	mov	r0, r9
 800ed88:	f7ff fce8 	bl	800e75c <__ssprint_r>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	f040 814d 	bne.w	800f02c <_svfiprintf_r+0x7d8>
 800ed92:	ae0f      	add	r6, sp, #60	; 0x3c
 800ed94:	9b00      	ldr	r3, [sp, #0]
 800ed96:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ed98:	6073      	str	r3, [r6, #4]
 800ed9a:	4418      	add	r0, r3
 800ed9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed9e:	6037      	str	r7, [r6, #0]
 800eda0:	3301      	adds	r3, #1
 800eda2:	2b07      	cmp	r3, #7
 800eda4:	900e      	str	r0, [sp, #56]	; 0x38
 800eda6:	930d      	str	r3, [sp, #52]	; 0x34
 800eda8:	f300 811a 	bgt.w	800efe0 <_svfiprintf_r+0x78c>
 800edac:	3608      	adds	r6, #8
 800edae:	f01a 0f04 	tst.w	sl, #4
 800edb2:	f040 811d 	bne.w	800eff0 <_svfiprintf_r+0x79c>
 800edb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800edba:	9904      	ldr	r1, [sp, #16]
 800edbc:	428a      	cmp	r2, r1
 800edbe:	bfac      	ite	ge
 800edc0:	189b      	addge	r3, r3, r2
 800edc2:	185b      	addlt	r3, r3, r1
 800edc4:	9302      	str	r3, [sp, #8]
 800edc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edc8:	b13b      	cbz	r3, 800edda <_svfiprintf_r+0x586>
 800edca:	aa0c      	add	r2, sp, #48	; 0x30
 800edcc:	4641      	mov	r1, r8
 800edce:	4648      	mov	r0, r9
 800edd0:	f7ff fcc4 	bl	800e75c <__ssprint_r>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	f040 8129 	bne.w	800f02c <_svfiprintf_r+0x7d8>
 800edda:	2300      	movs	r3, #0
 800eddc:	930d      	str	r3, [sp, #52]	; 0x34
 800edde:	465c      	mov	r4, fp
 800ede0:	ae0f      	add	r6, sp, #60	; 0x3c
 800ede2:	e567      	b.n	800e8b4 <_svfiprintf_r+0x60>
 800ede4:	4638      	mov	r0, r7
 800ede6:	f7f1 f9fd 	bl	80001e4 <strlen>
 800edea:	9000      	str	r0, [sp, #0]
 800edec:	e738      	b.n	800ec60 <_svfiprintf_r+0x40c>
 800edee:	f04a 0a10 	orr.w	sl, sl, #16
 800edf2:	f01a 0f20 	tst.w	sl, #32
 800edf6:	d006      	beq.n	800ee06 <_svfiprintf_r+0x5b2>
 800edf8:	3407      	adds	r4, #7
 800edfa:	f024 0b07 	bic.w	fp, r4, #7
 800edfe:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800ee02:	2301      	movs	r3, #1
 800ee04:	e6e0      	b.n	800ebc8 <_svfiprintf_r+0x374>
 800ee06:	f01a 0f10 	tst.w	sl, #16
 800ee0a:	f104 0b04 	add.w	fp, r4, #4
 800ee0e:	d001      	beq.n	800ee14 <_svfiprintf_r+0x5c0>
 800ee10:	6824      	ldr	r4, [r4, #0]
 800ee12:	e003      	b.n	800ee1c <_svfiprintf_r+0x5c8>
 800ee14:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ee18:	d002      	beq.n	800ee20 <_svfiprintf_r+0x5cc>
 800ee1a:	8824      	ldrh	r4, [r4, #0]
 800ee1c:	2500      	movs	r5, #0
 800ee1e:	e7f0      	b.n	800ee02 <_svfiprintf_r+0x5ae>
 800ee20:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ee24:	d0f4      	beq.n	800ee10 <_svfiprintf_r+0x5bc>
 800ee26:	7824      	ldrb	r4, [r4, #0]
 800ee28:	e7f8      	b.n	800ee1c <_svfiprintf_r+0x5c8>
 800ee2a:	4b54      	ldr	r3, [pc, #336]	; (800ef7c <_svfiprintf_r+0x728>)
 800ee2c:	e5d8      	b.n	800e9e0 <_svfiprintf_r+0x18c>
 800ee2e:	f01a 0f10 	tst.w	sl, #16
 800ee32:	f104 0b04 	add.w	fp, r4, #4
 800ee36:	d001      	beq.n	800ee3c <_svfiprintf_r+0x5e8>
 800ee38:	6824      	ldr	r4, [r4, #0]
 800ee3a:	e003      	b.n	800ee44 <_svfiprintf_r+0x5f0>
 800ee3c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ee40:	d002      	beq.n	800ee48 <_svfiprintf_r+0x5f4>
 800ee42:	8824      	ldrh	r4, [r4, #0]
 800ee44:	2500      	movs	r5, #0
 800ee46:	e5d5      	b.n	800e9f4 <_svfiprintf_r+0x1a0>
 800ee48:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ee4c:	d0f4      	beq.n	800ee38 <_svfiprintf_r+0x5e4>
 800ee4e:	7824      	ldrb	r4, [r4, #0]
 800ee50:	e7f8      	b.n	800ee44 <_svfiprintf_r+0x5f0>
 800ee52:	2d00      	cmp	r5, #0
 800ee54:	bf08      	it	eq
 800ee56:	2c0a      	cmpeq	r4, #10
 800ee58:	d205      	bcs.n	800ee66 <_svfiprintf_r+0x612>
 800ee5a:	3430      	adds	r4, #48	; 0x30
 800ee5c:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800ee60:	f10d 07df 	add.w	r7, sp, #223	; 0xdf
 800ee64:	e12b      	b.n	800f0be <_svfiprintf_r+0x86a>
 800ee66:	ab38      	add	r3, sp, #224	; 0xe0
 800ee68:	9308      	str	r3, [sp, #32]
 800ee6a:	9b04      	ldr	r3, [sp, #16]
 800ee6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee70:	f04f 0a00 	mov.w	sl, #0
 800ee74:	9309      	str	r3, [sp, #36]	; 0x24
 800ee76:	9b08      	ldr	r3, [sp, #32]
 800ee78:	220a      	movs	r2, #10
 800ee7a:	1e5f      	subs	r7, r3, #1
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	2300      	movs	r3, #0
 800ee80:	4629      	mov	r1, r5
 800ee82:	f7f1 ff61 	bl	8000d48 <__aeabi_uldivmod>
 800ee86:	9b08      	ldr	r3, [sp, #32]
 800ee88:	3230      	adds	r2, #48	; 0x30
 800ee8a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ee8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee90:	f10a 0a01 	add.w	sl, sl, #1
 800ee94:	b1d3      	cbz	r3, 800eecc <_svfiprintf_r+0x678>
 800ee96:	9b06      	ldr	r3, [sp, #24]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	4553      	cmp	r3, sl
 800ee9c:	d116      	bne.n	800eecc <_svfiprintf_r+0x678>
 800ee9e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800eea2:	d013      	beq.n	800eecc <_svfiprintf_r+0x678>
 800eea4:	2d00      	cmp	r5, #0
 800eea6:	bf08      	it	eq
 800eea8:	2c0a      	cmpeq	r4, #10
 800eeaa:	d30f      	bcc.n	800eecc <_svfiprintf_r+0x678>
 800eeac:	9b07      	ldr	r3, [sp, #28]
 800eeae:	1aff      	subs	r7, r7, r3
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	ee18 1a10 	vmov	r1, s16
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	f7fe fbcf 	bl	800d65a <strncpy>
 800eebc:	9b06      	ldr	r3, [sp, #24]
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	b19b      	cbz	r3, 800eeea <_svfiprintf_r+0x696>
 800eec2:	9b06      	ldr	r3, [sp, #24]
 800eec4:	3301      	adds	r3, #1
 800eec6:	9306      	str	r3, [sp, #24]
 800eec8:	f04f 0a00 	mov.w	sl, #0
 800eecc:	220a      	movs	r2, #10
 800eece:	2300      	movs	r3, #0
 800eed0:	4620      	mov	r0, r4
 800eed2:	4629      	mov	r1, r5
 800eed4:	f7f1 ff38 	bl	8000d48 <__aeabi_uldivmod>
 800eed8:	2d00      	cmp	r5, #0
 800eeda:	bf08      	it	eq
 800eedc:	2c0a      	cmpeq	r4, #10
 800eede:	f0c0 80ee 	bcc.w	800f0be <_svfiprintf_r+0x86a>
 800eee2:	4604      	mov	r4, r0
 800eee4:	460d      	mov	r5, r1
 800eee6:	9708      	str	r7, [sp, #32]
 800eee8:	e7c5      	b.n	800ee76 <_svfiprintf_r+0x622>
 800eeea:	469a      	mov	sl, r3
 800eeec:	e7ee      	b.n	800eecc <_svfiprintf_r+0x678>
 800eeee:	9a05      	ldr	r2, [sp, #20]
 800eef0:	f004 030f 	and.w	r3, r4, #15
 800eef4:	5cd3      	ldrb	r3, [r2, r3]
 800eef6:	f807 3d01 	strb.w	r3, [r7, #-1]!
 800eefa:	0923      	lsrs	r3, r4, #4
 800eefc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800ef00:	092a      	lsrs	r2, r5, #4
 800ef02:	461c      	mov	r4, r3
 800ef04:	4615      	mov	r5, r2
 800ef06:	ea54 0305 	orrs.w	r3, r4, r5
 800ef0a:	d1f0      	bne.n	800eeee <_svfiprintf_r+0x69a>
 800ef0c:	e0d7      	b.n	800f0be <_svfiprintf_r+0x86a>
 800ef0e:	b933      	cbnz	r3, 800ef1e <_svfiprintf_r+0x6ca>
 800ef10:	f01a 0f01 	tst.w	sl, #1
 800ef14:	d003      	beq.n	800ef1e <_svfiprintf_r+0x6ca>
 800ef16:	2330      	movs	r3, #48	; 0x30
 800ef18:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800ef1c:	e7a0      	b.n	800ee60 <_svfiprintf_r+0x60c>
 800ef1e:	af38      	add	r7, sp, #224	; 0xe0
 800ef20:	e0cd      	b.n	800f0be <_svfiprintf_r+0x86a>
 800ef22:	2900      	cmp	r1, #0
 800ef24:	f000 809d 	beq.w	800f062 <_svfiprintf_r+0x80e>
 800ef28:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ef32:	46a3      	mov	fp, r4
 800ef34:	e5ef      	b.n	800eb16 <_svfiprintf_r+0x2c2>
 800ef36:	4605      	mov	r5, r0
 800ef38:	e692      	b.n	800ec60 <_svfiprintf_r+0x40c>
 800ef3a:	2010      	movs	r0, #16
 800ef3c:	4402      	add	r2, r0
 800ef3e:	2b07      	cmp	r3, #7
 800ef40:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ef44:	6070      	str	r0, [r6, #4]
 800ef46:	dd07      	ble.n	800ef58 <_svfiprintf_r+0x704>
 800ef48:	aa0c      	add	r2, sp, #48	; 0x30
 800ef4a:	4641      	mov	r1, r8
 800ef4c:	4648      	mov	r0, r9
 800ef4e:	f7ff fc05 	bl	800e75c <__ssprint_r>
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d16a      	bne.n	800f02c <_svfiprintf_r+0x7d8>
 800ef56:	a90f      	add	r1, sp, #60	; 0x3c
 800ef58:	3c10      	subs	r4, #16
 800ef5a:	460e      	mov	r6, r1
 800ef5c:	e69b      	b.n	800ec96 <_svfiprintf_r+0x442>
 800ef5e:	460e      	mov	r6, r1
 800ef60:	e6b4      	b.n	800eccc <_svfiprintf_r+0x478>
 800ef62:	aa0c      	add	r2, sp, #48	; 0x30
 800ef64:	4641      	mov	r1, r8
 800ef66:	4648      	mov	r0, r9
 800ef68:	f7ff fbf8 	bl	800e75c <__ssprint_r>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d15d      	bne.n	800f02c <_svfiprintf_r+0x7d8>
 800ef70:	ae0f      	add	r6, sp, #60	; 0x3c
 800ef72:	e6bd      	b.n	800ecf0 <_svfiprintf_r+0x49c>
 800ef74:	080120d0 	.word	0x080120d0
 800ef78:	080120e0 	.word	0x080120e0
 800ef7c:	08011c81 	.word	0x08011c81
 800ef80:	aa0c      	add	r2, sp, #48	; 0x30
 800ef82:	4641      	mov	r1, r8
 800ef84:	4648      	mov	r0, r9
 800ef86:	f7ff fbe9 	bl	800e75c <__ssprint_r>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d14e      	bne.n	800f02c <_svfiprintf_r+0x7d8>
 800ef8e:	ae0f      	add	r6, sp, #60	; 0x3c
 800ef90:	e6be      	b.n	800ed10 <_svfiprintf_r+0x4bc>
 800ef92:	2010      	movs	r0, #16
 800ef94:	4402      	add	r2, r0
 800ef96:	2b07      	cmp	r3, #7
 800ef98:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ef9c:	6070      	str	r0, [r6, #4]
 800ef9e:	dd07      	ble.n	800efb0 <_svfiprintf_r+0x75c>
 800efa0:	aa0c      	add	r2, sp, #48	; 0x30
 800efa2:	4641      	mov	r1, r8
 800efa4:	4648      	mov	r0, r9
 800efa6:	f7ff fbd9 	bl	800e75c <__ssprint_r>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d13e      	bne.n	800f02c <_svfiprintf_r+0x7d8>
 800efae:	a90f      	add	r1, sp, #60	; 0x3c
 800efb0:	3c10      	subs	r4, #16
 800efb2:	460e      	mov	r6, r1
 800efb4:	e6b4      	b.n	800ed20 <_svfiprintf_r+0x4cc>
 800efb6:	460e      	mov	r6, r1
 800efb8:	e6cd      	b.n	800ed56 <_svfiprintf_r+0x502>
 800efba:	2010      	movs	r0, #16
 800efbc:	4401      	add	r1, r0
 800efbe:	2b07      	cmp	r3, #7
 800efc0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800efc4:	6070      	str	r0, [r6, #4]
 800efc6:	dd06      	ble.n	800efd6 <_svfiprintf_r+0x782>
 800efc8:	aa0c      	add	r2, sp, #48	; 0x30
 800efca:	4641      	mov	r1, r8
 800efcc:	4648      	mov	r0, r9
 800efce:	f7ff fbc5 	bl	800e75c <__ssprint_r>
 800efd2:	bb58      	cbnz	r0, 800f02c <_svfiprintf_r+0x7d8>
 800efd4:	aa0f      	add	r2, sp, #60	; 0x3c
 800efd6:	3c10      	subs	r4, #16
 800efd8:	4616      	mov	r6, r2
 800efda:	e6c1      	b.n	800ed60 <_svfiprintf_r+0x50c>
 800efdc:	4616      	mov	r6, r2
 800efde:	e6d9      	b.n	800ed94 <_svfiprintf_r+0x540>
 800efe0:	aa0c      	add	r2, sp, #48	; 0x30
 800efe2:	4641      	mov	r1, r8
 800efe4:	4648      	mov	r0, r9
 800efe6:	f7ff fbb9 	bl	800e75c <__ssprint_r>
 800efea:	b9f8      	cbnz	r0, 800f02c <_svfiprintf_r+0x7d8>
 800efec:	ae0f      	add	r6, sp, #60	; 0x3c
 800efee:	e6de      	b.n	800edae <_svfiprintf_r+0x55a>
 800eff0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eff4:	1a9c      	subs	r4, r3, r2
 800eff6:	2c00      	cmp	r4, #0
 800eff8:	f77f aedd 	ble.w	800edb6 <_svfiprintf_r+0x562>
 800effc:	4d33      	ldr	r5, [pc, #204]	; (800f0cc <_svfiprintf_r+0x878>)
 800effe:	2710      	movs	r7, #16
 800f000:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f004:	2c10      	cmp	r4, #16
 800f006:	f103 0301 	add.w	r3, r3, #1
 800f00a:	6035      	str	r5, [r6, #0]
 800f00c:	dc17      	bgt.n	800f03e <_svfiprintf_r+0x7ea>
 800f00e:	6074      	str	r4, [r6, #4]
 800f010:	2b07      	cmp	r3, #7
 800f012:	4414      	add	r4, r2
 800f014:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f018:	f77f aecd 	ble.w	800edb6 <_svfiprintf_r+0x562>
 800f01c:	aa0c      	add	r2, sp, #48	; 0x30
 800f01e:	4641      	mov	r1, r8
 800f020:	4648      	mov	r0, r9
 800f022:	f7ff fb9b 	bl	800e75c <__ssprint_r>
 800f026:	2800      	cmp	r0, #0
 800f028:	f43f aec5 	beq.w	800edb6 <_svfiprintf_r+0x562>
 800f02c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800f030:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f034:	9b02      	ldr	r3, [sp, #8]
 800f036:	bf18      	it	ne
 800f038:	f04f 33ff 	movne.w	r3, #4294967295
 800f03c:	e425      	b.n	800e88a <_svfiprintf_r+0x36>
 800f03e:	3210      	adds	r2, #16
 800f040:	2b07      	cmp	r3, #7
 800f042:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f046:	6077      	str	r7, [r6, #4]
 800f048:	dc02      	bgt.n	800f050 <_svfiprintf_r+0x7fc>
 800f04a:	3608      	adds	r6, #8
 800f04c:	3c10      	subs	r4, #16
 800f04e:	e7d7      	b.n	800f000 <_svfiprintf_r+0x7ac>
 800f050:	aa0c      	add	r2, sp, #48	; 0x30
 800f052:	4641      	mov	r1, r8
 800f054:	4648      	mov	r0, r9
 800f056:	f7ff fb81 	bl	800e75c <__ssprint_r>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d1e6      	bne.n	800f02c <_svfiprintf_r+0x7d8>
 800f05e:	ae0f      	add	r6, sp, #60	; 0x3c
 800f060:	e7f4      	b.n	800f04c <_svfiprintf_r+0x7f8>
 800f062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f064:	2b00      	cmp	r3, #0
 800f066:	d0e1      	beq.n	800f02c <_svfiprintf_r+0x7d8>
 800f068:	aa0c      	add	r2, sp, #48	; 0x30
 800f06a:	4641      	mov	r1, r8
 800f06c:	4648      	mov	r0, r9
 800f06e:	f7ff fb75 	bl	800e75c <__ssprint_r>
 800f072:	e7db      	b.n	800f02c <_svfiprintf_r+0x7d8>
 800f074:	ea54 0205 	orrs.w	r2, r4, r5
 800f078:	f8cd a010 	str.w	sl, [sp, #16]
 800f07c:	f43f adb6 	beq.w	800ebec <_svfiprintf_r+0x398>
 800f080:	2b01      	cmp	r3, #1
 800f082:	f43f aee6 	beq.w	800ee52 <_svfiprintf_r+0x5fe>
 800f086:	2b02      	cmp	r3, #2
 800f088:	af38      	add	r7, sp, #224	; 0xe0
 800f08a:	f43f af30 	beq.w	800eeee <_svfiprintf_r+0x69a>
 800f08e:	08e2      	lsrs	r2, r4, #3
 800f090:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800f094:	08e8      	lsrs	r0, r5, #3
 800f096:	f004 0307 	and.w	r3, r4, #7
 800f09a:	4605      	mov	r5, r0
 800f09c:	4614      	mov	r4, r2
 800f09e:	3330      	adds	r3, #48	; 0x30
 800f0a0:	ea54 0205 	orrs.w	r2, r4, r5
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	f807 3d01 	strb.w	r3, [r7, #-1]!
 800f0aa:	d1f0      	bne.n	800f08e <_svfiprintf_r+0x83a>
 800f0ac:	9a04      	ldr	r2, [sp, #16]
 800f0ae:	07d2      	lsls	r2, r2, #31
 800f0b0:	d505      	bpl.n	800f0be <_svfiprintf_r+0x86a>
 800f0b2:	2b30      	cmp	r3, #48	; 0x30
 800f0b4:	d003      	beq.n	800f0be <_svfiprintf_r+0x86a>
 800f0b6:	2330      	movs	r3, #48	; 0x30
 800f0b8:	f807 3c01 	strb.w	r3, [r7, #-1]
 800f0bc:	1e8f      	subs	r7, r1, #2
 800f0be:	ab38      	add	r3, sp, #224	; 0xe0
 800f0c0:	1bdb      	subs	r3, r3, r7
 800f0c2:	9d00      	ldr	r5, [sp, #0]
 800f0c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	e5c9      	b.n	800ec60 <_svfiprintf_r+0x40c>
 800f0cc:	080120d0 	.word	0x080120d0

0800f0d0 <_sungetc_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	1c4b      	adds	r3, r1, #1
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	d103      	bne.n	800f0e0 <_sungetc_r+0x10>
 800f0d8:	f04f 35ff 	mov.w	r5, #4294967295
 800f0dc:	4628      	mov	r0, r5
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
 800f0e0:	8993      	ldrh	r3, [r2, #12]
 800f0e2:	f023 0320 	bic.w	r3, r3, #32
 800f0e6:	8193      	strh	r3, [r2, #12]
 800f0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0ea:	6852      	ldr	r2, [r2, #4]
 800f0ec:	b2cd      	uxtb	r5, r1
 800f0ee:	b18b      	cbz	r3, 800f114 <_sungetc_r+0x44>
 800f0f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	dd08      	ble.n	800f108 <_sungetc_r+0x38>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	1e5a      	subs	r2, r3, #1
 800f0fa:	6022      	str	r2, [r4, #0]
 800f0fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f100:	6863      	ldr	r3, [r4, #4]
 800f102:	3301      	adds	r3, #1
 800f104:	6063      	str	r3, [r4, #4]
 800f106:	e7e9      	b.n	800f0dc <_sungetc_r+0xc>
 800f108:	4621      	mov	r1, r4
 800f10a:	f001 f817 	bl	801013c <__submore>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d0f1      	beq.n	800f0f6 <_sungetc_r+0x26>
 800f112:	e7e1      	b.n	800f0d8 <_sungetc_r+0x8>
 800f114:	6921      	ldr	r1, [r4, #16]
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	b151      	cbz	r1, 800f130 <_sungetc_r+0x60>
 800f11a:	4299      	cmp	r1, r3
 800f11c:	d208      	bcs.n	800f130 <_sungetc_r+0x60>
 800f11e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f122:	42a9      	cmp	r1, r5
 800f124:	d104      	bne.n	800f130 <_sungetc_r+0x60>
 800f126:	3b01      	subs	r3, #1
 800f128:	3201      	adds	r2, #1
 800f12a:	6023      	str	r3, [r4, #0]
 800f12c:	6062      	str	r2, [r4, #4]
 800f12e:	e7d5      	b.n	800f0dc <_sungetc_r+0xc>
 800f130:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800f134:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f138:	6323      	str	r3, [r4, #48]	; 0x30
 800f13a:	2303      	movs	r3, #3
 800f13c:	6363      	str	r3, [r4, #52]	; 0x34
 800f13e:	4623      	mov	r3, r4
 800f140:	f803 5f42 	strb.w	r5, [r3, #66]!
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	2301      	movs	r3, #1
 800f148:	e7dc      	b.n	800f104 <_sungetc_r+0x34>

0800f14a <__ssrefill_r>:
 800f14a:	b510      	push	{r4, lr}
 800f14c:	460c      	mov	r4, r1
 800f14e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800f150:	b169      	cbz	r1, 800f16e <__ssrefill_r+0x24>
 800f152:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f156:	4299      	cmp	r1, r3
 800f158:	d001      	beq.n	800f15e <__ssrefill_r+0x14>
 800f15a:	f7f7 f915 	bl	8006388 <_free_r>
 800f15e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f160:	6063      	str	r3, [r4, #4]
 800f162:	2000      	movs	r0, #0
 800f164:	6320      	str	r0, [r4, #48]	; 0x30
 800f166:	b113      	cbz	r3, 800f16e <__ssrefill_r+0x24>
 800f168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	6923      	ldr	r3, [r4, #16]
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	2300      	movs	r3, #0
 800f174:	6063      	str	r3, [r4, #4]
 800f176:	89a3      	ldrh	r3, [r4, #12]
 800f178:	f043 0320 	orr.w	r3, r3, #32
 800f17c:	81a3      	strh	r3, [r4, #12]
 800f17e:	f04f 30ff 	mov.w	r0, #4294967295
 800f182:	e7f3      	b.n	800f16c <__ssrefill_r+0x22>

0800f184 <_sfread_r>:
 800f184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	461f      	mov	r7, r3
 800f18a:	4613      	mov	r3, r2
 800f18c:	437b      	muls	r3, r7
 800f18e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f190:	4682      	mov	sl, r0
 800f192:	4688      	mov	r8, r1
 800f194:	4691      	mov	r9, r2
 800f196:	d027      	beq.n	800f1e8 <_sfread_r+0x64>
 800f198:	461e      	mov	r6, r3
 800f19a:	e9d4 1500 	ldrd	r1, r5, [r4]
 800f19e:	42b5      	cmp	r5, r6
 800f1a0:	d30b      	bcc.n	800f1ba <_sfread_r+0x36>
 800f1a2:	4632      	mov	r2, r6
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	f7fd fa45 	bl	800c634 <memcpy>
 800f1aa:	6862      	ldr	r2, [r4, #4]
 800f1ac:	1b92      	subs	r2, r2, r6
 800f1ae:	6062      	str	r2, [r4, #4]
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	4432      	add	r2, r6
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	e016      	b.n	800f1e8 <_sfread_r+0x64>
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	4640      	mov	r0, r8
 800f1be:	9301      	str	r3, [sp, #4]
 800f1c0:	f7fd fa38 	bl	800c634 <memcpy>
 800f1c4:	6822      	ldr	r2, [r4, #0]
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	442a      	add	r2, r5
 800f1ca:	6063      	str	r3, [r4, #4]
 800f1cc:	6022      	str	r2, [r4, #0]
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4650      	mov	r0, sl
 800f1d2:	f7ff ffba 	bl	800f14a <__ssrefill_r>
 800f1d6:	44a8      	add	r8, r5
 800f1d8:	9b01      	ldr	r3, [sp, #4]
 800f1da:	eba6 0b05 	sub.w	fp, r6, r5
 800f1de:	b138      	cbz	r0, 800f1f0 <_sfread_r+0x6c>
 800f1e0:	441d      	add	r5, r3
 800f1e2:	1bad      	subs	r5, r5, r6
 800f1e4:	fbb5 f3f9 	udiv	r3, r5, r9
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	b003      	add	sp, #12
 800f1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f0:	465e      	mov	r6, fp
 800f1f2:	e7d2      	b.n	800f19a <_sfread_r+0x16>

0800f1f4 <__ssvfiscanf_r>:
 800f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	ed2d 8b02 	vpush	{d8}
 800f1fc:	b0df      	sub	sp, #380	; 0x17c
 800f1fe:	461e      	mov	r6, r3
 800f200:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800f204:	af02      	add	r7, sp, #8
 800f206:	049d      	lsls	r5, r3, #18
 800f208:	ee08 0a10 	vmov	s16, r0
 800f20c:	460c      	mov	r4, r1
 800f20e:	613a      	str	r2, [r7, #16]
 800f210:	d406      	bmi.n	800f220 <__ssvfiscanf_r+0x2c>
 800f212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f216:	818b      	strh	r3, [r1, #12]
 800f218:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f21e:	664b      	str	r3, [r1, #100]	; 0x64
 800f220:	2300      	movs	r3, #0
 800f222:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800f226:	617b      	str	r3, [r7, #20]
 800f228:	469b      	mov	fp, r3
 800f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f22c:	627b      	str	r3, [r7, #36]	; 0x24
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f234:	613a      	str	r2, [r7, #16]
 800f236:	637b      	str	r3, [r7, #52]	; 0x34
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d035      	beq.n	800f2a8 <__ssvfiscanf_r+0xb4>
 800f23c:	4a9f      	ldr	r2, [pc, #636]	; (800f4bc <__ssvfiscanf_r+0x2c8>)
 800f23e:	f813 9002 	ldrb.w	r9, [r3, r2]
 800f242:	f019 0908 	ands.w	r9, r9, #8
 800f246:	d019      	beq.n	800f27c <__ssvfiscanf_r+0x88>
 800f248:	6863      	ldr	r3, [r4, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	dd0e      	ble.n	800f26c <__ssvfiscanf_r+0x78>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	499a      	ldr	r1, [pc, #616]	; (800f4bc <__ssvfiscanf_r+0x2c8>)
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	5c8a      	ldrb	r2, [r1, r2]
 800f256:	0710      	lsls	r0, r2, #28
 800f258:	d5e9      	bpl.n	800f22e <__ssvfiscanf_r+0x3a>
 800f25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f25c:	3201      	adds	r2, #1
 800f25e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f260:	6862      	ldr	r2, [r4, #4]
 800f262:	3301      	adds	r3, #1
 800f264:	3a01      	subs	r2, #1
 800f266:	6062      	str	r2, [r4, #4]
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	e7ed      	b.n	800f248 <__ssvfiscanf_r+0x54>
 800f26c:	ee18 0a10 	vmov	r0, s16
 800f270:	4621      	mov	r1, r4
 800f272:	f7ff ff6a 	bl	800f14a <__ssrefill_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0e9      	beq.n	800f24e <__ssvfiscanf_r+0x5a>
 800f27a:	e7d8      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f27c:	2b25      	cmp	r3, #37	; 0x25
 800f27e:	f040 809f 	bne.w	800f3c0 <__ssvfiscanf_r+0x1cc>
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 800f288:	220a      	movs	r2, #10
 800f28a:	6939      	ldr	r1, [r7, #16]
 800f28c:	781d      	ldrb	r5, [r3, #0]
 800f28e:	3101      	adds	r1, #1
 800f290:	2d7a      	cmp	r5, #122	; 0x7a
 800f292:	6139      	str	r1, [r7, #16]
 800f294:	d808      	bhi.n	800f2a8 <__ssvfiscanf_r+0xb4>
 800f296:	2d42      	cmp	r5, #66	; 0x42
 800f298:	d80b      	bhi.n	800f2b2 <__ssvfiscanf_r+0xbe>
 800f29a:	2d2a      	cmp	r5, #42	; 0x2a
 800f29c:	f000 80b9 	beq.w	800f412 <__ssvfiscanf_r+0x21e>
 800f2a0:	d87e      	bhi.n	800f3a0 <__ssvfiscanf_r+0x1ac>
 800f2a2:	2d25      	cmp	r5, #37	; 0x25
 800f2a4:	f000 808c 	beq.w	800f3c0 <__ssvfiscanf_r+0x1cc>
 800f2a8:	f1bb 0f00 	cmp.w	fp, #0
 800f2ac:	f000 815f 	beq.w	800f56e <__ssvfiscanf_r+0x37a>
 800f2b0:	e158      	b.n	800f564 <__ssvfiscanf_r+0x370>
 800f2b2:	3d43      	subs	r5, #67	; 0x43
 800f2b4:	2d37      	cmp	r5, #55	; 0x37
 800f2b6:	d8f7      	bhi.n	800f2a8 <__ssvfiscanf_r+0xb4>
 800f2b8:	a101      	add	r1, pc, #4	; (adr r1, 800f2c0 <__ssvfiscanf_r+0xcc>)
 800f2ba:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f593 	.word	0x0800f593
 800f2c4:	0800f48f 	.word	0x0800f48f
 800f2c8:	0800f2a9 	.word	0x0800f2a9
 800f2cc:	0800f2a9 	.word	0x0800f2a9
 800f2d0:	0800f2a9 	.word	0x0800f2a9
 800f2d4:	0800f2a9 	.word	0x0800f2a9
 800f2d8:	0800f2a9 	.word	0x0800f2a9
 800f2dc:	0800f2a9 	.word	0x0800f2a9
 800f2e0:	0800f2a9 	.word	0x0800f2a9
 800f2e4:	0800f461 	.word	0x0800f461
 800f2e8:	0800f2a9 	.word	0x0800f2a9
 800f2ec:	0800f2a9 	.word	0x0800f2a9
 800f2f0:	0800f497 	.word	0x0800f497
 800f2f4:	0800f2a9 	.word	0x0800f2a9
 800f2f8:	0800f2a9 	.word	0x0800f2a9
 800f2fc:	0800f2a9 	.word	0x0800f2a9
 800f300:	0800f4c9 	.word	0x0800f4c9
 800f304:	0800f2a9 	.word	0x0800f2a9
 800f308:	0800f2a9 	.word	0x0800f2a9
 800f30c:	0800f2a9 	.word	0x0800f2a9
 800f310:	0800f2a9 	.word	0x0800f2a9
 800f314:	0800f4af 	.word	0x0800f4af
 800f318:	0800f2a9 	.word	0x0800f2a9
 800f31c:	0800f2a9 	.word	0x0800f2a9
 800f320:	0800f57f 	.word	0x0800f57f
 800f324:	0800f2a9 	.word	0x0800f2a9
 800f328:	0800f2a9 	.word	0x0800f2a9
 800f32c:	0800f2a9 	.word	0x0800f2a9
 800f330:	0800f2a9 	.word	0x0800f2a9
 800f334:	0800f2a9 	.word	0x0800f2a9
 800f338:	0800f2a9 	.word	0x0800f2a9
 800f33c:	0800f2a9 	.word	0x0800f2a9
 800f340:	0800f597 	.word	0x0800f597
 800f344:	0800f493 	.word	0x0800f493
 800f348:	0800f2a9 	.word	0x0800f2a9
 800f34c:	0800f2a9 	.word	0x0800f2a9
 800f350:	0800f2a9 	.word	0x0800f2a9
 800f354:	0800f445 	.word	0x0800f445
 800f358:	0800f5eb 	.word	0x0800f5eb
 800f35c:	0800f461 	.word	0x0800f461
 800f360:	0800f2a9 	.word	0x0800f2a9
 800f364:	0800f427 	.word	0x0800f427
 800f368:	0800f471 	.word	0x0800f471
 800f36c:	0800f5a5 	.word	0x0800f5a5
 800f370:	0800f49b 	.word	0x0800f49b
 800f374:	0800f59f 	.word	0x0800f59f
 800f378:	0800f2a9 	.word	0x0800f2a9
 800f37c:	0800f2a9 	.word	0x0800f2a9
 800f380:	0800f4cd 	.word	0x0800f4cd
 800f384:	0800f469 	.word	0x0800f469
 800f388:	0800f4a7 	.word	0x0800f4a7
 800f38c:	0800f2a9 	.word	0x0800f2a9
 800f390:	0800f2a9 	.word	0x0800f2a9
 800f394:	0800f4af 	.word	0x0800f4af
 800f398:	0800f2a9 	.word	0x0800f2a9
 800f39c:	0800f469 	.word	0x0800f469
 800f3a0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f3a4:	2b09      	cmp	r3, #9
 800f3a6:	f63f af7f 	bhi.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f3aa:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 800f3ae:	f47f af7b 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	fb02 5503 	mla	r5, r2, r3, r5
 800f3b8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3be:	e030      	b.n	800f422 <__ssvfiscanf_r+0x22e>
 800f3c0:	6863      	ldr	r3, [r4, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	dd10      	ble.n	800f3e8 <__ssvfiscanf_r+0x1f4>
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	7819      	ldrb	r1, [r3, #0]
 800f3cc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f3d0:	4291      	cmp	r1, r2
 800f3d2:	f47f af69 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f3d6:	6862      	ldr	r2, [r4, #4]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	6023      	str	r3, [r4, #0]
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	3a01      	subs	r2, #1
 800f3e0:	6062      	str	r2, [r4, #4]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3e6:	e722      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f3e8:	ee18 0a10 	vmov	r0, s16
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	f7ff feac 	bl	800f14a <__ssrefill_r>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d0e7      	beq.n	800f3c6 <__ssvfiscanf_r+0x1d2>
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f8:	b11b      	cbz	r3, 800f402 <__ssvfiscanf_r+0x20e>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	065b      	lsls	r3, r3, #25
 800f3fe:	f57f af53 	bpl.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f402:	f1bb 0f00 	cmp.w	fp, #0
 800f406:	f040 80a1 	bne.w	800f54c <__ssvfiscanf_r+0x358>
 800f40a:	f04f 33ff 	mov.w	r3, #4294967295
 800f40e:	627b      	str	r3, [r7, #36]	; 0x24
 800f410:	e0ad      	b.n	800f56e <__ssvfiscanf_r+0x37a>
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	ea53 0309 	orrs.w	r3, r3, r9
 800f418:	62bb      	str	r3, [r7, #40]	; 0x28
 800f41a:	f47f af45 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f41e:	f04f 0910 	mov.w	r9, #16
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	e731      	b.n	800f28a <__ssvfiscanf_r+0x96>
 800f426:	f019 0f0f 	tst.w	r9, #15
 800f42a:	f47f af3d 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f42e:	7859      	ldrb	r1, [r3, #1]
 800f430:	296c      	cmp	r1, #108	; 0x6c
 800f432:	d104      	bne.n	800f43e <__ssvfiscanf_r+0x24a>
 800f434:	3302      	adds	r3, #2
 800f436:	613b      	str	r3, [r7, #16]
 800f438:	f049 0902 	orr.w	r9, r9, #2
 800f43c:	e7f1      	b.n	800f422 <__ssvfiscanf_r+0x22e>
 800f43e:	f049 0901 	orr.w	r9, r9, #1
 800f442:	e7ee      	b.n	800f422 <__ssvfiscanf_r+0x22e>
 800f444:	f019 0f0f 	tst.w	r9, #15
 800f448:	f47f af2e 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f44c:	7859      	ldrb	r1, [r3, #1]
 800f44e:	2968      	cmp	r1, #104	; 0x68
 800f450:	bf03      	ittte	eq
 800f452:	3302      	addeq	r3, #2
 800f454:	613b      	streq	r3, [r7, #16]
 800f456:	f049 0908 	orreq.w	r9, r9, #8
 800f45a:	f049 0904 	orrne.w	r9, r9, #4
 800f45e:	e7e0      	b.n	800f422 <__ssvfiscanf_r+0x22e>
 800f460:	f019 0f0f 	tst.w	r9, #15
 800f464:	d0e8      	beq.n	800f438 <__ssvfiscanf_r+0x244>
 800f466:	e71f      	b.n	800f2a8 <__ssvfiscanf_r+0xb4>
 800f468:	f019 0f0f 	tst.w	r9, #15
 800f46c:	d0d9      	beq.n	800f422 <__ssvfiscanf_r+0x22e>
 800f46e:	e71b      	b.n	800f2a8 <__ssvfiscanf_r+0xb4>
 800f470:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 800f474:	f47f af18 	bne.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f478:	f1bb 0f00 	cmp.w	fp, #0
 800f47c:	d104      	bne.n	800f488 <__ssvfiscanf_r+0x294>
 800f47e:	b082      	sub	sp, #8
 800f480:	f10d 0b08 	add.w	fp, sp, #8
 800f484:	e9cb 3300 	strd	r3, r3, [fp]
 800f488:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800f48c:	e7c9      	b.n	800f422 <__ssvfiscanf_r+0x22e>
 800f48e:	f049 0901 	orr.w	r9, r9, #1
 800f492:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <__ssvfiscanf_r+0x2cc>)
 800f494:	e008      	b.n	800f4a8 <__ssvfiscanf_r+0x2b4>
 800f496:	f049 0901 	orr.w	r9, r9, #1
 800f49a:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <__ssvfiscanf_r+0x2d0>)
 800f49c:	617b      	str	r3, [r7, #20]
 800f49e:	2308      	movs	r3, #8
 800f4a0:	61fb      	str	r3, [r7, #28]
 800f4a2:	2503      	movs	r5, #3
 800f4a4:	e013      	b.n	800f4ce <__ssvfiscanf_r+0x2da>
 800f4a6:	4b07      	ldr	r3, [pc, #28]	; (800f4c4 <__ssvfiscanf_r+0x2d0>)
 800f4a8:	617b      	str	r3, [r7, #20]
 800f4aa:	230a      	movs	r3, #10
 800f4ac:	e7f8      	b.n	800f4a0 <__ssvfiscanf_r+0x2ac>
 800f4ae:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800f4b2:	4b04      	ldr	r3, [pc, #16]	; (800f4c4 <__ssvfiscanf_r+0x2d0>)
 800f4b4:	617b      	str	r3, [r7, #20]
 800f4b6:	2310      	movs	r3, #16
 800f4b8:	e7f2      	b.n	800f4a0 <__ssvfiscanf_r+0x2ac>
 800f4ba:	bf00      	nop
 800f4bc:	08011d92 	.word	0x08011d92
 800f4c0:	0800e3e1 	.word	0x0800e3e1
 800f4c4:	0800e60d 	.word	0x0800e60d
 800f4c8:	f049 0901 	orr.w	r9, r9, #1
 800f4cc:	2502      	movs	r5, #2
 800f4ce:	6863      	ldr	r3, [r4, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f340 808e 	ble.w	800f5f2 <__ssvfiscanf_r+0x3fe>
 800f4d6:	f019 0f40 	tst.w	r9, #64	; 0x40
 800f4da:	d106      	bne.n	800f4ea <__ssvfiscanf_r+0x2f6>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	49b3      	ldr	r1, [pc, #716]	; (800f7ac <__ssvfiscanf_r+0x5b8>)
 800f4e0:	781a      	ldrb	r2, [r3, #0]
 800f4e2:	5c52      	ldrb	r2, [r2, r1]
 800f4e4:	0711      	lsls	r1, r2, #28
 800f4e6:	f100 808d 	bmi.w	800f604 <__ssvfiscanf_r+0x410>
 800f4ea:	2d02      	cmp	r5, #2
 800f4ec:	f000 8394 	beq.w	800fc18 <__ssvfiscanf_r+0xa24>
 800f4f0:	2d03      	cmp	r5, #3
 800f4f2:	f000 8535 	beq.w	800ff60 <__ssvfiscanf_r+0xd6c>
 800f4f6:	f009 0310 	and.w	r3, r9, #16
 800f4fa:	2d01      	cmp	r5, #1
 800f4fc:	61bb      	str	r3, [r7, #24]
 800f4fe:	f009 0301 	and.w	r3, r9, #1
 800f502:	f000 81cc 	beq.w	800f89e <__ssvfiscanf_r+0x6aa>
 800f506:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f508:	2d01      	cmp	r5, #1
 800f50a:	bf38      	it	cc
 800f50c:	2501      	movcc	r5, #1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f000 8150 	beq.w	800f7b4 <__ssvfiscanf_r+0x5c0>
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	f040 810d 	bne.w	800f736 <__ssvfiscanf_r+0x542>
 800f51c:	4633      	mov	r3, r6
 800f51e:	f019 0f80 	tst.w	r9, #128	; 0x80
 800f522:	f853 6b04 	ldr.w	r6, [r3], #4
 800f526:	62bb      	str	r3, [r7, #40]	; 0x28
 800f528:	f000 810c 	beq.w	800f744 <__ssvfiscanf_r+0x550>
 800f52c:	b146      	cbz	r6, 800f540 <__ssvfiscanf_r+0x34c>
 800f52e:	2080      	movs	r0, #128	; 0x80
 800f530:	f7f7 f912 	bl	8006758 <malloc>
 800f534:	4680      	mov	r8, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	d178      	bne.n	800f62c <__ssvfiscanf_r+0x438>
 800f53a:	f04f 33ff 	mov.w	r3, #4294967295
 800f53e:	627b      	str	r3, [r7, #36]	; 0x24
 800f540:	f1bb 0f00 	cmp.w	fp, #0
 800f544:	d013      	beq.n	800f56e <__ssvfiscanf_r+0x37a>
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	3301      	adds	r3, #1
 800f54a:	d10b      	bne.n	800f564 <__ssvfiscanf_r+0x370>
 800f54c:	2400      	movs	r4, #0
 800f54e:	4626      	mov	r6, r4
 800f550:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800f554:	f8db 5000 	ldr.w	r5, [fp]
 800f558:	42a3      	cmp	r3, r4
 800f55a:	f300 85df 	bgt.w	801011c <__ssvfiscanf_r+0xf28>
 800f55e:	f04f 33ff 	mov.w	r3, #4294967295
 800f562:	627b      	str	r3, [r7, #36]	; 0x24
 800f564:	f8db 0000 	ldr.w	r0, [fp]
 800f568:	b108      	cbz	r0, 800f56e <__ssvfiscanf_r+0x37a>
 800f56a:	f7f7 f8fd 	bl	8006768 <free>
 800f56e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f570:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 800f574:	46bd      	mov	sp, r7
 800f576:	ecbd 8b02 	vpop	{d8}
 800f57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57e:	6939      	ldr	r1, [r7, #16]
 800f580:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800f584:	f7fd ff5e 	bl	800d444 <__sccl>
 800f588:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800f58c:	6138      	str	r0, [r7, #16]
 800f58e:	2501      	movs	r5, #1
 800f590:	e79d      	b.n	800f4ce <__ssvfiscanf_r+0x2da>
 800f592:	f049 0901 	orr.w	r9, r9, #1
 800f596:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800f59a:	2500      	movs	r5, #0
 800f59c:	e797      	b.n	800f4ce <__ssvfiscanf_r+0x2da>
 800f59e:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 800f5a2:	e786      	b.n	800f4b2 <__ssvfiscanf_r+0x2be>
 800f5a4:	f019 0f10 	tst.w	r9, #16
 800f5a8:	f47f ae41 	bne.w	800f22e <__ssvfiscanf_r+0x3a>
 800f5ac:	f019 0f08 	tst.w	r9, #8
 800f5b0:	f856 1b04 	ldr.w	r1, [r6], #4
 800f5b4:	d002      	beq.n	800f5bc <__ssvfiscanf_r+0x3c8>
 800f5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b8:	700b      	strb	r3, [r1, #0]
 800f5ba:	e638      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f5bc:	f019 0f04 	tst.w	r9, #4
 800f5c0:	d002      	beq.n	800f5c8 <__ssvfiscanf_r+0x3d4>
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	800b      	strh	r3, [r1, #0]
 800f5c6:	e632      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f5c8:	f019 0f01 	tst.w	r9, #1
 800f5cc:	d002      	beq.n	800f5d4 <__ssvfiscanf_r+0x3e0>
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	600b      	str	r3, [r1, #0]
 800f5d2:	e62c      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f5d4:	f019 0f02 	tst.w	r9, #2
 800f5d8:	d0f9      	beq.n	800f5ce <__ssvfiscanf_r+0x3da>
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	464b      	mov	r3, r9
 800f5e4:	e9c1 2300 	strd	r2, r3, [r1]
 800f5e8:	e621      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f5ea:	4b71      	ldr	r3, [pc, #452]	; (800f7b0 <__ssvfiscanf_r+0x5bc>)
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e756      	b.n	800f4a0 <__ssvfiscanf_r+0x2ac>
 800f5f2:	ee18 0a10 	vmov	r0, s16
 800f5f6:	4621      	mov	r1, r4
 800f5f8:	f7ff fda7 	bl	800f14a <__ssrefill_r>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	f43f af6a 	beq.w	800f4d6 <__ssvfiscanf_r+0x2e2>
 800f602:	e6f8      	b.n	800f3f6 <__ssvfiscanf_r+0x202>
 800f604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f606:	3201      	adds	r2, #1
 800f608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f60a:	6862      	ldr	r2, [r4, #4]
 800f60c:	3a01      	subs	r2, #1
 800f60e:	2a00      	cmp	r2, #0
 800f610:	6062      	str	r2, [r4, #4]
 800f612:	dd02      	ble.n	800f61a <__ssvfiscanf_r+0x426>
 800f614:	3301      	adds	r3, #1
 800f616:	6023      	str	r3, [r4, #0]
 800f618:	e760      	b.n	800f4dc <__ssvfiscanf_r+0x2e8>
 800f61a:	ee18 0a10 	vmov	r0, s16
 800f61e:	4621      	mov	r1, r4
 800f620:	f7ff fd93 	bl	800f14a <__ssrefill_r>
 800f624:	2800      	cmp	r0, #0
 800f626:	f43f af59 	beq.w	800f4dc <__ssvfiscanf_r+0x2e8>
 800f62a:	e6e4      	b.n	800f3f6 <__ssvfiscanf_r+0x202>
 800f62c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800f630:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800f634:	6030      	str	r0, [r6, #0]
 800f636:	45ca      	cmp	sl, r9
 800f638:	d313      	bcc.n	800f662 <__ssvfiscanf_r+0x46e>
 800f63a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800f63e:	4599      	cmp	r9, r3
 800f640:	f63f af7b 	bhi.w	800f53a <__ssvfiscanf_r+0x346>
 800f644:	f109 0908 	add.w	r9, r9, #8
 800f648:	f8db 0000 	ldr.w	r0, [fp]
 800f64c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800f650:	f7fd fc86 	bl	800cf60 <realloc>
 800f654:	2800      	cmp	r0, #0
 800f656:	f43f af70 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800f65a:	f8cb 0000 	str.w	r0, [fp]
 800f65e:	f8ab 9004 	strh.w	r9, [fp, #4]
 800f662:	f8db 3000 	ldr.w	r3, [fp]
 800f666:	f10a 0201 	add.w	r2, sl, #1
 800f66a:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800f66e:	f8ab 2006 	strh.w	r2, [fp, #6]
 800f672:	46b2      	mov	sl, r6
 800f674:	f04f 0920 	mov.w	r9, #32
 800f678:	4646      	mov	r6, r8
 800f67a:	2200      	movs	r2, #0
 800f67c:	60fa      	str	r2, [r7, #12]
 800f67e:	f7fc ff37 	bl	800c4f0 <__locale_mb_cur_max>
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	4290      	cmp	r0, r2
 800f686:	f43f aeb6 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f68a:	6821      	ldr	r1, [r4, #0]
 800f68c:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800f690:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f694:	f80c 0002 	strb.w	r0, [ip, r2]
 800f698:	1c53      	adds	r3, r2, #1
 800f69a:	6862      	ldr	r2, [r4, #4]
 800f69c:	3a01      	subs	r2, #1
 800f69e:	e9c4 1200 	strd	r1, r2, [r4]
 800f6a2:	6a3a      	ldr	r2, [r7, #32]
 800f6a4:	2a03      	cmp	r2, #3
 800f6a6:	d102      	bne.n	800f6ae <__ssvfiscanf_r+0x4ba>
 800f6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6aa:	2a04      	cmp	r2, #4
 800f6ac:	d007      	beq.n	800f6be <__ssvfiscanf_r+0x4ca>
 800f6ae:	2208      	movs	r2, #8
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800f6b6:	623b      	str	r3, [r7, #32]
 800f6b8:	f7f7 faa0 	bl	8006bfc <memset>
 800f6bc:	6a3b      	ldr	r3, [r7, #32]
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f6c4:	9200      	str	r2, [sp, #0]
 800f6c6:	ee18 0a10 	vmov	r0, s16
 800f6ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	f7fc ff84 	bl	800c5dc <_mbrtowc_r>
 800f6d4:	1c42      	adds	r2, r0, #1
 800f6d6:	6238      	str	r0, [r7, #32]
 800f6d8:	f43f ae8d 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d135      	bne.n	800f74e <__ssvfiscanf_r+0x55a>
 800f6e2:	69ba      	ldr	r2, [r7, #24]
 800f6e4:	b902      	cbnz	r2, 800f6e8 <__ssvfiscanf_r+0x4f4>
 800f6e6:	6032      	str	r2, [r6, #0]
 800f6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ea:	441a      	add	r2, r3
 800f6ec:	6a3b      	ldr	r3, [r7, #32]
 800f6ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d102      	bne.n	800f6fa <__ssvfiscanf_r+0x506>
 800f6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	d000      	beq.n	800f6fc <__ssvfiscanf_r+0x508>
 800f6fa:	3d01      	subs	r5, #1
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	b9c3      	cbnz	r3, 800f732 <__ssvfiscanf_r+0x53e>
 800f700:	f1ba 0f00 	cmp.w	sl, #0
 800f704:	d014      	beq.n	800f730 <__ssvfiscanf_r+0x53c>
 800f706:	eba6 0308 	sub.w	r3, r6, r8
 800f70a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800f70e:	d80f      	bhi.n	800f730 <__ssvfiscanf_r+0x53c>
 800f710:	4640      	mov	r0, r8
 800f712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f716:	60fb      	str	r3, [r7, #12]
 800f718:	f7fd fc22 	bl	800cf60 <realloc>
 800f71c:	4680      	mov	r8, r0
 800f71e:	2800      	cmp	r0, #0
 800f720:	f43f af0b 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8ca 0000 	str.w	r0, [sl]
 800f72a:	18c6      	adds	r6, r0, r3
 800f72c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f730:	3604      	adds	r6, #4
 800f732:	2200      	movs	r2, #0
 800f734:	e00f      	b.n	800f756 <__ssvfiscanf_r+0x562>
 800f736:	f04f 0900 	mov.w	r9, #0
 800f73a:	62be      	str	r6, [r7, #40]	; 0x28
 800f73c:	46c8      	mov	r8, r9
 800f73e:	46ca      	mov	sl, r9
 800f740:	464e      	mov	r6, r9
 800f742:	e79a      	b.n	800f67a <__ssvfiscanf_r+0x486>
 800f744:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800f748:	46c8      	mov	r8, r9
 800f74a:	46ca      	mov	sl, r9
 800f74c:	e795      	b.n	800f67a <__ssvfiscanf_r+0x486>
 800f74e:	6a3a      	ldr	r2, [r7, #32]
 800f750:	3202      	adds	r2, #2
 800f752:	d1c9      	bne.n	800f6e8 <__ssvfiscanf_r+0x4f4>
 800f754:	461a      	mov	r2, r3
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dc14      	bgt.n	800f786 <__ssvfiscanf_r+0x592>
 800f75c:	ee18 0a10 	vmov	r0, s16
 800f760:	4621      	mov	r1, r4
 800f762:	60fa      	str	r2, [r7, #12]
 800f764:	f7ff fcf1 	bl	800f14a <__ssrefill_r>
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	b160      	cbz	r0, 800f786 <__ssvfiscanf_r+0x592>
 800f76c:	2a00      	cmp	r2, #0
 800f76e:	f47f ae42 	bne.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f772:	f1ba 0f00 	cmp.w	sl, #0
 800f776:	d10a      	bne.n	800f78e <__ssvfiscanf_r+0x59a>
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	b913      	cbnz	r3, 800f782 <__ssvfiscanf_r+0x58e>
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	3301      	adds	r3, #1
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
 800f782:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800f784:	e553      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f786:	2d00      	cmp	r5, #0
 800f788:	f47f af78 	bne.w	800f67c <__ssvfiscanf_r+0x488>
 800f78c:	e7f1      	b.n	800f772 <__ssvfiscanf_r+0x57e>
 800f78e:	eba6 0108 	sub.w	r1, r6, r8
 800f792:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800f796:	d9ef      	bls.n	800f778 <__ssvfiscanf_r+0x584>
 800f798:	f8da 0000 	ldr.w	r0, [sl]
 800f79c:	f7fd fbe0 	bl	800cf60 <realloc>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	d0e9      	beq.n	800f778 <__ssvfiscanf_r+0x584>
 800f7a4:	f8ca 0000 	str.w	r0, [sl]
 800f7a8:	e7e6      	b.n	800f778 <__ssvfiscanf_r+0x584>
 800f7aa:	bf00      	nop
 800f7ac:	08011d92 	.word	0x08011d92
 800f7b0:	0800e3e1 	.word	0x0800e3e1
 800f7b4:	69ba      	ldr	r2, [r7, #24]
 800f7b6:	b1e2      	cbz	r2, 800f7f2 <__ssvfiscanf_r+0x5fe>
 800f7b8:	4698      	mov	r8, r3
 800f7ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f7be:	429d      	cmp	r5, r3
 800f7c0:	dd11      	ble.n	800f7e6 <__ssvfiscanf_r+0x5f2>
 800f7c2:	4498      	add	r8, r3
 800f7c4:	1aed      	subs	r5, r5, r3
 800f7c6:	4413      	add	r3, r2
 800f7c8:	ee18 0a10 	vmov	r0, s16
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	f7ff fcbb 	bl	800f14a <__ssrefill_r>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d0f0      	beq.n	800f7ba <__ssvfiscanf_r+0x5c6>
 800f7d8:	f1b8 0f00 	cmp.w	r8, #0
 800f7dc:	f43f ae0b 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	4443      	add	r3, r8
 800f7e4:	e5fe      	b.n	800f3e4 <__ssvfiscanf_r+0x1f0>
 800f7e6:	1b5b      	subs	r3, r3, r5
 800f7e8:	44a8      	add	r8, r5
 800f7ea:	4415      	add	r5, r2
 800f7ec:	6063      	str	r3, [r4, #4]
 800f7ee:	6025      	str	r5, [r4, #0]
 800f7f0:	e7f6      	b.n	800f7e0 <__ssvfiscanf_r+0x5ec>
 800f7f2:	46b0      	mov	r8, r6
 800f7f4:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800f7f8:	f858 6b04 	ldr.w	r6, [r8], #4
 800f7fc:	d02e      	beq.n	800f85c <__ssvfiscanf_r+0x668>
 800f7fe:	2e00      	cmp	r6, #0
 800f800:	f43f ad52 	beq.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800f804:	4628      	mov	r0, r5
 800f806:	f7f6 ffa7 	bl	8006758 <malloc>
 800f80a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f80c:	2800      	cmp	r0, #0
 800f80e:	f43f adf8 	beq.w	800f402 <__ssvfiscanf_r+0x20e>
 800f812:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800f816:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800f81a:	6030      	str	r0, [r6, #0]
 800f81c:	45ca      	cmp	sl, r9
 800f81e:	d313      	bcc.n	800f848 <__ssvfiscanf_r+0x654>
 800f820:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800f824:	4599      	cmp	r9, r3
 800f826:	f63f ae91 	bhi.w	800f54c <__ssvfiscanf_r+0x358>
 800f82a:	f109 0908 	add.w	r9, r9, #8
 800f82e:	f8db 0000 	ldr.w	r0, [fp]
 800f832:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800f836:	f7fd fb93 	bl	800cf60 <realloc>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	f43f ae86 	beq.w	800f54c <__ssvfiscanf_r+0x358>
 800f840:	f8cb 0000 	str.w	r0, [fp]
 800f844:	f8ab 9004 	strh.w	r9, [fp, #4]
 800f848:	f8db 3000 	ldr.w	r3, [fp]
 800f84c:	f10a 0201 	add.w	r2, sl, #1
 800f850:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800f854:	46b1      	mov	r9, r6
 800f856:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800f858:	f8ab 2006 	strh.w	r2, [fp, #6]
 800f85c:	4631      	mov	r1, r6
 800f85e:	ee18 0a10 	vmov	r0, s16
 800f862:	9400      	str	r4, [sp, #0]
 800f864:	462b      	mov	r3, r5
 800f866:	2201      	movs	r2, #1
 800f868:	f7ff fc8c 	bl	800f184 <_sfread_r>
 800f86c:	4606      	mov	r6, r0
 800f86e:	2800      	cmp	r0, #0
 800f870:	f43f adc1 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f874:	f1b9 0f00 	cmp.w	r9, #0
 800f878:	d009      	beq.n	800f88e <__ssvfiscanf_r+0x69a>
 800f87a:	4285      	cmp	r5, r0
 800f87c:	d907      	bls.n	800f88e <__ssvfiscanf_r+0x69a>
 800f87e:	4601      	mov	r1, r0
 800f880:	f8d9 0000 	ldr.w	r0, [r9]
 800f884:	f7fd fb6c 	bl	800cf60 <realloc>
 800f888:	b108      	cbz	r0, 800f88e <__ssvfiscanf_r+0x69a>
 800f88a:	f8c9 0000 	str.w	r0, [r9]
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	4433      	add	r3, r6
 800f892:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	3301      	adds	r3, #1
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
 800f89a:	4646      	mov	r6, r8
 800f89c:	e4c7      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800f89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8a0:	2a00      	cmp	r2, #0
 800f8a2:	bf08      	it	eq
 800f8a4:	f04f 32ff 	moveq.w	r2, #4294967295
 800f8a8:	461d      	mov	r5, r3
 800f8aa:	62ba      	str	r2, [r7, #40]	; 0x28
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	f000 8105 	beq.w	800fabe <__ssvfiscanf_r+0x8ca>
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f040 80a5 	bne.w	800fa04 <__ssvfiscanf_r+0x810>
 800f8ba:	4633      	mov	r3, r6
 800f8bc:	f019 0f80 	tst.w	r9, #128	; 0x80
 800f8c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8c4:	607b      	str	r3, [r7, #4]
 800f8c6:	f000 80a6 	beq.w	800fa16 <__ssvfiscanf_r+0x822>
 800f8ca:	2d00      	cmp	r5, #0
 800f8cc:	f43f ae38 	beq.w	800f540 <__ssvfiscanf_r+0x34c>
 800f8d0:	2080      	movs	r0, #128	; 0x80
 800f8d2:	f7f6 ff41 	bl	8006758 <malloc>
 800f8d6:	4680      	mov	r8, r0
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f43f ae2e 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800f8de:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 800f8e2:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 800f8e6:	6028      	str	r0, [r5, #0]
 800f8e8:	45b1      	cmp	r9, r6
 800f8ea:	d311      	bcc.n	800f910 <__ssvfiscanf_r+0x71c>
 800f8ec:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800f8f0:	429e      	cmp	r6, r3
 800f8f2:	f63f ae22 	bhi.w	800f53a <__ssvfiscanf_r+0x346>
 800f8f6:	3608      	adds	r6, #8
 800f8f8:	f8db 0000 	ldr.w	r0, [fp]
 800f8fc:	00b1      	lsls	r1, r6, #2
 800f8fe:	f7fd fb2f 	bl	800cf60 <realloc>
 800f902:	2800      	cmp	r0, #0
 800f904:	f43f ae19 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800f908:	f8cb 0000 	str.w	r0, [fp]
 800f90c:	f8ab 6004 	strh.w	r6, [fp, #4]
 800f910:	f8db 3000 	ldr.w	r3, [fp]
 800f914:	60fd      	str	r5, [r7, #12]
 800f916:	f109 0201 	add.w	r2, r9, #1
 800f91a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800f91e:	f8ab 2006 	strh.w	r2, [fp, #6]
 800f922:	4645      	mov	r5, r8
 800f924:	f04f 0920 	mov.w	r9, #32
 800f928:	2600      	movs	r6, #0
 800f92a:	f7fc fde1 	bl	800c4f0 <__locale_mb_cur_max>
 800f92e:	42b0      	cmp	r0, r6
 800f930:	f43f ad61 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f934:	1c73      	adds	r3, r6, #1
 800f936:	60bb      	str	r3, [r7, #8]
 800f938:	6823      	ldr	r3, [r4, #0]
 800f93a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800f93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f942:	558a      	strb	r2, [r1, r6]
 800f944:	6862      	ldr	r2, [r4, #4]
 800f946:	3a01      	subs	r2, #1
 800f948:	e9c4 3200 	strd	r3, r2, [r4]
 800f94c:	6a3b      	ldr	r3, [r7, #32]
 800f94e:	2b03      	cmp	r3, #3
 800f950:	d102      	bne.n	800f958 <__ssvfiscanf_r+0x764>
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	2b04      	cmp	r3, #4
 800f956:	d005      	beq.n	800f964 <__ssvfiscanf_r+0x770>
 800f958:	2208      	movs	r2, #8
 800f95a:	2100      	movs	r1, #0
 800f95c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f960:	f7f7 f94c 	bl	8006bfc <memset>
 800f964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	ee18 0a10 	vmov	r0, s16
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f974:	4629      	mov	r1, r5
 800f976:	f7fc fe31 	bl	800c5dc <_mbrtowc_r>
 800f97a:	4603      	mov	r3, r0
 800f97c:	6238      	str	r0, [r7, #32]
 800f97e:	1c58      	adds	r0, r3, #1
 800f980:	f43f ad39 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800f984:	2b00      	cmp	r3, #0
 800f986:	d14c      	bne.n	800fa22 <__ssvfiscanf_r+0x82e>
 800f988:	602b      	str	r3, [r5, #0]
 800f98a:	682e      	ldr	r6, [r5, #0]
 800f98c:	1c71      	adds	r1, r6, #1
 800f98e:	d059      	beq.n	800fa44 <__ssvfiscanf_r+0x850>
 800f990:	2208      	movs	r2, #8
 800f992:	2100      	movs	r1, #0
 800f994:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800f998:	f7f7 f930 	bl	8006bfc <memset>
 800f99c:	4b9d      	ldr	r3, [pc, #628]	; (800fc14 <__ssvfiscanf_r+0xa20>)
 800f99e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9a2:	603b      	str	r3, [r7, #0]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	ee18 0a10 	vmov	r0, s16
 800f9aa:	683e      	ldr	r6, [r7, #0]
 800f9ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f9b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f9b4:	47b0      	blx	r6
 800f9b6:	2801      	cmp	r0, #1
 800f9b8:	d146      	bne.n	800fa48 <__ssvfiscanf_r+0x854>
 800f9ba:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 800f9be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f9c2:	f813 300a 	ldrb.w	r3, [r3, sl]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d14b      	bne.n	800fa62 <__ssvfiscanf_r+0x86e>
 800f9ca:	f107 0648 	add.w	r6, r7, #72	; 0x48
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d13c      	bne.n	800fa4e <__ssvfiscanf_r+0x85a>
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	b99b      	cbnz	r3, 800fa00 <__ssvfiscanf_r+0x80c>
 800f9d8:	602b      	str	r3, [r5, #0]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	b16b      	cbz	r3, 800f9fa <__ssvfiscanf_r+0x806>
 800f9de:	eba5 0108 	sub.w	r1, r5, r8
 800f9e2:	108b      	asrs	r3, r1, #2
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	4599      	cmp	r9, r3
 800f9e8:	d907      	bls.n	800f9fa <__ssvfiscanf_r+0x806>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	3104      	adds	r1, #4
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	f7fd fab6 	bl	800cf60 <realloc>
 800f9f4:	b108      	cbz	r0, 800f9fa <__ssvfiscanf_r+0x806>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6018      	str	r0, [r3, #0]
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800fa00:	687e      	ldr	r6, [r7, #4]
 800fa02:	e414      	b.n	800f22e <__ssvfiscanf_r+0x3a>
 800fa04:	f04f 0900 	mov.w	r9, #0
 800fa08:	607e      	str	r6, [r7, #4]
 800fa0a:	46c8      	mov	r8, r9
 800fa0c:	f8c7 900c 	str.w	r9, [r7, #12]
 800fa10:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800fa14:	e788      	b.n	800f928 <__ssvfiscanf_r+0x734>
 800fa16:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800fa1a:	f8c7 900c 	str.w	r9, [r7, #12]
 800fa1e:	46c8      	mov	r8, r9
 800fa20:	e782      	b.n	800f928 <__ssvfiscanf_r+0x734>
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	3302      	adds	r3, #2
 800fa26:	d1b0      	bne.n	800f98a <__ssvfiscanf_r+0x796>
 800fa28:	68be      	ldr	r6, [r7, #8]
 800fa2a:	6863      	ldr	r3, [r4, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	dc41      	bgt.n	800fab4 <__ssvfiscanf_r+0x8c0>
 800fa30:	ee18 0a10 	vmov	r0, s16
 800fa34:	4621      	mov	r1, r4
 800fa36:	f7ff fb88 	bl	800f14a <__ssrefill_r>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d03a      	beq.n	800fab4 <__ssvfiscanf_r+0x8c0>
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	d0c8      	beq.n	800f9d4 <__ssvfiscanf_r+0x7e0>
 800fa42:	e4d8      	b.n	800f3f6 <__ssvfiscanf_r+0x202>
 800fa44:	46b2      	mov	sl, r6
 800fa46:	e7ba      	b.n	800f9be <__ssvfiscanf_r+0x7ca>
 800fa48:	f04f 0a00 	mov.w	sl, #0
 800fa4c:	e7b7      	b.n	800f9be <__ssvfiscanf_r+0x7ca>
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	3b01      	subs	r3, #1
 800fa52:	ee18 0a10 	vmov	r0, s16
 800fa56:	5cf1      	ldrb	r1, [r6, r3]
 800fa58:	60bb      	str	r3, [r7, #8]
 800fa5a:	4622      	mov	r2, r4
 800fa5c:	f7ff fb38 	bl	800f0d0 <_sungetc_r>
 800fa60:	e7b5      	b.n	800f9ce <__ssvfiscanf_r+0x7da>
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	4413      	add	r3, r2
 800fa68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	2b03      	cmp	r3, #3
 800fa6e:	d102      	bne.n	800fa76 <__ssvfiscanf_r+0x882>
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	2b04      	cmp	r3, #4
 800fa74:	d002      	beq.n	800fa7c <__ssvfiscanf_r+0x888>
 800fa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	b9bb      	cbnz	r3, 800fab0 <__ssvfiscanf_r+0x8bc>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3504      	adds	r5, #4
 800fa84:	b1a3      	cbz	r3, 800fab0 <__ssvfiscanf_r+0x8bc>
 800fa86:	eba5 0608 	sub.w	r6, r5, r8
 800fa8a:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 800fa8e:	d80d      	bhi.n	800faac <__ssvfiscanf_r+0x8b8>
 800fa90:	4640      	mov	r0, r8
 800fa92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa96:	f7fd fa63 	bl	800cf60 <realloc>
 800fa9a:	4680      	mov	r8, r0
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	f43f ad4c 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	1985      	adds	r5, r0, r6
 800faa6:	6018      	str	r0, [r3, #0]
 800faa8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800faac:	69be      	ldr	r6, [r7, #24]
 800faae:	e7bc      	b.n	800fa2a <__ssvfiscanf_r+0x836>
 800fab0:	2600      	movs	r6, #0
 800fab2:	e7ba      	b.n	800fa2a <__ssvfiscanf_r+0x836>
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f47f af37 	bne.w	800f92a <__ssvfiscanf_r+0x736>
 800fabc:	e78a      	b.n	800f9d4 <__ssvfiscanf_r+0x7e0>
 800fabe:	b1f3      	cbz	r3, 800fafe <__ssvfiscanf_r+0x90a>
 800fac0:	f107 0870 	add.w	r8, r7, #112	; 0x70
 800fac4:	6823      	ldr	r3, [r4, #0]
 800fac6:	781a      	ldrb	r2, [r3, #0]
 800fac8:	f818 2002 	ldrb.w	r2, [r8, r2]
 800facc:	b912      	cbnz	r2, 800fad4 <__ssvfiscanf_r+0x8e0>
 800face:	b99d      	cbnz	r5, 800faf8 <__ssvfiscanf_r+0x904>
 800fad0:	f7ff bbea 	b.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800fad4:	3301      	adds	r3, #1
 800fad6:	6862      	ldr	r2, [r4, #4]
 800fad8:	6023      	str	r3, [r4, #0]
 800fada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fadc:	3501      	adds	r5, #1
 800fade:	3a01      	subs	r2, #1
 800fae0:	42ab      	cmp	r3, r5
 800fae2:	6062      	str	r2, [r4, #4]
 800fae4:	d008      	beq.n	800faf8 <__ssvfiscanf_r+0x904>
 800fae6:	2a00      	cmp	r2, #0
 800fae8:	dcec      	bgt.n	800fac4 <__ssvfiscanf_r+0x8d0>
 800faea:	ee18 0a10 	vmov	r0, s16
 800faee:	4621      	mov	r1, r4
 800faf0:	f7ff fb2b 	bl	800f14a <__ssrefill_r>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d0e5      	beq.n	800fac4 <__ssvfiscanf_r+0x8d0>
 800faf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafa:	442b      	add	r3, r5
 800fafc:	e472      	b.n	800f3e4 <__ssvfiscanf_r+0x1f0>
 800fafe:	4633      	mov	r3, r6
 800fb00:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 800fb04:	f853 6b04 	ldr.w	r6, [r3], #4
 800fb08:	61bb      	str	r3, [r7, #24]
 800fb0a:	f000 8081 	beq.w	800fc10 <__ssvfiscanf_r+0xa1c>
 800fb0e:	2e00      	cmp	r6, #0
 800fb10:	f43f abca 	beq.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800fb14:	2020      	movs	r0, #32
 800fb16:	f7f6 fe1f 	bl	8006758 <malloc>
 800fb1a:	4680      	mov	r8, r0
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	f43f ac70 	beq.w	800f402 <__ssvfiscanf_r+0x20e>
 800fb22:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 800fb26:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 800fb2a:	6030      	str	r0, [r6, #0]
 800fb2c:	45a9      	cmp	r9, r5
 800fb2e:	d311      	bcc.n	800fb54 <__ssvfiscanf_r+0x960>
 800fb30:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800fb34:	429d      	cmp	r5, r3
 800fb36:	f63f ad09 	bhi.w	800f54c <__ssvfiscanf_r+0x358>
 800fb3a:	3508      	adds	r5, #8
 800fb3c:	f8db 0000 	ldr.w	r0, [fp]
 800fb40:	00a9      	lsls	r1, r5, #2
 800fb42:	f7fd fa0d 	bl	800cf60 <realloc>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f43f ad00 	beq.w	800f54c <__ssvfiscanf_r+0x358>
 800fb4c:	f8cb 0000 	str.w	r0, [fp]
 800fb50:	f8ab 5004 	strh.w	r5, [fp, #4]
 800fb54:	f8db 3000 	ldr.w	r3, [fp]
 800fb58:	f109 0201 	add.w	r2, r9, #1
 800fb5c:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800fb60:	46b2      	mov	sl, r6
 800fb62:	f8ab 2006 	strh.w	r2, [fp, #6]
 800fb66:	4646      	mov	r6, r8
 800fb68:	2520      	movs	r5, #32
 800fb6a:	46b0      	mov	r8, r6
 800fb6c:	f107 0970 	add.w	r9, r7, #112	; 0x70
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	781a      	ldrb	r2, [r3, #0]
 800fb74:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fb78:	b36a      	cbz	r2, 800fbd6 <__ssvfiscanf_r+0x9e2>
 800fb7a:	6862      	ldr	r2, [r4, #4]
 800fb7c:	3a01      	subs	r2, #1
 800fb7e:	6062      	str	r2, [r4, #4]
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	6022      	str	r2, [r4, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f806 3b01 	strb.w	r3, [r6], #1
 800fb8a:	f1ba 0f00 	cmp.w	sl, #0
 800fb8e:	d011      	beq.n	800fbb4 <__ssvfiscanf_r+0x9c0>
 800fb90:	eba6 0308 	sub.w	r3, r6, r8
 800fb94:	42ab      	cmp	r3, r5
 800fb96:	d30d      	bcc.n	800fbb4 <__ssvfiscanf_r+0x9c0>
 800fb98:	006d      	lsls	r5, r5, #1
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	f7fd f9de 	bl	800cf60 <realloc>
 800fba4:	4680      	mov	r8, r0
 800fba6:	2800      	cmp	r0, #0
 800fba8:	f43f ac2b 	beq.w	800f402 <__ssvfiscanf_r+0x20e>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f8ca 0000 	str.w	r0, [sl]
 800fbb2:	18c6      	adds	r6, r0, r3
 800fbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbba:	d00c      	beq.n	800fbd6 <__ssvfiscanf_r+0x9e2>
 800fbbc:	6863      	ldr	r3, [r4, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	dcd6      	bgt.n	800fb70 <__ssvfiscanf_r+0x97c>
 800fbc2:	ee18 0a10 	vmov	r0, s16
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	f7ff fabf 	bl	800f14a <__ssrefill_r>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0cf      	beq.n	800fb70 <__ssvfiscanf_r+0x97c>
 800fbd0:	4546      	cmp	r6, r8
 800fbd2:	f43f ac10 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800fbd6:	ebb6 0808 	subs.w	r8, r6, r8
 800fbda:	f43f ab65 	beq.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	7033      	strb	r3, [r6, #0]
 800fbe2:	f1ba 0f00 	cmp.w	sl, #0
 800fbe6:	d00a      	beq.n	800fbfe <__ssvfiscanf_r+0xa0a>
 800fbe8:	f108 0101 	add.w	r1, r8, #1
 800fbec:	428d      	cmp	r5, r1
 800fbee:	d906      	bls.n	800fbfe <__ssvfiscanf_r+0xa0a>
 800fbf0:	f8da 0000 	ldr.w	r0, [sl]
 800fbf4:	f7fd f9b4 	bl	800cf60 <realloc>
 800fbf8:	b108      	cbz	r0, 800fbfe <__ssvfiscanf_r+0xa0a>
 800fbfa:	f8ca 0000 	str.w	r0, [sl]
 800fbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc00:	3301      	adds	r3, #1
 800fc02:	627b      	str	r3, [r7, #36]	; 0x24
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	4443      	add	r3, r8
 800fc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc0a:	69be      	ldr	r6, [r7, #24]
 800fc0c:	f7ff bb0f 	b.w	800f22e <__ssvfiscanf_r+0x3a>
 800fc10:	46aa      	mov	sl, r5
 800fc12:	e7aa      	b.n	800fb6a <__ssvfiscanf_r+0x976>
 800fc14:	200008c0 	.word	0x200008c0
 800fc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	bf08      	it	eq
 800fc1e:	f04f 33ff 	moveq.w	r3, #4294967295
 800fc22:	f019 0501 	ands.w	r5, r9, #1
 800fc26:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc28:	f009 0810 	and.w	r8, r9, #16
 800fc2c:	f000 80f5 	beq.w	800fe1a <__ssvfiscanf_r+0xc26>
 800fc30:	f1b8 0f00 	cmp.w	r8, #0
 800fc34:	f040 809a 	bne.w	800fd6c <__ssvfiscanf_r+0xb78>
 800fc38:	4633      	mov	r3, r6
 800fc3a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800fc3e:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc42:	61bb      	str	r3, [r7, #24]
 800fc44:	f000 809a 	beq.w	800fd7c <__ssvfiscanf_r+0xb88>
 800fc48:	2d00      	cmp	r5, #0
 800fc4a:	f43f ac79 	beq.w	800f540 <__ssvfiscanf_r+0x34c>
 800fc4e:	2080      	movs	r0, #128	; 0x80
 800fc50:	f7f6 fd82 	bl	8006758 <malloc>
 800fc54:	4606      	mov	r6, r0
 800fc56:	2800      	cmp	r0, #0
 800fc58:	f43f ac6f 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800fc5c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800fc60:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800fc64:	6028      	str	r0, [r5, #0]
 800fc66:	45ca      	cmp	sl, r9
 800fc68:	d313      	bcc.n	800fc92 <__ssvfiscanf_r+0xa9e>
 800fc6a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800fc6e:	4599      	cmp	r9, r3
 800fc70:	f63f ac63 	bhi.w	800f53a <__ssvfiscanf_r+0x346>
 800fc74:	f109 0908 	add.w	r9, r9, #8
 800fc78:	f8db 0000 	ldr.w	r0, [fp]
 800fc7c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800fc80:	f7fd f96e 	bl	800cf60 <realloc>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	f43f ac58 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800fc8a:	f8cb 0000 	str.w	r0, [fp]
 800fc8e:	f8ab 9004 	strh.w	r9, [fp, #4]
 800fc92:	f8db 3000 	ldr.w	r3, [fp]
 800fc96:	f10a 0201 	add.w	r2, sl, #1
 800fc9a:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800fc9e:	f8ab 2006 	strh.w	r2, [fp, #6]
 800fca2:	46aa      	mov	sl, r5
 800fca4:	f04f 0920 	mov.w	r9, #32
 800fca8:	4635      	mov	r5, r6
 800fcaa:	2200      	movs	r2, #0
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	49ab      	ldr	r1, [pc, #684]	; (800ff5c <__ssvfiscanf_r+0xd68>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	5c5b      	ldrb	r3, [r3, r1]
 800fcb4:	0718      	lsls	r0, r3, #28
 800fcb6:	d43f      	bmi.n	800fd38 <__ssvfiscanf_r+0xb44>
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d03c      	beq.n	800fd38 <__ssvfiscanf_r+0xb44>
 800fcbe:	60fa      	str	r2, [r7, #12]
 800fcc0:	f7fc fc16 	bl	800c4f0 <__locale_mb_cur_max>
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	4290      	cmp	r0, r2
 800fcc8:	f43f ab95 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800fccc:	6821      	ldr	r1, [r4, #0]
 800fcce:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800fcd2:	f811 0b01 	ldrb.w	r0, [r1], #1
 800fcd6:	f80c 0002 	strb.w	r0, [ip, r2]
 800fcda:	1c53      	adds	r3, r2, #1
 800fcdc:	6862      	ldr	r2, [r4, #4]
 800fcde:	3a01      	subs	r2, #1
 800fce0:	e9c4 1200 	strd	r1, r2, [r4]
 800fce4:	6a3a      	ldr	r2, [r7, #32]
 800fce6:	2a03      	cmp	r2, #3
 800fce8:	d102      	bne.n	800fcf0 <__ssvfiscanf_r+0xafc>
 800fcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcec:	2a04      	cmp	r2, #4
 800fcee:	d007      	beq.n	800fd00 <__ssvfiscanf_r+0xb0c>
 800fcf0:	2208      	movs	r2, #8
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800fcf8:	623b      	str	r3, [r7, #32]
 800fcfa:	f7f6 ff7f 	bl	8006bfc <memset>
 800fcfe:	6a3b      	ldr	r3, [r7, #32]
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fd06:	9200      	str	r2, [sp, #0]
 800fd08:	ee18 0a10 	vmov	r0, s16
 800fd0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7fc fc63 	bl	800c5dc <_mbrtowc_r>
 800fd16:	1c42      	adds	r2, r0, #1
 800fd18:	6238      	str	r0, [r7, #32]
 800fd1a:	f43f ab6c 	beq.w	800f3f6 <__ssvfiscanf_r+0x202>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	bb80      	cbnz	r0, 800fd84 <__ssvfiscanf_r+0xb90>
 800fd22:	6028      	str	r0, [r5, #0]
 800fd24:	6828      	ldr	r0, [r5, #0]
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	f7fc fbd4 	bl	800c4d4 <iswspace>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4602      	mov	r2, r0
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d047      	beq.n	800fdc4 <__ssvfiscanf_r+0xbd0>
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d139      	bne.n	800fdac <__ssvfiscanf_r+0xbb8>
 800fd38:	f1b8 0f00 	cmp.w	r8, #0
 800fd3c:	f47f af65 	bne.w	800fc0a <__ssvfiscanf_r+0xa16>
 800fd40:	f8c5 8000 	str.w	r8, [r5]
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	d00c      	beq.n	800fd64 <__ssvfiscanf_r+0xb70>
 800fd4a:	1ba9      	subs	r1, r5, r6
 800fd4c:	108b      	asrs	r3, r1, #2
 800fd4e:	3301      	adds	r3, #1
 800fd50:	4599      	cmp	r9, r3
 800fd52:	d907      	bls.n	800fd64 <__ssvfiscanf_r+0xb70>
 800fd54:	f8da 0000 	ldr.w	r0, [sl]
 800fd58:	3104      	adds	r1, #4
 800fd5a:	f7fd f901 	bl	800cf60 <realloc>
 800fd5e:	b108      	cbz	r0, 800fd64 <__ssvfiscanf_r+0xb70>
 800fd60:	f8ca 0000 	str.w	r0, [sl]
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	3301      	adds	r3, #1
 800fd68:	627b      	str	r3, [r7, #36]	; 0x24
 800fd6a:	e74e      	b.n	800fc0a <__ssvfiscanf_r+0xa16>
 800fd6c:	f04f 0900 	mov.w	r9, #0
 800fd70:	61be      	str	r6, [r7, #24]
 800fd72:	46ca      	mov	sl, r9
 800fd74:	464e      	mov	r6, r9
 800fd76:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800fd7a:	e796      	b.n	800fcaa <__ssvfiscanf_r+0xab6>
 800fd7c:	46c1      	mov	r9, r8
 800fd7e:	4646      	mov	r6, r8
 800fd80:	46c2      	mov	sl, r8
 800fd82:	e792      	b.n	800fcaa <__ssvfiscanf_r+0xab6>
 800fd84:	6a3a      	ldr	r2, [r7, #32]
 800fd86:	3202      	adds	r2, #2
 800fd88:	d1cc      	bne.n	800fd24 <__ssvfiscanf_r+0xb30>
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	6863      	ldr	r3, [r4, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	dc8c      	bgt.n	800fcac <__ssvfiscanf_r+0xab8>
 800fd92:	ee18 0a10 	vmov	r0, s16
 800fd96:	4621      	mov	r1, r4
 800fd98:	60fa      	str	r2, [r7, #12]
 800fd9a:	f7ff f9d6 	bl	800f14a <__ssrefill_r>
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d083      	beq.n	800fcac <__ssvfiscanf_r+0xab8>
 800fda4:	2a00      	cmp	r2, #0
 800fda6:	f47f ab26 	bne.w	800f3f6 <__ssvfiscanf_r+0x202>
 800fdaa:	e7c5      	b.n	800fd38 <__ssvfiscanf_r+0xb44>
 800fdac:	3b01      	subs	r3, #1
 800fdae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800fdb2:	ee18 0a10 	vmov	r0, s16
 800fdb6:	5cc9      	ldrb	r1, [r1, r3]
 800fdb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdba:	4622      	mov	r2, r4
 800fdbc:	f7ff f988 	bl	800f0d0 <_sungetc_r>
 800fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc2:	e7b7      	b.n	800fd34 <__ssvfiscanf_r+0xb40>
 800fdc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdc6:	4419      	add	r1, r3
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d102      	bne.n	800fdd6 <__ssvfiscanf_r+0xbe2>
 800fdd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdd2:	2b04      	cmp	r3, #4
 800fdd4:	d002      	beq.n	800fddc <__ssvfiscanf_r+0xbe8>
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	62bb      	str	r3, [r7, #40]	; 0x28
 800fddc:	f1b8 0f00 	cmp.w	r8, #0
 800fde0:	d1d4      	bne.n	800fd8c <__ssvfiscanf_r+0xb98>
 800fde2:	3504      	adds	r5, #4
 800fde4:	f1ba 0f00 	cmp.w	sl, #0
 800fde8:	d015      	beq.n	800fe16 <__ssvfiscanf_r+0xc22>
 800fdea:	1bab      	subs	r3, r5, r6
 800fdec:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800fdf0:	d80f      	bhi.n	800fe12 <__ssvfiscanf_r+0xc1e>
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdf8:	60fb      	str	r3, [r7, #12]
 800fdfa:	f7fd f8b1 	bl	800cf60 <realloc>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	2800      	cmp	r0, #0
 800fe02:	f43f ab9a 	beq.w	800f53a <__ssvfiscanf_r+0x346>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f8ca 0000 	str.w	r0, [sl]
 800fe0c:	18c5      	adds	r5, r0, r3
 800fe0e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fe12:	4642      	mov	r2, r8
 800fe14:	e7ba      	b.n	800fd8c <__ssvfiscanf_r+0xb98>
 800fe16:	4652      	mov	r2, sl
 800fe18:	e7b8      	b.n	800fd8c <__ssvfiscanf_r+0xb98>
 800fe1a:	f1b8 0f00 	cmp.w	r8, #0
 800fe1e:	d01a      	beq.n	800fe56 <__ssvfiscanf_r+0xc62>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	494e      	ldr	r1, [pc, #312]	; (800ff5c <__ssvfiscanf_r+0xd68>)
 800fe24:	781a      	ldrb	r2, [r3, #0]
 800fe26:	5c52      	ldrb	r2, [r2, r1]
 800fe28:	0711      	lsls	r1, r2, #28
 800fe2a:	f53f ae65 	bmi.w	800faf8 <__ssvfiscanf_r+0x904>
 800fe2e:	3301      	adds	r3, #1
 800fe30:	6862      	ldr	r2, [r4, #4]
 800fe32:	6023      	str	r3, [r4, #0]
 800fe34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe36:	3501      	adds	r5, #1
 800fe38:	3a01      	subs	r2, #1
 800fe3a:	42ab      	cmp	r3, r5
 800fe3c:	6062      	str	r2, [r4, #4]
 800fe3e:	f43f ae5b 	beq.w	800faf8 <__ssvfiscanf_r+0x904>
 800fe42:	2a00      	cmp	r2, #0
 800fe44:	dcec      	bgt.n	800fe20 <__ssvfiscanf_r+0xc2c>
 800fe46:	ee18 0a10 	vmov	r0, s16
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f7ff f97d 	bl	800f14a <__ssrefill_r>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d0e5      	beq.n	800fe20 <__ssvfiscanf_r+0xc2c>
 800fe54:	e650      	b.n	800faf8 <__ssvfiscanf_r+0x904>
 800fe56:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800fe5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800fe5e:	d07b      	beq.n	800ff58 <__ssvfiscanf_r+0xd64>
 800fe60:	2d00      	cmp	r5, #0
 800fe62:	f43f aa21 	beq.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800fe66:	2020      	movs	r0, #32
 800fe68:	f7f6 fc76 	bl	8006758 <malloc>
 800fe6c:	4681      	mov	r9, r0
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f43f aac7 	beq.w	800f402 <__ssvfiscanf_r+0x20e>
 800fe74:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800fe78:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 800fe7c:	6028      	str	r0, [r5, #0]
 800fe7e:	45c2      	cmp	sl, r8
 800fe80:	d313      	bcc.n	800feaa <__ssvfiscanf_r+0xcb6>
 800fe82:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800fe86:	4598      	cmp	r8, r3
 800fe88:	f63f ab60 	bhi.w	800f54c <__ssvfiscanf_r+0x358>
 800fe8c:	f108 0808 	add.w	r8, r8, #8
 800fe90:	f8db 0000 	ldr.w	r0, [fp]
 800fe94:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800fe98:	f7fd f862 	bl	800cf60 <realloc>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f43f ab55 	beq.w	800f54c <__ssvfiscanf_r+0x358>
 800fea2:	f8cb 0000 	str.w	r0, [fp]
 800fea6:	f8ab 8004 	strh.w	r8, [fp, #4]
 800feaa:	f8db 3000 	ldr.w	r3, [fp]
 800feae:	f10a 0201 	add.w	r2, sl, #1
 800feb2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800feb6:	f8ab 2006 	strh.w	r2, [fp, #6]
 800feba:	46aa      	mov	sl, r5
 800febc:	464d      	mov	r5, r9
 800febe:	f04f 0920 	mov.w	r9, #32
 800fec2:	46a8      	mov	r8, r5
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	4925      	ldr	r1, [pc, #148]	; (800ff5c <__ssvfiscanf_r+0xd68>)
 800fec8:	781a      	ldrb	r2, [r3, #0]
 800feca:	5c52      	ldrb	r2, [r2, r1]
 800fecc:	0712      	lsls	r2, r2, #28
 800fece:	d42b      	bmi.n	800ff28 <__ssvfiscanf_r+0xd34>
 800fed0:	6862      	ldr	r2, [r4, #4]
 800fed2:	3a01      	subs	r2, #1
 800fed4:	6062      	str	r2, [r4, #4]
 800fed6:	1c5a      	adds	r2, r3, #1
 800fed8:	6022      	str	r2, [r4, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	f805 3b01 	strb.w	r3, [r5], #1
 800fee0:	f1ba 0f00 	cmp.w	sl, #0
 800fee4:	d012      	beq.n	800ff0c <__ssvfiscanf_r+0xd18>
 800fee6:	eba5 0308 	sub.w	r3, r5, r8
 800feea:	454b      	cmp	r3, r9
 800feec:	d30e      	bcc.n	800ff0c <__ssvfiscanf_r+0xd18>
 800feee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fef2:	4640      	mov	r0, r8
 800fef4:	4649      	mov	r1, r9
 800fef6:	61bb      	str	r3, [r7, #24]
 800fef8:	f7fd f832 	bl	800cf60 <realloc>
 800fefc:	4680      	mov	r8, r0
 800fefe:	2800      	cmp	r0, #0
 800ff00:	f43f aa7f 	beq.w	800f402 <__ssvfiscanf_r+0x20e>
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	f8ca 0000 	str.w	r0, [sl]
 800ff0a:	18c5      	adds	r5, r0, r3
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff12:	d009      	beq.n	800ff28 <__ssvfiscanf_r+0xd34>
 800ff14:	6863      	ldr	r3, [r4, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	dcd4      	bgt.n	800fec4 <__ssvfiscanf_r+0xcd0>
 800ff1a:	ee18 0a10 	vmov	r0, s16
 800ff1e:	4621      	mov	r1, r4
 800ff20:	f7ff f913 	bl	800f14a <__ssrefill_r>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d0cd      	beq.n	800fec4 <__ssvfiscanf_r+0xcd0>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	702b      	strb	r3, [r5, #0]
 800ff2c:	eba5 0508 	sub.w	r5, r5, r8
 800ff30:	f1ba 0f00 	cmp.w	sl, #0
 800ff34:	d009      	beq.n	800ff4a <__ssvfiscanf_r+0xd56>
 800ff36:	1c69      	adds	r1, r5, #1
 800ff38:	4589      	cmp	r9, r1
 800ff3a:	d906      	bls.n	800ff4a <__ssvfiscanf_r+0xd56>
 800ff3c:	f8da 0000 	ldr.w	r0, [sl]
 800ff40:	f7fd f80e 	bl	800cf60 <realloc>
 800ff44:	b108      	cbz	r0, 800ff4a <__ssvfiscanf_r+0xd56>
 800ff46:	f8ca 0000 	str.w	r0, [sl]
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	442b      	add	r3, r5
 800ff4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	3301      	adds	r3, #1
 800ff54:	f7ff b96a 	b.w	800f22c <__ssvfiscanf_r+0x38>
 800ff58:	46ca      	mov	sl, r9
 800ff5a:	e7b2      	b.n	800fec2 <__ssvfiscanf_r+0xcce>
 800ff5c:	08011d92 	.word	0x08011d92
 800ff60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff62:	3b01      	subs	r3, #1
 800ff64:	2b26      	cmp	r3, #38	; 0x26
 800ff66:	bf81      	itttt	hi
 800ff68:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 800ff6a:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 800ff6e:	2327      	movhi	r3, #39	; 0x27
 800ff70:	62bb      	strhi	r3, [r7, #40]	; 0x28
 800ff72:	bf98      	it	ls
 800ff74:	2500      	movls	r5, #0
 800ff76:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 800ff7a:	f04f 0a00 	mov.w	sl, #0
 800ff7e:	f107 0848 	add.w	r8, r7, #72	; 0x48
 800ff82:	6822      	ldr	r2, [r4, #0]
 800ff84:	7813      	ldrb	r3, [r2, #0]
 800ff86:	2b39      	cmp	r3, #57	; 0x39
 800ff88:	d80f      	bhi.n	800ffaa <__ssvfiscanf_r+0xdb6>
 800ff8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff8c:	d91a      	bls.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 800ff8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ff92:	290e      	cmp	r1, #14
 800ff94:	d816      	bhi.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 800ff96:	e8df f001 	tbb	[pc, r1]
 800ff9a:	1577      	.short	0x1577
 800ff9c:	41151577 	.word	0x41151577
 800ffa0:	67676767 	.word	0x67676767
 800ffa4:	6f676767 	.word	0x6f676767
 800ffa8:	6f          	.byte	0x6f
 800ffa9:	00          	.byte	0x00
 800ffaa:	2b66      	cmp	r3, #102	; 0x66
 800ffac:	d834      	bhi.n	8010018 <__ssvfiscanf_r+0xe24>
 800ffae:	2b60      	cmp	r3, #96	; 0x60
 800ffb0:	d803      	bhi.n	800ffba <__ssvfiscanf_r+0xdc6>
 800ffb2:	2b46      	cmp	r3, #70	; 0x46
 800ffb4:	d804      	bhi.n	800ffc0 <__ssvfiscanf_r+0xdcc>
 800ffb6:	2b40      	cmp	r3, #64	; 0x40
 800ffb8:	d904      	bls.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 800ffba:	69f9      	ldr	r1, [r7, #28]
 800ffbc:	290a      	cmp	r1, #10
 800ffbe:	e061      	b.n	8010084 <__ssvfiscanf_r+0xe90>
 800ffc0:	2b58      	cmp	r3, #88	; 0x58
 800ffc2:	d067      	beq.n	8010094 <__ssvfiscanf_r+0xea0>
 800ffc4:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ffc8:	d012      	beq.n	800fff0 <__ssvfiscanf_r+0xdfc>
 800ffca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffce:	4598      	cmp	r8, r3
 800ffd0:	d909      	bls.n	800ffe6 <__ssvfiscanf_r+0xdf2>
 800ffd2:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800ffd6:	ee18 0a10 	vmov	r0, s16
 800ffda:	4622      	mov	r2, r4
 800ffdc:	f7ff f878 	bl	800f0d0 <_sungetc_r>
 800ffe0:	f108 35ff 	add.w	r5, r8, #4294967295
 800ffe4:	46a8      	mov	r8, r5
 800ffe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffea:	4598      	cmp	r8, r3
 800ffec:	f43f a95c 	beq.w	800f2a8 <__ssvfiscanf_r+0xb4>
 800fff0:	f019 0210 	ands.w	r2, r9, #16
 800fff4:	d16b      	bne.n	80100ce <__ssvfiscanf_r+0xeda>
 800fff6:	697d      	ldr	r5, [r7, #20]
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	f888 2000 	strb.w	r2, [r8]
 800fffe:	ee18 0a10 	vmov	r0, s16
 8010002:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010006:	47a8      	blx	r5
 8010008:	f019 0f20 	tst.w	r9, #32
 801000c:	f106 0504 	add.w	r5, r6, #4
 8010010:	d054      	beq.n	80100bc <__ssvfiscanf_r+0xec8>
 8010012:	6833      	ldr	r3, [r6, #0]
 8010014:	6018      	str	r0, [r3, #0]
 8010016:	e056      	b.n	80100c6 <__ssvfiscanf_r+0xed2>
 8010018:	2b78      	cmp	r3, #120	; 0x78
 801001a:	e7d2      	b.n	800ffc2 <__ssvfiscanf_r+0xdce>
 801001c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8010020:	d00a      	beq.n	8010038 <__ssvfiscanf_r+0xe44>
 8010022:	69f9      	ldr	r1, [r7, #28]
 8010024:	b919      	cbnz	r1, 801002e <__ssvfiscanf_r+0xe3a>
 8010026:	2108      	movs	r1, #8
 8010028:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 801002c:	61f9      	str	r1, [r7, #28]
 801002e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8010032:	d004      	beq.n	801003e <__ssvfiscanf_r+0xe4a>
 8010034:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8010038:	f808 3b01 	strb.w	r3, [r8], #1
 801003c:	e008      	b.n	8010050 <__ssvfiscanf_r+0xe5c>
 801003e:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8010042:	b11d      	cbz	r5, 801004c <__ssvfiscanf_r+0xe58>
 8010044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010046:	3301      	adds	r3, #1
 8010048:	3d01      	subs	r5, #1
 801004a:	62bb      	str	r3, [r7, #40]	; 0x28
 801004c:	f10a 0a01 	add.w	sl, sl, #1
 8010050:	6863      	ldr	r3, [r4, #4]
 8010052:	3b01      	subs	r3, #1
 8010054:	2b00      	cmp	r3, #0
 8010056:	6063      	str	r3, [r4, #4]
 8010058:	dd28      	ble.n	80100ac <__ssvfiscanf_r+0xeb8>
 801005a:	3201      	adds	r2, #1
 801005c:	6022      	str	r2, [r4, #0]
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	3b01      	subs	r3, #1
 8010062:	62bb      	str	r3, [r7, #40]	; 0x28
 8010064:	d18d      	bne.n	800ff82 <__ssvfiscanf_r+0xd8e>
 8010066:	e7ad      	b.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 8010068:	69f8      	ldr	r0, [r7, #28]
 801006a:	4932      	ldr	r1, [pc, #200]	; (8010134 <__ssvfiscanf_r+0xf40>)
 801006c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8010070:	61f9      	str	r1, [r7, #28]
 8010072:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8010076:	e7df      	b.n	8010038 <__ssvfiscanf_r+0xe44>
 8010078:	69f8      	ldr	r0, [r7, #28]
 801007a:	492e      	ldr	r1, [pc, #184]	; (8010134 <__ssvfiscanf_r+0xf40>)
 801007c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8010080:	61f9      	str	r1, [r7, #28]
 8010082:	2908      	cmp	r1, #8
 8010084:	dcf5      	bgt.n	8010072 <__ssvfiscanf_r+0xe7e>
 8010086:	e79d      	b.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 8010088:	f019 0f80 	tst.w	r9, #128	; 0x80
 801008c:	d09a      	beq.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 801008e:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8010092:	e7d1      	b.n	8010038 <__ssvfiscanf_r+0xe44>
 8010094:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8010098:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801009c:	d192      	bne.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 801009e:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 80100a2:	2110      	movs	r1, #16
 80100a4:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 80100a8:	61f9      	str	r1, [r7, #28]
 80100aa:	e7c5      	b.n	8010038 <__ssvfiscanf_r+0xe44>
 80100ac:	ee18 0a10 	vmov	r0, s16
 80100b0:	4621      	mov	r1, r4
 80100b2:	f7ff f84a 	bl	800f14a <__ssrefill_r>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d0d1      	beq.n	801005e <__ssvfiscanf_r+0xe6a>
 80100ba:	e783      	b.n	800ffc4 <__ssvfiscanf_r+0xdd0>
 80100bc:	f019 0f08 	tst.w	r9, #8
 80100c0:	d00e      	beq.n	80100e0 <__ssvfiscanf_r+0xeec>
 80100c2:	6833      	ldr	r3, [r6, #0]
 80100c4:	7018      	strb	r0, [r3, #0]
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	3301      	adds	r3, #1
 80100ca:	627b      	str	r3, [r7, #36]	; 0x24
 80100cc:	462e      	mov	r6, r5
 80100ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100d2:	eba8 0803 	sub.w	r8, r8, r3
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	44c2      	add	sl, r8
 80100da:	4453      	add	r3, sl
 80100dc:	f7ff b982 	b.w	800f3e4 <__ssvfiscanf_r+0x1f0>
 80100e0:	f019 0f04 	tst.w	r9, #4
 80100e4:	d002      	beq.n	80100ec <__ssvfiscanf_r+0xef8>
 80100e6:	6833      	ldr	r3, [r6, #0]
 80100e8:	8018      	strh	r0, [r3, #0]
 80100ea:	e7ec      	b.n	80100c6 <__ssvfiscanf_r+0xed2>
 80100ec:	f019 0201 	ands.w	r2, r9, #1
 80100f0:	d18f      	bne.n	8010012 <__ssvfiscanf_r+0xe1e>
 80100f2:	f019 0f02 	tst.w	r9, #2
 80100f6:	d08c      	beq.n	8010012 <__ssvfiscanf_r+0xe1e>
 80100f8:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <__ssvfiscanf_r+0xf44>)
 80100fa:	6979      	ldr	r1, [r7, #20]
 80100fc:	4299      	cmp	r1, r3
 80100fe:	ee18 0a10 	vmov	r0, s16
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010108:	d105      	bne.n	8010116 <__ssvfiscanf_r+0xf22>
 801010a:	f7fe fb25 	bl	800e758 <_strtoull_r>
 801010e:	6833      	ldr	r3, [r6, #0]
 8010110:	e9c3 0100 	strd	r0, r1, [r3]
 8010114:	e7d7      	b.n	80100c6 <__ssvfiscanf_r+0xed2>
 8010116:	f7fe f9fb 	bl	800e510 <_strtoll_r>
 801011a:	e7f8      	b.n	801010e <__ssvfiscanf_r+0xf1a>
 801011c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	f7f6 fb21 	bl	8006768 <free>
 8010126:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801012a:	3401      	adds	r4, #1
 801012c:	601e      	str	r6, [r3, #0]
 801012e:	f7ff ba0f 	b.w	800f550 <__ssvfiscanf_r+0x35c>
 8010132:	bf00      	nop
 8010134:	080120f0 	.word	0x080120f0
 8010138:	0800e60d 	.word	0x0800e60d

0801013c <__submore>:
 801013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010140:	460c      	mov	r4, r1
 8010142:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8010144:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010148:	4299      	cmp	r1, r3
 801014a:	d11d      	bne.n	8010188 <__submore+0x4c>
 801014c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010150:	f7f6 fb12 	bl	8006778 <_malloc_r>
 8010154:	b918      	cbnz	r0, 801015e <__submore+0x22>
 8010156:	f04f 30ff 	mov.w	r0, #4294967295
 801015a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010162:	6363      	str	r3, [r4, #52]	; 0x34
 8010164:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8010168:	6320      	str	r0, [r4, #48]	; 0x30
 801016a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801016e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8010172:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010176:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801017a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801017e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010182:	6020      	str	r0, [r4, #0]
 8010184:	2000      	movs	r0, #0
 8010186:	e7e8      	b.n	801015a <__submore+0x1e>
 8010188:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801018a:	0077      	lsls	r7, r6, #1
 801018c:	463a      	mov	r2, r7
 801018e:	f7fc feef 	bl	800cf70 <_realloc_r>
 8010192:	4605      	mov	r5, r0
 8010194:	2800      	cmp	r0, #0
 8010196:	d0de      	beq.n	8010156 <__submore+0x1a>
 8010198:	eb00 0806 	add.w	r8, r0, r6
 801019c:	4601      	mov	r1, r0
 801019e:	4632      	mov	r2, r6
 80101a0:	4640      	mov	r0, r8
 80101a2:	f7fc fa47 	bl	800c634 <memcpy>
 80101a6:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 80101aa:	f8c4 8000 	str.w	r8, [r4]
 80101ae:	e7e9      	b.n	8010184 <__submore+0x48>

080101b0 <_ungetc_r>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	460d      	mov	r5, r1
 80101b4:	1c69      	adds	r1, r5, #1
 80101b6:	4606      	mov	r6, r0
 80101b8:	4614      	mov	r4, r2
 80101ba:	d103      	bne.n	80101c4 <_ungetc_r+0x14>
 80101bc:	f04f 35ff 	mov.w	r5, #4294967295
 80101c0:	4628      	mov	r0, r5
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	b118      	cbz	r0, 80101ce <_ungetc_r+0x1e>
 80101c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80101c8:	b90b      	cbnz	r3, 80101ce <_ungetc_r+0x1e>
 80101ca:	f7fb fe51 	bl	800be70 <__sinit>
 80101ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101d0:	07da      	lsls	r2, r3, #31
 80101d2:	d405      	bmi.n	80101e0 <_ungetc_r+0x30>
 80101d4:	89a3      	ldrh	r3, [r4, #12]
 80101d6:	059b      	lsls	r3, r3, #22
 80101d8:	d402      	bmi.n	80101e0 <_ungetc_r+0x30>
 80101da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101dc:	f7f6 fab9 	bl	8006752 <__retarget_lock_acquire_recursive>
 80101e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101e4:	0498      	lsls	r0, r3, #18
 80101e6:	d406      	bmi.n	80101f6 <_ungetc_r+0x46>
 80101e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80101ec:	81a3      	strh	r3, [r4, #12]
 80101ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101f4:	6663      	str	r3, [r4, #100]	; 0x64
 80101f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101fa:	f023 0320 	bic.w	r3, r3, #32
 80101fe:	0759      	lsls	r1, r3, #29
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	b29a      	uxth	r2, r3
 8010204:	d423      	bmi.n	801024e <_ungetc_r+0x9e>
 8010206:	06d3      	lsls	r3, r2, #27
 8010208:	d409      	bmi.n	801021e <_ungetc_r+0x6e>
 801020a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801020c:	07dd      	lsls	r5, r3, #31
 801020e:	d4d5      	bmi.n	80101bc <_ungetc_r+0xc>
 8010210:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010214:	d1d2      	bne.n	80101bc <_ungetc_r+0xc>
 8010216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010218:	f7f6 fa9d 	bl	8006756 <__retarget_lock_release_recursive>
 801021c:	e7ce      	b.n	80101bc <_ungetc_r+0xc>
 801021e:	0710      	lsls	r0, r2, #28
 8010220:	d511      	bpl.n	8010246 <_ungetc_r+0x96>
 8010222:	4621      	mov	r1, r4
 8010224:	4630      	mov	r0, r6
 8010226:	f7fb fda5 	bl	800bd74 <_fflush_r>
 801022a:	b130      	cbz	r0, 801023a <_ungetc_r+0x8a>
 801022c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801022e:	07d9      	lsls	r1, r3, #31
 8010230:	d4c4      	bmi.n	80101bc <_ungetc_r+0xc>
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010238:	e7ec      	b.n	8010214 <_ungetc_r+0x64>
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	60a0      	str	r0, [r4, #8]
 801023e:	f023 0308 	bic.w	r3, r3, #8
 8010242:	81a3      	strh	r3, [r4, #12]
 8010244:	61a0      	str	r0, [r4, #24]
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	f043 0304 	orr.w	r3, r3, #4
 801024c:	81a3      	strh	r3, [r4, #12]
 801024e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010250:	6862      	ldr	r2, [r4, #4]
 8010252:	b2ed      	uxtb	r5, r5
 8010254:	b1d3      	cbz	r3, 801028c <_ungetc_r+0xdc>
 8010256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010258:	4293      	cmp	r3, r2
 801025a:	dc05      	bgt.n	8010268 <_ungetc_r+0xb8>
 801025c:	4621      	mov	r1, r4
 801025e:	4630      	mov	r0, r6
 8010260:	f7ff ff6c 	bl	801013c <__submore>
 8010264:	2800      	cmp	r0, #0
 8010266:	d1e1      	bne.n	801022c <_ungetc_r+0x7c>
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	1e5a      	subs	r2, r3, #1
 801026c:	6022      	str	r2, [r4, #0]
 801026e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010272:	6863      	ldr	r3, [r4, #4]
 8010274:	3301      	adds	r3, #1
 8010276:	6063      	str	r3, [r4, #4]
 8010278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801027a:	07da      	lsls	r2, r3, #31
 801027c:	d4a0      	bmi.n	80101c0 <_ungetc_r+0x10>
 801027e:	89a3      	ldrh	r3, [r4, #12]
 8010280:	059b      	lsls	r3, r3, #22
 8010282:	d49d      	bmi.n	80101c0 <_ungetc_r+0x10>
 8010284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010286:	f7f6 fa66 	bl	8006756 <__retarget_lock_release_recursive>
 801028a:	e799      	b.n	80101c0 <_ungetc_r+0x10>
 801028c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801028e:	6920      	ldr	r0, [r4, #16]
 8010290:	6823      	ldr	r3, [r4, #0]
 8010292:	f001 0101 	and.w	r1, r1, #1
 8010296:	b160      	cbz	r0, 80102b2 <_ungetc_r+0x102>
 8010298:	4298      	cmp	r0, r3
 801029a:	d20a      	bcs.n	80102b2 <_ungetc_r+0x102>
 801029c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80102a0:	4285      	cmp	r5, r0
 80102a2:	d106      	bne.n	80102b2 <_ungetc_r+0x102>
 80102a4:	3b01      	subs	r3, #1
 80102a6:	3201      	adds	r2, #1
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	6062      	str	r2, [r4, #4]
 80102ac:	2900      	cmp	r1, #0
 80102ae:	d187      	bne.n	80101c0 <_ungetc_r+0x10>
 80102b0:	e7e5      	b.n	801027e <_ungetc_r+0xce>
 80102b2:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 80102b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80102ba:	6323      	str	r3, [r4, #48]	; 0x30
 80102bc:	2303      	movs	r3, #3
 80102be:	6363      	str	r3, [r4, #52]	; 0x34
 80102c0:	4623      	mov	r3, r4
 80102c2:	f803 5f42 	strb.w	r5, [r3, #66]!
 80102c6:	6023      	str	r3, [r4, #0]
 80102c8:	2301      	movs	r3, #1
 80102ca:	6063      	str	r3, [r4, #4]
 80102cc:	e7ee      	b.n	80102ac <_ungetc_r+0xfc>

080102ce <__sprint_r>:
 80102ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d2:	6893      	ldr	r3, [r2, #8]
 80102d4:	4680      	mov	r8, r0
 80102d6:	460f      	mov	r7, r1
 80102d8:	4614      	mov	r4, r2
 80102da:	b91b      	cbnz	r3, 80102e4 <__sprint_r+0x16>
 80102dc:	6053      	str	r3, [r2, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80102e6:	049d      	lsls	r5, r3, #18
 80102e8:	d520      	bpl.n	801032c <__sprint_r+0x5e>
 80102ea:	6815      	ldr	r5, [r2, #0]
 80102ec:	3508      	adds	r5, #8
 80102ee:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80102f2:	f04f 0900 	mov.w	r9, #0
 80102f6:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80102fa:	45ca      	cmp	sl, r9
 80102fc:	dc0b      	bgt.n	8010316 <__sprint_r+0x48>
 80102fe:	68a3      	ldr	r3, [r4, #8]
 8010300:	f026 0003 	bic.w	r0, r6, #3
 8010304:	1a18      	subs	r0, r3, r0
 8010306:	60a0      	str	r0, [r4, #8]
 8010308:	3508      	adds	r5, #8
 801030a:	2800      	cmp	r0, #0
 801030c:	d1ef      	bne.n	80102ee <__sprint_r+0x20>
 801030e:	2300      	movs	r3, #0
 8010310:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010314:	e7e4      	b.n	80102e0 <__sprint_r+0x12>
 8010316:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801031a:	463a      	mov	r2, r7
 801031c:	4640      	mov	r0, r8
 801031e:	f000 fe44 	bl	8010faa <_fputwc_r>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	d0f3      	beq.n	801030e <__sprint_r+0x40>
 8010326:	f109 0901 	add.w	r9, r9, #1
 801032a:	e7e6      	b.n	80102fa <__sprint_r+0x2c>
 801032c:	f7fb fe44 	bl	800bfb8 <__sfvwrite_r>
 8010330:	e7ed      	b.n	801030e <__sprint_r+0x40>
	...

08010334 <_vfiprintf_r>:
 8010334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010338:	ed2d 8b02 	vpush	{d8}
 801033c:	b0b9      	sub	sp, #228	; 0xe4
 801033e:	460f      	mov	r7, r1
 8010340:	9201      	str	r2, [sp, #4]
 8010342:	461d      	mov	r5, r3
 8010344:	461c      	mov	r4, r3
 8010346:	4681      	mov	r9, r0
 8010348:	b118      	cbz	r0, 8010352 <_vfiprintf_r+0x1e>
 801034a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801034c:	b90b      	cbnz	r3, 8010352 <_vfiprintf_r+0x1e>
 801034e:	f7fb fd8f 	bl	800be70 <__sinit>
 8010352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010354:	07d8      	lsls	r0, r3, #31
 8010356:	d405      	bmi.n	8010364 <_vfiprintf_r+0x30>
 8010358:	89bb      	ldrh	r3, [r7, #12]
 801035a:	0599      	lsls	r1, r3, #22
 801035c:	d402      	bmi.n	8010364 <_vfiprintf_r+0x30>
 801035e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010360:	f7f6 f9f7 	bl	8006752 <__retarget_lock_acquire_recursive>
 8010364:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010368:	049a      	lsls	r2, r3, #18
 801036a:	d406      	bmi.n	801037a <_vfiprintf_r+0x46>
 801036c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010370:	81bb      	strh	r3, [r7, #12]
 8010372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010378:	667b      	str	r3, [r7, #100]	; 0x64
 801037a:	89bb      	ldrh	r3, [r7, #12]
 801037c:	071e      	lsls	r6, r3, #28
 801037e:	d501      	bpl.n	8010384 <_vfiprintf_r+0x50>
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	b9bb      	cbnz	r3, 80103b4 <_vfiprintf_r+0x80>
 8010384:	4639      	mov	r1, r7
 8010386:	4648      	mov	r0, r9
 8010388:	f7fa fd6e 	bl	800ae68 <__swsetup_r>
 801038c:	b190      	cbz	r0, 80103b4 <_vfiprintf_r+0x80>
 801038e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010390:	07d8      	lsls	r0, r3, #31
 8010392:	d508      	bpl.n	80103a6 <_vfiprintf_r+0x72>
 8010394:	f04f 33ff 	mov.w	r3, #4294967295
 8010398:	9302      	str	r3, [sp, #8]
 801039a:	9802      	ldr	r0, [sp, #8]
 801039c:	b039      	add	sp, #228	; 0xe4
 801039e:	ecbd 8b02 	vpop	{d8}
 80103a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a6:	89bb      	ldrh	r3, [r7, #12]
 80103a8:	0599      	lsls	r1, r3, #22
 80103aa:	d4f3      	bmi.n	8010394 <_vfiprintf_r+0x60>
 80103ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80103ae:	f7f6 f9d2 	bl	8006756 <__retarget_lock_release_recursive>
 80103b2:	e7ef      	b.n	8010394 <_vfiprintf_r+0x60>
 80103b4:	89bb      	ldrh	r3, [r7, #12]
 80103b6:	f003 021a 	and.w	r2, r3, #26
 80103ba:	2a0a      	cmp	r2, #10
 80103bc:	d113      	bne.n	80103e6 <_vfiprintf_r+0xb2>
 80103be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	db0f      	blt.n	80103e6 <_vfiprintf_r+0xb2>
 80103c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103c8:	07d2      	lsls	r2, r2, #31
 80103ca:	d404      	bmi.n	80103d6 <_vfiprintf_r+0xa2>
 80103cc:	059e      	lsls	r6, r3, #22
 80103ce:	d402      	bmi.n	80103d6 <_vfiprintf_r+0xa2>
 80103d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80103d2:	f7f6 f9c0 	bl	8006756 <__retarget_lock_release_recursive>
 80103d6:	9a01      	ldr	r2, [sp, #4]
 80103d8:	462b      	mov	r3, r5
 80103da:	4639      	mov	r1, r7
 80103dc:	4648      	mov	r0, r9
 80103de:	f000 fc31 	bl	8010c44 <__sbprintf>
 80103e2:	9002      	str	r0, [sp, #8]
 80103e4:	e7d9      	b.n	801039a <_vfiprintf_r+0x66>
 80103e6:	2300      	movs	r3, #0
 80103e8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80103ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80103f0:	ae0f      	add	r6, sp, #60	; 0x3c
 80103f2:	ee08 3a10 	vmov	s16, r3
 80103f6:	960c      	str	r6, [sp, #48]	; 0x30
 80103f8:	9307      	str	r3, [sp, #28]
 80103fa:	9302      	str	r3, [sp, #8]
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	461d      	mov	r5, r3
 8010400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010404:	b10a      	cbz	r2, 801040a <_vfiprintf_r+0xd6>
 8010406:	2a25      	cmp	r2, #37	; 0x25
 8010408:	d1f9      	bne.n	80103fe <_vfiprintf_r+0xca>
 801040a:	9b01      	ldr	r3, [sp, #4]
 801040c:	ebb5 0803 	subs.w	r8, r5, r3
 8010410:	d00d      	beq.n	801042e <_vfiprintf_r+0xfa>
 8010412:	e9c6 3800 	strd	r3, r8, [r6]
 8010416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010418:	4443      	add	r3, r8
 801041a:	930e      	str	r3, [sp, #56]	; 0x38
 801041c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801041e:	3301      	adds	r3, #1
 8010420:	2b07      	cmp	r3, #7
 8010422:	930d      	str	r3, [sp, #52]	; 0x34
 8010424:	dc75      	bgt.n	8010512 <_vfiprintf_r+0x1de>
 8010426:	3608      	adds	r6, #8
 8010428:	9b02      	ldr	r3, [sp, #8]
 801042a:	4443      	add	r3, r8
 801042c:	9302      	str	r3, [sp, #8]
 801042e:	782b      	ldrb	r3, [r5, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 83c8 	beq.w	8010bc6 <_vfiprintf_r+0x892>
 8010436:	2300      	movs	r3, #0
 8010438:	f04f 31ff 	mov.w	r1, #4294967295
 801043c:	1c6a      	adds	r2, r5, #1
 801043e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8010442:	9100      	str	r1, [sp, #0]
 8010444:	9303      	str	r3, [sp, #12]
 8010446:	469a      	mov	sl, r3
 8010448:	f812 3b01 	ldrb.w	r3, [r2], #1
 801044c:	9201      	str	r2, [sp, #4]
 801044e:	f1a3 0220 	sub.w	r2, r3, #32
 8010452:	2a5a      	cmp	r2, #90	; 0x5a
 8010454:	f200 8310 	bhi.w	8010a78 <_vfiprintf_r+0x744>
 8010458:	e8df f012 	tbh	[pc, r2, lsl #1]
 801045c:	030e0099 	.word	0x030e0099
 8010460:	00a1030e 	.word	0x00a1030e
 8010464:	030e030e 	.word	0x030e030e
 8010468:	0080030e 	.word	0x0080030e
 801046c:	030e030e 	.word	0x030e030e
 8010470:	00ae00a4 	.word	0x00ae00a4
 8010474:	00ab030e 	.word	0x00ab030e
 8010478:	030e00b0 	.word	0x030e00b0
 801047c:	00ce00cb 	.word	0x00ce00cb
 8010480:	00ce00ce 	.word	0x00ce00ce
 8010484:	00ce00ce 	.word	0x00ce00ce
 8010488:	00ce00ce 	.word	0x00ce00ce
 801048c:	00ce00ce 	.word	0x00ce00ce
 8010490:	030e030e 	.word	0x030e030e
 8010494:	030e030e 	.word	0x030e030e
 8010498:	030e030e 	.word	0x030e030e
 801049c:	030e030e 	.word	0x030e030e
 80104a0:	00f8030e 	.word	0x00f8030e
 80104a4:	030e0106 	.word	0x030e0106
 80104a8:	030e030e 	.word	0x030e030e
 80104ac:	030e030e 	.word	0x030e030e
 80104b0:	030e030e 	.word	0x030e030e
 80104b4:	030e030e 	.word	0x030e030e
 80104b8:	014d030e 	.word	0x014d030e
 80104bc:	030e030e 	.word	0x030e030e
 80104c0:	0192030e 	.word	0x0192030e
 80104c4:	0270030e 	.word	0x0270030e
 80104c8:	030e030e 	.word	0x030e030e
 80104cc:	030e028e 	.word	0x030e028e
 80104d0:	030e030e 	.word	0x030e030e
 80104d4:	030e030e 	.word	0x030e030e
 80104d8:	030e030e 	.word	0x030e030e
 80104dc:	030e030e 	.word	0x030e030e
 80104e0:	00f8030e 	.word	0x00f8030e
 80104e4:	030e0108 	.word	0x030e0108
 80104e8:	030e030e 	.word	0x030e030e
 80104ec:	010800de 	.word	0x010800de
 80104f0:	030e00f2 	.word	0x030e00f2
 80104f4:	030e00eb 	.word	0x030e00eb
 80104f8:	014f0130 	.word	0x014f0130
 80104fc:	00f20182 	.word	0x00f20182
 8010500:	0192030e 	.word	0x0192030e
 8010504:	02720097 	.word	0x02720097
 8010508:	030e030e 	.word	0x030e030e
 801050c:	030e0065 	.word	0x030e0065
 8010510:	0097      	.short	0x0097
 8010512:	aa0c      	add	r2, sp, #48	; 0x30
 8010514:	4639      	mov	r1, r7
 8010516:	4648      	mov	r0, r9
 8010518:	f7ff fed9 	bl	80102ce <__sprint_r>
 801051c:	2800      	cmp	r0, #0
 801051e:	f040 8331 	bne.w	8010b84 <_vfiprintf_r+0x850>
 8010522:	ae0f      	add	r6, sp, #60	; 0x3c
 8010524:	e780      	b.n	8010428 <_vfiprintf_r+0xf4>
 8010526:	4a95      	ldr	r2, [pc, #596]	; (801077c <_vfiprintf_r+0x448>)
 8010528:	9205      	str	r2, [sp, #20]
 801052a:	f01a 0f20 	tst.w	sl, #32
 801052e:	f000 8225 	beq.w	801097c <_vfiprintf_r+0x648>
 8010532:	3407      	adds	r4, #7
 8010534:	f024 0b07 	bic.w	fp, r4, #7
 8010538:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801053c:	f01a 0f01 	tst.w	sl, #1
 8010540:	d009      	beq.n	8010556 <_vfiprintf_r+0x222>
 8010542:	ea54 0205 	orrs.w	r2, r4, r5
 8010546:	bf1f      	itttt	ne
 8010548:	2230      	movne	r2, #48	; 0x30
 801054a:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 801054e:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8010552:	f04a 0a02 	orrne.w	sl, sl, #2
 8010556:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801055a:	e10d      	b.n	8010778 <_vfiprintf_r+0x444>
 801055c:	4648      	mov	r0, r9
 801055e:	f7fb ffcd 	bl	800c4fc <_localeconv_r>
 8010562:	6843      	ldr	r3, [r0, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	ee08 3a10 	vmov	s16, r3
 801056a:	f7ef fe3b 	bl	80001e4 <strlen>
 801056e:	9007      	str	r0, [sp, #28]
 8010570:	4648      	mov	r0, r9
 8010572:	f7fb ffc3 	bl	800c4fc <_localeconv_r>
 8010576:	6883      	ldr	r3, [r0, #8]
 8010578:	9306      	str	r3, [sp, #24]
 801057a:	9b07      	ldr	r3, [sp, #28]
 801057c:	b12b      	cbz	r3, 801058a <_vfiprintf_r+0x256>
 801057e:	9b06      	ldr	r3, [sp, #24]
 8010580:	b11b      	cbz	r3, 801058a <_vfiprintf_r+0x256>
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	b10b      	cbz	r3, 801058a <_vfiprintf_r+0x256>
 8010586:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801058a:	9a01      	ldr	r2, [sp, #4]
 801058c:	e75c      	b.n	8010448 <_vfiprintf_r+0x114>
 801058e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1f9      	bne.n	801058a <_vfiprintf_r+0x256>
 8010596:	2320      	movs	r3, #32
 8010598:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801059c:	e7f5      	b.n	801058a <_vfiprintf_r+0x256>
 801059e:	f04a 0a01 	orr.w	sl, sl, #1
 80105a2:	e7f2      	b.n	801058a <_vfiprintf_r+0x256>
 80105a4:	f854 3b04 	ldr.w	r3, [r4], #4
 80105a8:	9303      	str	r3, [sp, #12]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	daed      	bge.n	801058a <_vfiprintf_r+0x256>
 80105ae:	425b      	negs	r3, r3
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	f04a 0a04 	orr.w	sl, sl, #4
 80105b6:	e7e8      	b.n	801058a <_vfiprintf_r+0x256>
 80105b8:	232b      	movs	r3, #43	; 0x2b
 80105ba:	e7ed      	b.n	8010598 <_vfiprintf_r+0x264>
 80105bc:	9a01      	ldr	r2, [sp, #4]
 80105be:	f812 3b01 	ldrb.w	r3, [r2], #1
 80105c2:	2b2a      	cmp	r3, #42	; 0x2a
 80105c4:	d112      	bne.n	80105ec <_vfiprintf_r+0x2b8>
 80105c6:	f854 0b04 	ldr.w	r0, [r4], #4
 80105ca:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80105ce:	e9cd 3200 	strd	r3, r2, [sp]
 80105d2:	e7da      	b.n	801058a <_vfiprintf_r+0x256>
 80105d4:	9b00      	ldr	r3, [sp, #0]
 80105d6:	200a      	movs	r0, #10
 80105d8:	fb00 1303 	mla	r3, r0, r3, r1
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	f812 3b01 	ldrb.w	r3, [r2], #1
 80105e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80105e6:	2909      	cmp	r1, #9
 80105e8:	d9f4      	bls.n	80105d4 <_vfiprintf_r+0x2a0>
 80105ea:	e72f      	b.n	801044c <_vfiprintf_r+0x118>
 80105ec:	2100      	movs	r1, #0
 80105ee:	9100      	str	r1, [sp, #0]
 80105f0:	e7f7      	b.n	80105e2 <_vfiprintf_r+0x2ae>
 80105f2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80105f6:	e7c8      	b.n	801058a <_vfiprintf_r+0x256>
 80105f8:	2100      	movs	r1, #0
 80105fa:	9a01      	ldr	r2, [sp, #4]
 80105fc:	9103      	str	r1, [sp, #12]
 80105fe:	9903      	ldr	r1, [sp, #12]
 8010600:	3b30      	subs	r3, #48	; 0x30
 8010602:	200a      	movs	r0, #10
 8010604:	fb00 3301 	mla	r3, r0, r1, r3
 8010608:	9303      	str	r3, [sp, #12]
 801060a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801060e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010612:	2909      	cmp	r1, #9
 8010614:	d9f3      	bls.n	80105fe <_vfiprintf_r+0x2ca>
 8010616:	e719      	b.n	801044c <_vfiprintf_r+0x118>
 8010618:	9b01      	ldr	r3, [sp, #4]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b68      	cmp	r3, #104	; 0x68
 801061e:	bf01      	itttt	eq
 8010620:	9b01      	ldreq	r3, [sp, #4]
 8010622:	3301      	addeq	r3, #1
 8010624:	9301      	streq	r3, [sp, #4]
 8010626:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801062a:	bf18      	it	ne
 801062c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8010630:	e7ab      	b.n	801058a <_vfiprintf_r+0x256>
 8010632:	9b01      	ldr	r3, [sp, #4]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	2b6c      	cmp	r3, #108	; 0x6c
 8010638:	d105      	bne.n	8010646 <_vfiprintf_r+0x312>
 801063a:	9b01      	ldr	r3, [sp, #4]
 801063c:	3301      	adds	r3, #1
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	f04a 0a20 	orr.w	sl, sl, #32
 8010644:	e7a1      	b.n	801058a <_vfiprintf_r+0x256>
 8010646:	f04a 0a10 	orr.w	sl, sl, #16
 801064a:	e79e      	b.n	801058a <_vfiprintf_r+0x256>
 801064c:	46a3      	mov	fp, r4
 801064e:	2100      	movs	r1, #0
 8010650:	f85b 3b04 	ldr.w	r3, [fp], #4
 8010654:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8010658:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801065c:	2301      	movs	r3, #1
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	460d      	mov	r5, r1
 8010662:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8010666:	e0a0      	b.n	80107aa <_vfiprintf_r+0x476>
 8010668:	f04a 0a10 	orr.w	sl, sl, #16
 801066c:	f01a 0f20 	tst.w	sl, #32
 8010670:	d011      	beq.n	8010696 <_vfiprintf_r+0x362>
 8010672:	3407      	adds	r4, #7
 8010674:	f024 0b07 	bic.w	fp, r4, #7
 8010678:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801067c:	2c00      	cmp	r4, #0
 801067e:	f175 0300 	sbcs.w	r3, r5, #0
 8010682:	da06      	bge.n	8010692 <_vfiprintf_r+0x35e>
 8010684:	4264      	negs	r4, r4
 8010686:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801068a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801068e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8010692:	2301      	movs	r3, #1
 8010694:	e03f      	b.n	8010716 <_vfiprintf_r+0x3e2>
 8010696:	f01a 0f10 	tst.w	sl, #16
 801069a:	f104 0b04 	add.w	fp, r4, #4
 801069e:	d002      	beq.n	80106a6 <_vfiprintf_r+0x372>
 80106a0:	6824      	ldr	r4, [r4, #0]
 80106a2:	17e5      	asrs	r5, r4, #31
 80106a4:	e7ea      	b.n	801067c <_vfiprintf_r+0x348>
 80106a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80106aa:	6824      	ldr	r4, [r4, #0]
 80106ac:	d001      	beq.n	80106b2 <_vfiprintf_r+0x37e>
 80106ae:	b224      	sxth	r4, r4
 80106b0:	e7f7      	b.n	80106a2 <_vfiprintf_r+0x36e>
 80106b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80106b6:	bf18      	it	ne
 80106b8:	b264      	sxtbne	r4, r4
 80106ba:	e7f2      	b.n	80106a2 <_vfiprintf_r+0x36e>
 80106bc:	f01a 0f20 	tst.w	sl, #32
 80106c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80106c4:	d005      	beq.n	80106d2 <_vfiprintf_r+0x39e>
 80106c6:	9a02      	ldr	r2, [sp, #8]
 80106c8:	4610      	mov	r0, r2
 80106ca:	17d1      	asrs	r1, r2, #31
 80106cc:	e9c3 0100 	strd	r0, r1, [r3]
 80106d0:	e694      	b.n	80103fc <_vfiprintf_r+0xc8>
 80106d2:	f01a 0f10 	tst.w	sl, #16
 80106d6:	d002      	beq.n	80106de <_vfiprintf_r+0x3aa>
 80106d8:	9a02      	ldr	r2, [sp, #8]
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	e68e      	b.n	80103fc <_vfiprintf_r+0xc8>
 80106de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80106e2:	d002      	beq.n	80106ea <_vfiprintf_r+0x3b6>
 80106e4:	9a02      	ldr	r2, [sp, #8]
 80106e6:	801a      	strh	r2, [r3, #0]
 80106e8:	e688      	b.n	80103fc <_vfiprintf_r+0xc8>
 80106ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80106ee:	d0f3      	beq.n	80106d8 <_vfiprintf_r+0x3a4>
 80106f0:	9a02      	ldr	r2, [sp, #8]
 80106f2:	701a      	strb	r2, [r3, #0]
 80106f4:	e682      	b.n	80103fc <_vfiprintf_r+0xc8>
 80106f6:	f04a 0a10 	orr.w	sl, sl, #16
 80106fa:	f01a 0f20 	tst.w	sl, #32
 80106fe:	d01d      	beq.n	801073c <_vfiprintf_r+0x408>
 8010700:	3407      	adds	r4, #7
 8010702:	f024 0b07 	bic.w	fp, r4, #7
 8010706:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801070a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801070e:	2300      	movs	r3, #0
 8010710:	2200      	movs	r2, #0
 8010712:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8010716:	9a00      	ldr	r2, [sp, #0]
 8010718:	3201      	adds	r2, #1
 801071a:	f000 8261 	beq.w	8010be0 <_vfiprintf_r+0x8ac>
 801071e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8010722:	9204      	str	r2, [sp, #16]
 8010724:	ea54 0205 	orrs.w	r2, r4, r5
 8010728:	f040 8260 	bne.w	8010bec <_vfiprintf_r+0x8b8>
 801072c:	9a00      	ldr	r2, [sp, #0]
 801072e:	2a00      	cmp	r2, #0
 8010730:	f000 8197 	beq.w	8010a62 <_vfiprintf_r+0x72e>
 8010734:	2b01      	cmp	r3, #1
 8010736:	f040 825c 	bne.w	8010bf2 <_vfiprintf_r+0x8be>
 801073a:	e135      	b.n	80109a8 <_vfiprintf_r+0x674>
 801073c:	f01a 0f10 	tst.w	sl, #16
 8010740:	f104 0b04 	add.w	fp, r4, #4
 8010744:	d001      	beq.n	801074a <_vfiprintf_r+0x416>
 8010746:	6824      	ldr	r4, [r4, #0]
 8010748:	e003      	b.n	8010752 <_vfiprintf_r+0x41e>
 801074a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801074e:	d002      	beq.n	8010756 <_vfiprintf_r+0x422>
 8010750:	8824      	ldrh	r4, [r4, #0]
 8010752:	2500      	movs	r5, #0
 8010754:	e7d9      	b.n	801070a <_vfiprintf_r+0x3d6>
 8010756:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801075a:	d0f4      	beq.n	8010746 <_vfiprintf_r+0x412>
 801075c:	7824      	ldrb	r4, [r4, #0]
 801075e:	e7f8      	b.n	8010752 <_vfiprintf_r+0x41e>
 8010760:	46a3      	mov	fp, r4
 8010762:	f647 0330 	movw	r3, #30768	; 0x7830
 8010766:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801076a:	f85b 4b04 	ldr.w	r4, [fp], #4
 801076e:	4b03      	ldr	r3, [pc, #12]	; (801077c <_vfiprintf_r+0x448>)
 8010770:	9305      	str	r3, [sp, #20]
 8010772:	2500      	movs	r5, #0
 8010774:	f04a 0a02 	orr.w	sl, sl, #2
 8010778:	2302      	movs	r3, #2
 801077a:	e7c9      	b.n	8010710 <_vfiprintf_r+0x3dc>
 801077c:	08011c70 	.word	0x08011c70
 8010780:	9b00      	ldr	r3, [sp, #0]
 8010782:	46a3      	mov	fp, r4
 8010784:	2500      	movs	r5, #0
 8010786:	1c5c      	adds	r4, r3, #1
 8010788:	f85b 8b04 	ldr.w	r8, [fp], #4
 801078c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010790:	f000 80cf 	beq.w	8010932 <_vfiprintf_r+0x5fe>
 8010794:	461a      	mov	r2, r3
 8010796:	4629      	mov	r1, r5
 8010798:	4640      	mov	r0, r8
 801079a:	f7ef fd31 	bl	8000200 <memchr>
 801079e:	2800      	cmp	r0, #0
 80107a0:	f000 8174 	beq.w	8010a8c <_vfiprintf_r+0x758>
 80107a4:	eba0 0308 	sub.w	r3, r0, r8
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	9b00      	ldr	r3, [sp, #0]
 80107ac:	42ab      	cmp	r3, r5
 80107ae:	bfb8      	it	lt
 80107b0:	462b      	movlt	r3, r5
 80107b2:	9304      	str	r3, [sp, #16]
 80107b4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80107b8:	b113      	cbz	r3, 80107c0 <_vfiprintf_r+0x48c>
 80107ba:	9b04      	ldr	r3, [sp, #16]
 80107bc:	3301      	adds	r3, #1
 80107be:	9304      	str	r3, [sp, #16]
 80107c0:	f01a 0302 	ands.w	r3, sl, #2
 80107c4:	9308      	str	r3, [sp, #32]
 80107c6:	bf1e      	ittt	ne
 80107c8:	9b04      	ldrne	r3, [sp, #16]
 80107ca:	3302      	addne	r3, #2
 80107cc:	9304      	strne	r3, [sp, #16]
 80107ce:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80107d2:	9309      	str	r3, [sp, #36]	; 0x24
 80107d4:	d11f      	bne.n	8010816 <_vfiprintf_r+0x4e2>
 80107d6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80107da:	1a9c      	subs	r4, r3, r2
 80107dc:	2c00      	cmp	r4, #0
 80107de:	dd1a      	ble.n	8010816 <_vfiprintf_r+0x4e2>
 80107e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80107e4:	48b9      	ldr	r0, [pc, #740]	; (8010acc <_vfiprintf_r+0x798>)
 80107e6:	6030      	str	r0, [r6, #0]
 80107e8:	2c10      	cmp	r4, #16
 80107ea:	f103 0301 	add.w	r3, r3, #1
 80107ee:	f106 0108 	add.w	r1, r6, #8
 80107f2:	f300 814d 	bgt.w	8010a90 <_vfiprintf_r+0x75c>
 80107f6:	6074      	str	r4, [r6, #4]
 80107f8:	2b07      	cmp	r3, #7
 80107fa:	4414      	add	r4, r2
 80107fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8010800:	f340 8158 	ble.w	8010ab4 <_vfiprintf_r+0x780>
 8010804:	aa0c      	add	r2, sp, #48	; 0x30
 8010806:	4639      	mov	r1, r7
 8010808:	4648      	mov	r0, r9
 801080a:	f7ff fd60 	bl	80102ce <__sprint_r>
 801080e:	2800      	cmp	r0, #0
 8010810:	f040 81b8 	bne.w	8010b84 <_vfiprintf_r+0x850>
 8010814:	ae0f      	add	r6, sp, #60	; 0x3c
 8010816:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801081a:	b173      	cbz	r3, 801083a <_vfiprintf_r+0x506>
 801081c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8010820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010822:	6032      	str	r2, [r6, #0]
 8010824:	2201      	movs	r2, #1
 8010826:	6072      	str	r2, [r6, #4]
 8010828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801082a:	3301      	adds	r3, #1
 801082c:	3201      	adds	r2, #1
 801082e:	2b07      	cmp	r3, #7
 8010830:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8010834:	f300 8140 	bgt.w	8010ab8 <_vfiprintf_r+0x784>
 8010838:	3608      	adds	r6, #8
 801083a:	9b08      	ldr	r3, [sp, #32]
 801083c:	b16b      	cbz	r3, 801085a <_vfiprintf_r+0x526>
 801083e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010842:	6032      	str	r2, [r6, #0]
 8010844:	2202      	movs	r2, #2
 8010846:	6072      	str	r2, [r6, #4]
 8010848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801084a:	3301      	adds	r3, #1
 801084c:	3202      	adds	r2, #2
 801084e:	2b07      	cmp	r3, #7
 8010850:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8010854:	f300 8140 	bgt.w	8010ad8 <_vfiprintf_r+0x7a4>
 8010858:	3608      	adds	r6, #8
 801085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801085c:	2b80      	cmp	r3, #128	; 0x80
 801085e:	d11f      	bne.n	80108a0 <_vfiprintf_r+0x56c>
 8010860:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010864:	1a9c      	subs	r4, r3, r2
 8010866:	2c00      	cmp	r4, #0
 8010868:	dd1a      	ble.n	80108a0 <_vfiprintf_r+0x56c>
 801086a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801086e:	4898      	ldr	r0, [pc, #608]	; (8010ad0 <_vfiprintf_r+0x79c>)
 8010870:	6030      	str	r0, [r6, #0]
 8010872:	2c10      	cmp	r4, #16
 8010874:	f103 0301 	add.w	r3, r3, #1
 8010878:	f106 0108 	add.w	r1, r6, #8
 801087c:	f300 8135 	bgt.w	8010aea <_vfiprintf_r+0x7b6>
 8010880:	6074      	str	r4, [r6, #4]
 8010882:	2b07      	cmp	r3, #7
 8010884:	4414      	add	r4, r2
 8010886:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801088a:	f340 8140 	ble.w	8010b0e <_vfiprintf_r+0x7da>
 801088e:	aa0c      	add	r2, sp, #48	; 0x30
 8010890:	4639      	mov	r1, r7
 8010892:	4648      	mov	r0, r9
 8010894:	f7ff fd1b 	bl	80102ce <__sprint_r>
 8010898:	2800      	cmp	r0, #0
 801089a:	f040 8173 	bne.w	8010b84 <_vfiprintf_r+0x850>
 801089e:	ae0f      	add	r6, sp, #60	; 0x3c
 80108a0:	9b00      	ldr	r3, [sp, #0]
 80108a2:	1aec      	subs	r4, r5, r3
 80108a4:	2c00      	cmp	r4, #0
 80108a6:	dd1a      	ble.n	80108de <_vfiprintf_r+0x5aa>
 80108a8:	4d89      	ldr	r5, [pc, #548]	; (8010ad0 <_vfiprintf_r+0x79c>)
 80108aa:	6035      	str	r5, [r6, #0]
 80108ac:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80108b0:	2c10      	cmp	r4, #16
 80108b2:	f103 0301 	add.w	r3, r3, #1
 80108b6:	f106 0208 	add.w	r2, r6, #8
 80108ba:	f300 812a 	bgt.w	8010b12 <_vfiprintf_r+0x7de>
 80108be:	6074      	str	r4, [r6, #4]
 80108c0:	2b07      	cmp	r3, #7
 80108c2:	440c      	add	r4, r1
 80108c4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80108c8:	f340 8134 	ble.w	8010b34 <_vfiprintf_r+0x800>
 80108cc:	aa0c      	add	r2, sp, #48	; 0x30
 80108ce:	4639      	mov	r1, r7
 80108d0:	4648      	mov	r0, r9
 80108d2:	f7ff fcfc 	bl	80102ce <__sprint_r>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	f040 8154 	bne.w	8010b84 <_vfiprintf_r+0x850>
 80108dc:	ae0f      	add	r6, sp, #60	; 0x3c
 80108de:	9b00      	ldr	r3, [sp, #0]
 80108e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80108e2:	6073      	str	r3, [r6, #4]
 80108e4:	4418      	add	r0, r3
 80108e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108e8:	f8c6 8000 	str.w	r8, [r6]
 80108ec:	3301      	adds	r3, #1
 80108ee:	2b07      	cmp	r3, #7
 80108f0:	900e      	str	r0, [sp, #56]	; 0x38
 80108f2:	930d      	str	r3, [sp, #52]	; 0x34
 80108f4:	f300 8120 	bgt.w	8010b38 <_vfiprintf_r+0x804>
 80108f8:	f106 0308 	add.w	r3, r6, #8
 80108fc:	f01a 0f04 	tst.w	sl, #4
 8010900:	f040 8122 	bne.w	8010b48 <_vfiprintf_r+0x814>
 8010904:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010908:	9904      	ldr	r1, [sp, #16]
 801090a:	428a      	cmp	r2, r1
 801090c:	bfac      	ite	ge
 801090e:	189b      	addge	r3, r3, r2
 8010910:	185b      	addlt	r3, r3, r1
 8010912:	9302      	str	r3, [sp, #8]
 8010914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010916:	b13b      	cbz	r3, 8010928 <_vfiprintf_r+0x5f4>
 8010918:	aa0c      	add	r2, sp, #48	; 0x30
 801091a:	4639      	mov	r1, r7
 801091c:	4648      	mov	r0, r9
 801091e:	f7ff fcd6 	bl	80102ce <__sprint_r>
 8010922:	2800      	cmp	r0, #0
 8010924:	f040 812e 	bne.w	8010b84 <_vfiprintf_r+0x850>
 8010928:	2300      	movs	r3, #0
 801092a:	930d      	str	r3, [sp, #52]	; 0x34
 801092c:	465c      	mov	r4, fp
 801092e:	ae0f      	add	r6, sp, #60	; 0x3c
 8010930:	e564      	b.n	80103fc <_vfiprintf_r+0xc8>
 8010932:	4640      	mov	r0, r8
 8010934:	f7ef fc56 	bl	80001e4 <strlen>
 8010938:	9000      	str	r0, [sp, #0]
 801093a:	e736      	b.n	80107aa <_vfiprintf_r+0x476>
 801093c:	f04a 0a10 	orr.w	sl, sl, #16
 8010940:	f01a 0f20 	tst.w	sl, #32
 8010944:	d006      	beq.n	8010954 <_vfiprintf_r+0x620>
 8010946:	3407      	adds	r4, #7
 8010948:	f024 0b07 	bic.w	fp, r4, #7
 801094c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8010950:	2301      	movs	r3, #1
 8010952:	e6dd      	b.n	8010710 <_vfiprintf_r+0x3dc>
 8010954:	f01a 0f10 	tst.w	sl, #16
 8010958:	f104 0b04 	add.w	fp, r4, #4
 801095c:	d001      	beq.n	8010962 <_vfiprintf_r+0x62e>
 801095e:	6824      	ldr	r4, [r4, #0]
 8010960:	e003      	b.n	801096a <_vfiprintf_r+0x636>
 8010962:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8010966:	d002      	beq.n	801096e <_vfiprintf_r+0x63a>
 8010968:	8824      	ldrh	r4, [r4, #0]
 801096a:	2500      	movs	r5, #0
 801096c:	e7f0      	b.n	8010950 <_vfiprintf_r+0x61c>
 801096e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8010972:	d0f4      	beq.n	801095e <_vfiprintf_r+0x62a>
 8010974:	7824      	ldrb	r4, [r4, #0]
 8010976:	e7f8      	b.n	801096a <_vfiprintf_r+0x636>
 8010978:	4a56      	ldr	r2, [pc, #344]	; (8010ad4 <_vfiprintf_r+0x7a0>)
 801097a:	e5d5      	b.n	8010528 <_vfiprintf_r+0x1f4>
 801097c:	f01a 0f10 	tst.w	sl, #16
 8010980:	f104 0b04 	add.w	fp, r4, #4
 8010984:	d001      	beq.n	801098a <_vfiprintf_r+0x656>
 8010986:	6824      	ldr	r4, [r4, #0]
 8010988:	e003      	b.n	8010992 <_vfiprintf_r+0x65e>
 801098a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801098e:	d002      	beq.n	8010996 <_vfiprintf_r+0x662>
 8010990:	8824      	ldrh	r4, [r4, #0]
 8010992:	2500      	movs	r5, #0
 8010994:	e5d2      	b.n	801053c <_vfiprintf_r+0x208>
 8010996:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801099a:	d0f4      	beq.n	8010986 <_vfiprintf_r+0x652>
 801099c:	7824      	ldrb	r4, [r4, #0]
 801099e:	e7f8      	b.n	8010992 <_vfiprintf_r+0x65e>
 80109a0:	2d00      	cmp	r5, #0
 80109a2:	bf08      	it	eq
 80109a4:	2c0a      	cmpeq	r4, #10
 80109a6:	d205      	bcs.n	80109b4 <_vfiprintf_r+0x680>
 80109a8:	3430      	adds	r4, #48	; 0x30
 80109aa:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80109ae:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80109b2:	e13c      	b.n	8010c2e <_vfiprintf_r+0x8fa>
 80109b4:	ab38      	add	r3, sp, #224	; 0xe0
 80109b6:	9308      	str	r3, [sp, #32]
 80109b8:	9b04      	ldr	r3, [sp, #16]
 80109ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109be:	f04f 0a00 	mov.w	sl, #0
 80109c2:	9309      	str	r3, [sp, #36]	; 0x24
 80109c4:	9b08      	ldr	r3, [sp, #32]
 80109c6:	220a      	movs	r2, #10
 80109c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80109cc:	4620      	mov	r0, r4
 80109ce:	2300      	movs	r3, #0
 80109d0:	4629      	mov	r1, r5
 80109d2:	f7f0 f9b9 	bl	8000d48 <__aeabi_uldivmod>
 80109d6:	9b08      	ldr	r3, [sp, #32]
 80109d8:	3230      	adds	r2, #48	; 0x30
 80109da:	f803 2c01 	strb.w	r2, [r3, #-1]
 80109de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109e0:	f10a 0a01 	add.w	sl, sl, #1
 80109e4:	b1db      	cbz	r3, 8010a1e <_vfiprintf_r+0x6ea>
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	4553      	cmp	r3, sl
 80109ec:	d117      	bne.n	8010a1e <_vfiprintf_r+0x6ea>
 80109ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80109f2:	d014      	beq.n	8010a1e <_vfiprintf_r+0x6ea>
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	bf08      	it	eq
 80109f8:	2c0a      	cmpeq	r4, #10
 80109fa:	d310      	bcc.n	8010a1e <_vfiprintf_r+0x6ea>
 80109fc:	9b07      	ldr	r3, [sp, #28]
 80109fe:	eba8 0803 	sub.w	r8, r8, r3
 8010a02:	461a      	mov	r2, r3
 8010a04:	ee18 1a10 	vmov	r1, s16
 8010a08:	4640      	mov	r0, r8
 8010a0a:	f7fc fe26 	bl	800d65a <strncpy>
 8010a0e:	9b06      	ldr	r3, [sp, #24]
 8010a10:	785b      	ldrb	r3, [r3, #1]
 8010a12:	b1a3      	cbz	r3, 8010a3e <_vfiprintf_r+0x70a>
 8010a14:	9b06      	ldr	r3, [sp, #24]
 8010a16:	3301      	adds	r3, #1
 8010a18:	9306      	str	r3, [sp, #24]
 8010a1a:	f04f 0a00 	mov.w	sl, #0
 8010a1e:	220a      	movs	r2, #10
 8010a20:	2300      	movs	r3, #0
 8010a22:	4620      	mov	r0, r4
 8010a24:	4629      	mov	r1, r5
 8010a26:	f7f0 f98f 	bl	8000d48 <__aeabi_uldivmod>
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	bf08      	it	eq
 8010a2e:	2c0a      	cmpeq	r4, #10
 8010a30:	f0c0 80fd 	bcc.w	8010c2e <_vfiprintf_r+0x8fa>
 8010a34:	4604      	mov	r4, r0
 8010a36:	460d      	mov	r5, r1
 8010a38:	f8cd 8020 	str.w	r8, [sp, #32]
 8010a3c:	e7c2      	b.n	80109c4 <_vfiprintf_r+0x690>
 8010a3e:	469a      	mov	sl, r3
 8010a40:	e7ed      	b.n	8010a1e <_vfiprintf_r+0x6ea>
 8010a42:	9a05      	ldr	r2, [sp, #20]
 8010a44:	f004 030f 	and.w	r3, r4, #15
 8010a48:	5cd3      	ldrb	r3, [r2, r3]
 8010a4a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8010a4e:	0923      	lsrs	r3, r4, #4
 8010a50:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8010a54:	092a      	lsrs	r2, r5, #4
 8010a56:	461c      	mov	r4, r3
 8010a58:	4615      	mov	r5, r2
 8010a5a:	ea54 0305 	orrs.w	r3, r4, r5
 8010a5e:	d1f0      	bne.n	8010a42 <_vfiprintf_r+0x70e>
 8010a60:	e0e5      	b.n	8010c2e <_vfiprintf_r+0x8fa>
 8010a62:	b933      	cbnz	r3, 8010a72 <_vfiprintf_r+0x73e>
 8010a64:	f01a 0f01 	tst.w	sl, #1
 8010a68:	d003      	beq.n	8010a72 <_vfiprintf_r+0x73e>
 8010a6a:	2330      	movs	r3, #48	; 0x30
 8010a6c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8010a70:	e79d      	b.n	80109ae <_vfiprintf_r+0x67a>
 8010a72:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8010a76:	e0da      	b.n	8010c2e <_vfiprintf_r+0x8fa>
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 80a4 	beq.w	8010bc6 <_vfiprintf_r+0x892>
 8010a7e:	2100      	movs	r1, #0
 8010a80:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8010a84:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8010a88:	46a3      	mov	fp, r4
 8010a8a:	e5e7      	b.n	801065c <_vfiprintf_r+0x328>
 8010a8c:	4605      	mov	r5, r0
 8010a8e:	e68c      	b.n	80107aa <_vfiprintf_r+0x476>
 8010a90:	2010      	movs	r0, #16
 8010a92:	4402      	add	r2, r0
 8010a94:	2b07      	cmp	r3, #7
 8010a96:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8010a9a:	6070      	str	r0, [r6, #4]
 8010a9c:	dd07      	ble.n	8010aae <_vfiprintf_r+0x77a>
 8010a9e:	aa0c      	add	r2, sp, #48	; 0x30
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	4648      	mov	r0, r9
 8010aa4:	f7ff fc13 	bl	80102ce <__sprint_r>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d16b      	bne.n	8010b84 <_vfiprintf_r+0x850>
 8010aac:	a90f      	add	r1, sp, #60	; 0x3c
 8010aae:	3c10      	subs	r4, #16
 8010ab0:	460e      	mov	r6, r1
 8010ab2:	e695      	b.n	80107e0 <_vfiprintf_r+0x4ac>
 8010ab4:	460e      	mov	r6, r1
 8010ab6:	e6ae      	b.n	8010816 <_vfiprintf_r+0x4e2>
 8010ab8:	aa0c      	add	r2, sp, #48	; 0x30
 8010aba:	4639      	mov	r1, r7
 8010abc:	4648      	mov	r0, r9
 8010abe:	f7ff fc06 	bl	80102ce <__sprint_r>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d15e      	bne.n	8010b84 <_vfiprintf_r+0x850>
 8010ac6:	ae0f      	add	r6, sp, #60	; 0x3c
 8010ac8:	e6b7      	b.n	801083a <_vfiprintf_r+0x506>
 8010aca:	bf00      	nop
 8010acc:	08012112 	.word	0x08012112
 8010ad0:	08012122 	.word	0x08012122
 8010ad4:	08011c81 	.word	0x08011c81
 8010ad8:	aa0c      	add	r2, sp, #48	; 0x30
 8010ada:	4639      	mov	r1, r7
 8010adc:	4648      	mov	r0, r9
 8010ade:	f7ff fbf6 	bl	80102ce <__sprint_r>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d14e      	bne.n	8010b84 <_vfiprintf_r+0x850>
 8010ae6:	ae0f      	add	r6, sp, #60	; 0x3c
 8010ae8:	e6b7      	b.n	801085a <_vfiprintf_r+0x526>
 8010aea:	2010      	movs	r0, #16
 8010aec:	4402      	add	r2, r0
 8010aee:	2b07      	cmp	r3, #7
 8010af0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8010af4:	6070      	str	r0, [r6, #4]
 8010af6:	dd07      	ble.n	8010b08 <_vfiprintf_r+0x7d4>
 8010af8:	aa0c      	add	r2, sp, #48	; 0x30
 8010afa:	4639      	mov	r1, r7
 8010afc:	4648      	mov	r0, r9
 8010afe:	f7ff fbe6 	bl	80102ce <__sprint_r>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d13e      	bne.n	8010b84 <_vfiprintf_r+0x850>
 8010b06:	a90f      	add	r1, sp, #60	; 0x3c
 8010b08:	3c10      	subs	r4, #16
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	e6ad      	b.n	801086a <_vfiprintf_r+0x536>
 8010b0e:	460e      	mov	r6, r1
 8010b10:	e6c6      	b.n	80108a0 <_vfiprintf_r+0x56c>
 8010b12:	2010      	movs	r0, #16
 8010b14:	4401      	add	r1, r0
 8010b16:	2b07      	cmp	r3, #7
 8010b18:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010b1c:	6070      	str	r0, [r6, #4]
 8010b1e:	dd06      	ble.n	8010b2e <_vfiprintf_r+0x7fa>
 8010b20:	aa0c      	add	r2, sp, #48	; 0x30
 8010b22:	4639      	mov	r1, r7
 8010b24:	4648      	mov	r0, r9
 8010b26:	f7ff fbd2 	bl	80102ce <__sprint_r>
 8010b2a:	bb58      	cbnz	r0, 8010b84 <_vfiprintf_r+0x850>
 8010b2c:	aa0f      	add	r2, sp, #60	; 0x3c
 8010b2e:	3c10      	subs	r4, #16
 8010b30:	4616      	mov	r6, r2
 8010b32:	e6ba      	b.n	80108aa <_vfiprintf_r+0x576>
 8010b34:	4616      	mov	r6, r2
 8010b36:	e6d2      	b.n	80108de <_vfiprintf_r+0x5aa>
 8010b38:	aa0c      	add	r2, sp, #48	; 0x30
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	4648      	mov	r0, r9
 8010b3e:	f7ff fbc6 	bl	80102ce <__sprint_r>
 8010b42:	b9f8      	cbnz	r0, 8010b84 <_vfiprintf_r+0x850>
 8010b44:	ab0f      	add	r3, sp, #60	; 0x3c
 8010b46:	e6d9      	b.n	80108fc <_vfiprintf_r+0x5c8>
 8010b48:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8010b4c:	1a54      	subs	r4, r2, r1
 8010b4e:	2c00      	cmp	r4, #0
 8010b50:	f77f aed8 	ble.w	8010904 <_vfiprintf_r+0x5d0>
 8010b54:	4d3a      	ldr	r5, [pc, #232]	; (8010c40 <_vfiprintf_r+0x90c>)
 8010b56:	2610      	movs	r6, #16
 8010b58:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010b5c:	2c10      	cmp	r4, #16
 8010b5e:	f102 0201 	add.w	r2, r2, #1
 8010b62:	601d      	str	r5, [r3, #0]
 8010b64:	dc1d      	bgt.n	8010ba2 <_vfiprintf_r+0x86e>
 8010b66:	605c      	str	r4, [r3, #4]
 8010b68:	2a07      	cmp	r2, #7
 8010b6a:	440c      	add	r4, r1
 8010b6c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8010b70:	f77f aec8 	ble.w	8010904 <_vfiprintf_r+0x5d0>
 8010b74:	aa0c      	add	r2, sp, #48	; 0x30
 8010b76:	4639      	mov	r1, r7
 8010b78:	4648      	mov	r0, r9
 8010b7a:	f7ff fba8 	bl	80102ce <__sprint_r>
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f43f aec0 	beq.w	8010904 <_vfiprintf_r+0x5d0>
 8010b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b86:	07d9      	lsls	r1, r3, #31
 8010b88:	d405      	bmi.n	8010b96 <_vfiprintf_r+0x862>
 8010b8a:	89bb      	ldrh	r3, [r7, #12]
 8010b8c:	059a      	lsls	r2, r3, #22
 8010b8e:	d402      	bmi.n	8010b96 <_vfiprintf_r+0x862>
 8010b90:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010b92:	f7f5 fde0 	bl	8006756 <__retarget_lock_release_recursive>
 8010b96:	89bb      	ldrh	r3, [r7, #12]
 8010b98:	065b      	lsls	r3, r3, #25
 8010b9a:	f57f abfe 	bpl.w	801039a <_vfiprintf_r+0x66>
 8010b9e:	f7ff bbf9 	b.w	8010394 <_vfiprintf_r+0x60>
 8010ba2:	3110      	adds	r1, #16
 8010ba4:	2a07      	cmp	r2, #7
 8010ba6:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8010baa:	605e      	str	r6, [r3, #4]
 8010bac:	dc02      	bgt.n	8010bb4 <_vfiprintf_r+0x880>
 8010bae:	3308      	adds	r3, #8
 8010bb0:	3c10      	subs	r4, #16
 8010bb2:	e7d1      	b.n	8010b58 <_vfiprintf_r+0x824>
 8010bb4:	aa0c      	add	r2, sp, #48	; 0x30
 8010bb6:	4639      	mov	r1, r7
 8010bb8:	4648      	mov	r0, r9
 8010bba:	f7ff fb88 	bl	80102ce <__sprint_r>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d1e0      	bne.n	8010b84 <_vfiprintf_r+0x850>
 8010bc2:	ab0f      	add	r3, sp, #60	; 0x3c
 8010bc4:	e7f4      	b.n	8010bb0 <_vfiprintf_r+0x87c>
 8010bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bc8:	b913      	cbnz	r3, 8010bd0 <_vfiprintf_r+0x89c>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8010bce:	e7d9      	b.n	8010b84 <_vfiprintf_r+0x850>
 8010bd0:	aa0c      	add	r2, sp, #48	; 0x30
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	4648      	mov	r0, r9
 8010bd6:	f7ff fb7a 	bl	80102ce <__sprint_r>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d0f5      	beq.n	8010bca <_vfiprintf_r+0x896>
 8010bde:	e7d1      	b.n	8010b84 <_vfiprintf_r+0x850>
 8010be0:	ea54 0205 	orrs.w	r2, r4, r5
 8010be4:	f8cd a010 	str.w	sl, [sp, #16]
 8010be8:	f43f ada4 	beq.w	8010734 <_vfiprintf_r+0x400>
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	f43f aed7 	beq.w	80109a0 <_vfiprintf_r+0x66c>
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8010bf8:	f43f af23 	beq.w	8010a42 <_vfiprintf_r+0x70e>
 8010bfc:	08e2      	lsrs	r2, r4, #3
 8010bfe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8010c02:	08e8      	lsrs	r0, r5, #3
 8010c04:	f004 0307 	and.w	r3, r4, #7
 8010c08:	4605      	mov	r5, r0
 8010c0a:	4614      	mov	r4, r2
 8010c0c:	3330      	adds	r3, #48	; 0x30
 8010c0e:	ea54 0205 	orrs.w	r2, r4, r5
 8010c12:	4641      	mov	r1, r8
 8010c14:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8010c18:	d1f0      	bne.n	8010bfc <_vfiprintf_r+0x8c8>
 8010c1a:	9a04      	ldr	r2, [sp, #16]
 8010c1c:	07d0      	lsls	r0, r2, #31
 8010c1e:	d506      	bpl.n	8010c2e <_vfiprintf_r+0x8fa>
 8010c20:	2b30      	cmp	r3, #48	; 0x30
 8010c22:	d004      	beq.n	8010c2e <_vfiprintf_r+0x8fa>
 8010c24:	2330      	movs	r3, #48	; 0x30
 8010c26:	f808 3c01 	strb.w	r3, [r8, #-1]
 8010c2a:	f1a1 0802 	sub.w	r8, r1, #2
 8010c2e:	ab38      	add	r3, sp, #224	; 0xe0
 8010c30:	eba3 0308 	sub.w	r3, r3, r8
 8010c34:	9d00      	ldr	r5, [sp, #0]
 8010c36:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	e5b5      	b.n	80107aa <_vfiprintf_r+0x476>
 8010c3e:	bf00      	nop
 8010c40:	08012112 	.word	0x08012112

08010c44 <__sbprintf>:
 8010c44:	b570      	push	{r4, r5, r6, lr}
 8010c46:	460c      	mov	r4, r1
 8010c48:	8989      	ldrh	r1, [r1, #12]
 8010c4a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8010c4e:	f021 0102 	bic.w	r1, r1, #2
 8010c52:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010c56:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010c58:	911b      	str	r1, [sp, #108]	; 0x6c
 8010c5a:	89e1      	ldrh	r1, [r4, #14]
 8010c5c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010c60:	69e1      	ldr	r1, [r4, #28]
 8010c62:	9109      	str	r1, [sp, #36]	; 0x24
 8010c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c66:	910b      	str	r1, [sp, #44]	; 0x2c
 8010c68:	a91c      	add	r1, sp, #112	; 0x70
 8010c6a:	9102      	str	r1, [sp, #8]
 8010c6c:	9106      	str	r1, [sp, #24]
 8010c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c72:	4606      	mov	r6, r0
 8010c74:	9104      	str	r1, [sp, #16]
 8010c76:	9107      	str	r1, [sp, #28]
 8010c78:	a818      	add	r0, sp, #96	; 0x60
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	e9cd 3200 	strd	r3, r2, [sp]
 8010c80:	9108      	str	r1, [sp, #32]
 8010c82:	f7f5 fd63 	bl	800674c <__retarget_lock_init_recursive>
 8010c86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c8a:	a902      	add	r1, sp, #8
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f7ff fb51 	bl	8010334 <_vfiprintf_r>
 8010c92:	1e05      	subs	r5, r0, #0
 8010c94:	db07      	blt.n	8010ca6 <__sbprintf+0x62>
 8010c96:	a902      	add	r1, sp, #8
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f7fb f86b 	bl	800bd74 <_fflush_r>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	bf18      	it	ne
 8010ca2:	f04f 35ff 	movne.w	r5, #4294967295
 8010ca6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010caa:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010cac:	065b      	lsls	r3, r3, #25
 8010cae:	bf42      	ittt	mi
 8010cb0:	89a3      	ldrhmi	r3, [r4, #12]
 8010cb2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010cb6:	81a3      	strhmi	r3, [r4, #12]
 8010cb8:	f7f5 fd49 	bl	800674e <__retarget_lock_close_recursive>
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}

08010cc4 <__ascii_wctomb>:
 8010cc4:	b149      	cbz	r1, 8010cda <__ascii_wctomb+0x16>
 8010cc6:	2aff      	cmp	r2, #255	; 0xff
 8010cc8:	bf85      	ittet	hi
 8010cca:	238a      	movhi	r3, #138	; 0x8a
 8010ccc:	6003      	strhi	r3, [r0, #0]
 8010cce:	700a      	strbls	r2, [r1, #0]
 8010cd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8010cd4:	bf98      	it	ls
 8010cd6:	2001      	movls	r0, #1
 8010cd8:	4770      	bx	lr
 8010cda:	4608      	mov	r0, r1
 8010cdc:	4770      	bx	lr
	...

08010ce0 <_write_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4d07      	ldr	r5, [pc, #28]	; (8010d00 <_write_r+0x20>)
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	4611      	mov	r1, r2
 8010cea:	2200      	movs	r2, #0
 8010cec:	602a      	str	r2, [r5, #0]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	f7f1 fd82 	bl	80027f8 <_write>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	d102      	bne.n	8010cfe <_write_r+0x1e>
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	b103      	cbz	r3, 8010cfe <_write_r+0x1e>
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	bd38      	pop	{r3, r4, r5, pc}
 8010d00:	20000bb4 	.word	0x20000bb4

08010d04 <__register_exitproc>:
 8010d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d08:	4d1c      	ldr	r5, [pc, #112]	; (8010d7c <__register_exitproc+0x78>)
 8010d0a:	4606      	mov	r6, r0
 8010d0c:	6828      	ldr	r0, [r5, #0]
 8010d0e:	4698      	mov	r8, r3
 8010d10:	460f      	mov	r7, r1
 8010d12:	4691      	mov	r9, r2
 8010d14:	f7f5 fd1d 	bl	8006752 <__retarget_lock_acquire_recursive>
 8010d18:	4b19      	ldr	r3, [pc, #100]	; (8010d80 <__register_exitproc+0x7c>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8010d20:	4628      	mov	r0, r5
 8010d22:	b91c      	cbnz	r4, 8010d2c <__register_exitproc+0x28>
 8010d24:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8010d28:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8010d2c:	6865      	ldr	r5, [r4, #4]
 8010d2e:	6800      	ldr	r0, [r0, #0]
 8010d30:	2d1f      	cmp	r5, #31
 8010d32:	dd05      	ble.n	8010d40 <__register_exitproc+0x3c>
 8010d34:	f7f5 fd0f 	bl	8006756 <__retarget_lock_release_recursive>
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d40:	b19e      	cbz	r6, 8010d6a <__register_exitproc+0x66>
 8010d42:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010d46:	2201      	movs	r2, #1
 8010d48:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8010d4c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8010d50:	40aa      	lsls	r2, r5
 8010d52:	4313      	orrs	r3, r2
 8010d54:	2e02      	cmp	r6, #2
 8010d56:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8010d5a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8010d5e:	bf02      	ittt	eq
 8010d60:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8010d64:	431a      	orreq	r2, r3
 8010d66:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8010d6a:	1c6b      	adds	r3, r5, #1
 8010d6c:	3502      	adds	r5, #2
 8010d6e:	6063      	str	r3, [r4, #4]
 8010d70:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010d74:	f7f5 fcef 	bl	8006756 <__retarget_lock_release_recursive>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7df      	b.n	8010d3c <__register_exitproc+0x38>
 8010d7c:	20000860 	.word	0x20000860
 8010d80:	08011bfc 	.word	0x08011bfc

08010d84 <__assert_func>:
 8010d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d86:	4614      	mov	r4, r2
 8010d88:	461a      	mov	r2, r3
 8010d8a:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <__assert_func+0x2c>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	4605      	mov	r5, r0
 8010d90:	68d8      	ldr	r0, [r3, #12]
 8010d92:	b14c      	cbz	r4, 8010da8 <__assert_func+0x24>
 8010d94:	4b07      	ldr	r3, [pc, #28]	; (8010db4 <__assert_func+0x30>)
 8010d96:	9100      	str	r1, [sp, #0]
 8010d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d9c:	4906      	ldr	r1, [pc, #24]	; (8010db8 <__assert_func+0x34>)
 8010d9e:	462b      	mov	r3, r5
 8010da0:	f000 f8b0 	bl	8010f04 <fiprintf>
 8010da4:	f000 fd4c 	bl	8011840 <abort>
 8010da8:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <__assert_func+0x38>)
 8010daa:	461c      	mov	r4, r3
 8010dac:	e7f3      	b.n	8010d96 <__assert_func+0x12>
 8010dae:	bf00      	nop
 8010db0:	2000001c 	.word	0x2000001c
 8010db4:	08012132 	.word	0x08012132
 8010db8:	0801213f 	.word	0x0801213f
 8010dbc:	08011d57 	.word	0x08011d57

08010dc0 <_calloc_r>:
 8010dc0:	b510      	push	{r4, lr}
 8010dc2:	4351      	muls	r1, r2
 8010dc4:	f7f5 fcd8 	bl	8006778 <_malloc_r>
 8010dc8:	4604      	mov	r4, r0
 8010dca:	b198      	cbz	r0, 8010df4 <_calloc_r+0x34>
 8010dcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010dd0:	f022 0203 	bic.w	r2, r2, #3
 8010dd4:	3a04      	subs	r2, #4
 8010dd6:	2a24      	cmp	r2, #36	; 0x24
 8010dd8:	d81b      	bhi.n	8010e12 <_calloc_r+0x52>
 8010dda:	2a13      	cmp	r2, #19
 8010ddc:	d917      	bls.n	8010e0e <_calloc_r+0x4e>
 8010dde:	2100      	movs	r1, #0
 8010de0:	2a1b      	cmp	r2, #27
 8010de2:	e9c0 1100 	strd	r1, r1, [r0]
 8010de6:	d807      	bhi.n	8010df8 <_calloc_r+0x38>
 8010de8:	f100 0308 	add.w	r3, r0, #8
 8010dec:	2200      	movs	r2, #0
 8010dee:	e9c3 2200 	strd	r2, r2, [r3]
 8010df2:	609a      	str	r2, [r3, #8]
 8010df4:	4620      	mov	r0, r4
 8010df6:	bd10      	pop	{r4, pc}
 8010df8:	2a24      	cmp	r2, #36	; 0x24
 8010dfa:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8010dfe:	bf11      	iteee	ne
 8010e00:	f100 0310 	addne.w	r3, r0, #16
 8010e04:	6101      	streq	r1, [r0, #16]
 8010e06:	f100 0318 	addeq.w	r3, r0, #24
 8010e0a:	6141      	streq	r1, [r0, #20]
 8010e0c:	e7ee      	b.n	8010dec <_calloc_r+0x2c>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	e7ec      	b.n	8010dec <_calloc_r+0x2c>
 8010e12:	2100      	movs	r1, #0
 8010e14:	f7f5 fef2 	bl	8006bfc <memset>
 8010e18:	e7ec      	b.n	8010df4 <_calloc_r+0x34>
	...

08010e1c <_close_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4d06      	ldr	r5, [pc, #24]	; (8010e38 <_close_r+0x1c>)
 8010e20:	2300      	movs	r3, #0
 8010e22:	4604      	mov	r4, r0
 8010e24:	4608      	mov	r0, r1
 8010e26:	602b      	str	r3, [r5, #0]
 8010e28:	f7f1 fd08 	bl	800283c <_close>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d102      	bne.n	8010e36 <_close_r+0x1a>
 8010e30:	682b      	ldr	r3, [r5, #0]
 8010e32:	b103      	cbz	r3, 8010e36 <_close_r+0x1a>
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	20000bb4 	.word	0x20000bb4

08010e3c <__env_lock>:
 8010e3c:	4801      	ldr	r0, [pc, #4]	; (8010e44 <__env_lock+0x8>)
 8010e3e:	f7f5 bc88 	b.w	8006752 <__retarget_lock_acquire_recursive>
 8010e42:	bf00      	nop
 8010e44:	20000baa 	.word	0x20000baa

08010e48 <__env_unlock>:
 8010e48:	4801      	ldr	r0, [pc, #4]	; (8010e50 <__env_unlock+0x8>)
 8010e4a:	f7f5 bc84 	b.w	8006756 <__retarget_lock_release_recursive>
 8010e4e:	bf00      	nop
 8010e50:	20000baa 	.word	0x20000baa

08010e54 <_fclose_r>:
 8010e54:	b570      	push	{r4, r5, r6, lr}
 8010e56:	4606      	mov	r6, r0
 8010e58:	460c      	mov	r4, r1
 8010e5a:	b911      	cbnz	r1, 8010e62 <_fclose_r+0xe>
 8010e5c:	2500      	movs	r5, #0
 8010e5e:	4628      	mov	r0, r5
 8010e60:	bd70      	pop	{r4, r5, r6, pc}
 8010e62:	b118      	cbz	r0, 8010e6c <_fclose_r+0x18>
 8010e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010e66:	b90b      	cbnz	r3, 8010e6c <_fclose_r+0x18>
 8010e68:	f7fb f802 	bl	800be70 <__sinit>
 8010e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e6e:	07d8      	lsls	r0, r3, #31
 8010e70:	d405      	bmi.n	8010e7e <_fclose_r+0x2a>
 8010e72:	89a3      	ldrh	r3, [r4, #12]
 8010e74:	0599      	lsls	r1, r3, #22
 8010e76:	d402      	bmi.n	8010e7e <_fclose_r+0x2a>
 8010e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e7a:	f7f5 fc6a 	bl	8006752 <__retarget_lock_acquire_recursive>
 8010e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e82:	b93b      	cbnz	r3, 8010e94 <_fclose_r+0x40>
 8010e84:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010e86:	f015 0501 	ands.w	r5, r5, #1
 8010e8a:	d1e7      	bne.n	8010e5c <_fclose_r+0x8>
 8010e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e8e:	f7f5 fc62 	bl	8006756 <__retarget_lock_release_recursive>
 8010e92:	e7e4      	b.n	8010e5e <_fclose_r+0xa>
 8010e94:	4621      	mov	r1, r4
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7fa fede 	bl	800bc58 <__sflush_r>
 8010e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	b133      	cbz	r3, 8010eb0 <_fclose_r+0x5c>
 8010ea2:	69e1      	ldr	r1, [r4, #28]
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	4798      	blx	r3
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	bfb8      	it	lt
 8010eac:	f04f 35ff 	movlt.w	r5, #4294967295
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	061a      	lsls	r2, r3, #24
 8010eb4:	d503      	bpl.n	8010ebe <_fclose_r+0x6a>
 8010eb6:	6921      	ldr	r1, [r4, #16]
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f7f5 fa65 	bl	8006388 <_free_r>
 8010ebe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010ec0:	b141      	cbz	r1, 8010ed4 <_fclose_r+0x80>
 8010ec2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010ec6:	4299      	cmp	r1, r3
 8010ec8:	d002      	beq.n	8010ed0 <_fclose_r+0x7c>
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7f5 fa5c 	bl	8006388 <_free_r>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8010ed4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010ed6:	b121      	cbz	r1, 8010ee2 <_fclose_r+0x8e>
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f7f5 fa55 	bl	8006388 <_free_r>
 8010ede:	2300      	movs	r3, #0
 8010ee0:	6463      	str	r3, [r4, #68]	; 0x44
 8010ee2:	f7fa ffad 	bl	800be40 <__sfp_lock_acquire>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eec:	07db      	lsls	r3, r3, #31
 8010eee:	d402      	bmi.n	8010ef6 <_fclose_r+0xa2>
 8010ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ef2:	f7f5 fc30 	bl	8006756 <__retarget_lock_release_recursive>
 8010ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ef8:	f7f5 fc29 	bl	800674e <__retarget_lock_close_recursive>
 8010efc:	f7fa ffa6 	bl	800be4c <__sfp_lock_release>
 8010f00:	e7ad      	b.n	8010e5e <_fclose_r+0xa>
	...

08010f04 <fiprintf>:
 8010f04:	b40e      	push	{r1, r2, r3}
 8010f06:	b503      	push	{r0, r1, lr}
 8010f08:	4601      	mov	r1, r0
 8010f0a:	ab03      	add	r3, sp, #12
 8010f0c:	4805      	ldr	r0, [pc, #20]	; (8010f24 <fiprintf+0x20>)
 8010f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f12:	6800      	ldr	r0, [r0, #0]
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	f7ff fa0d 	bl	8010334 <_vfiprintf_r>
 8010f1a:	b002      	add	sp, #8
 8010f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f20:	b003      	add	sp, #12
 8010f22:	4770      	bx	lr
 8010f24:	2000001c 	.word	0x2000001c

08010f28 <__fputwc>:
 8010f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	460e      	mov	r6, r1
 8010f30:	4615      	mov	r5, r2
 8010f32:	f7fb fadd 	bl	800c4f0 <__locale_mb_cur_max>
 8010f36:	2801      	cmp	r0, #1
 8010f38:	d11c      	bne.n	8010f74 <__fputwc+0x4c>
 8010f3a:	1e73      	subs	r3, r6, #1
 8010f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8010f3e:	d819      	bhi.n	8010f74 <__fputwc+0x4c>
 8010f40:	f88d 6004 	strb.w	r6, [sp, #4]
 8010f44:	4604      	mov	r4, r0
 8010f46:	2700      	movs	r7, #0
 8010f48:	f10d 0904 	add.w	r9, sp, #4
 8010f4c:	42a7      	cmp	r7, r4
 8010f4e:	d020      	beq.n	8010f92 <__fputwc+0x6a>
 8010f50:	68ab      	ldr	r3, [r5, #8]
 8010f52:	f817 1009 	ldrb.w	r1, [r7, r9]
 8010f56:	3b01      	subs	r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	60ab      	str	r3, [r5, #8]
 8010f5c:	da04      	bge.n	8010f68 <__fputwc+0x40>
 8010f5e:	69aa      	ldr	r2, [r5, #24]
 8010f60:	4293      	cmp	r3, r2
 8010f62:	db1a      	blt.n	8010f9a <__fputwc+0x72>
 8010f64:	290a      	cmp	r1, #10
 8010f66:	d018      	beq.n	8010f9a <__fputwc+0x72>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	1c5a      	adds	r2, r3, #1
 8010f6c:	602a      	str	r2, [r5, #0]
 8010f6e:	7019      	strb	r1, [r3, #0]
 8010f70:	3701      	adds	r7, #1
 8010f72:	e7eb      	b.n	8010f4c <__fputwc+0x24>
 8010f74:	4632      	mov	r2, r6
 8010f76:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8010f7a:	a901      	add	r1, sp, #4
 8010f7c:	4640      	mov	r0, r8
 8010f7e:	f000 fc49 	bl	8011814 <_wcrtomb_r>
 8010f82:	1c42      	adds	r2, r0, #1
 8010f84:	4604      	mov	r4, r0
 8010f86:	d1de      	bne.n	8010f46 <__fputwc+0x1e>
 8010f88:	89ab      	ldrh	r3, [r5, #12]
 8010f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f8e:	81ab      	strh	r3, [r5, #12]
 8010f90:	4606      	mov	r6, r0
 8010f92:	4630      	mov	r0, r6
 8010f94:	b003      	add	sp, #12
 8010f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9a:	462a      	mov	r2, r5
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	f000 fbef 	bl	8011780 <__swbuf_r>
 8010fa2:	1c43      	adds	r3, r0, #1
 8010fa4:	d1e4      	bne.n	8010f70 <__fputwc+0x48>
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	e7f3      	b.n	8010f92 <__fputwc+0x6a>

08010faa <_fputwc_r>:
 8010faa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fae:	4614      	mov	r4, r2
 8010fb0:	07da      	lsls	r2, r3, #31
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	d407      	bmi.n	8010fc6 <_fputwc_r+0x1c>
 8010fb6:	89a3      	ldrh	r3, [r4, #12]
 8010fb8:	059b      	lsls	r3, r3, #22
 8010fba:	d404      	bmi.n	8010fc6 <_fputwc_r+0x1c>
 8010fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fbe:	9101      	str	r1, [sp, #4]
 8010fc0:	f7f5 fbc7 	bl	8006752 <__retarget_lock_acquire_recursive>
 8010fc4:	9901      	ldr	r1, [sp, #4]
 8010fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fca:	0498      	lsls	r0, r3, #18
 8010fcc:	d406      	bmi.n	8010fdc <_fputwc_r+0x32>
 8010fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010fd2:	81a3      	strh	r3, [r4, #12]
 8010fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010fda:	6663      	str	r3, [r4, #100]	; 0x64
 8010fdc:	4622      	mov	r2, r4
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f7ff ffa2 	bl	8010f28 <__fputwc>
 8010fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fe6:	07da      	lsls	r2, r3, #31
 8010fe8:	4605      	mov	r5, r0
 8010fea:	d405      	bmi.n	8010ff8 <_fputwc_r+0x4e>
 8010fec:	89a3      	ldrh	r3, [r4, #12]
 8010fee:	059b      	lsls	r3, r3, #22
 8010ff0:	d402      	bmi.n	8010ff8 <_fputwc_r+0x4e>
 8010ff2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ff4:	f7f5 fbaf 	bl	8006756 <__retarget_lock_release_recursive>
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	b003      	add	sp, #12
 8010ffc:	bd30      	pop	{r4, r5, pc}
	...

08011000 <_fstat_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d07      	ldr	r5, [pc, #28]	; (8011020 <_fstat_r+0x20>)
 8011004:	2300      	movs	r3, #0
 8011006:	4604      	mov	r4, r0
 8011008:	4608      	mov	r0, r1
 801100a:	4611      	mov	r1, r2
 801100c:	602b      	str	r3, [r5, #0]
 801100e:	f7f1 fc21 	bl	8002854 <_fstat>
 8011012:	1c43      	adds	r3, r0, #1
 8011014:	d102      	bne.n	801101c <_fstat_r+0x1c>
 8011016:	682b      	ldr	r3, [r5, #0]
 8011018:	b103      	cbz	r3, 801101c <_fstat_r+0x1c>
 801101a:	6023      	str	r3, [r4, #0]
 801101c:	bd38      	pop	{r3, r4, r5, pc}
 801101e:	bf00      	nop
 8011020:	20000bb4 	.word	0x20000bb4

08011024 <rshift>:
 8011024:	6903      	ldr	r3, [r0, #16]
 8011026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801102a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801102e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011032:	f100 0414 	add.w	r4, r0, #20
 8011036:	dd45      	ble.n	80110c4 <rshift+0xa0>
 8011038:	f011 011f 	ands.w	r1, r1, #31
 801103c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011044:	d10c      	bne.n	8011060 <rshift+0x3c>
 8011046:	f100 0710 	add.w	r7, r0, #16
 801104a:	4629      	mov	r1, r5
 801104c:	42b1      	cmp	r1, r6
 801104e:	d334      	bcc.n	80110ba <rshift+0x96>
 8011050:	1a9b      	subs	r3, r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	1eea      	subs	r2, r5, #3
 8011056:	4296      	cmp	r6, r2
 8011058:	bf38      	it	cc
 801105a:	2300      	movcc	r3, #0
 801105c:	4423      	add	r3, r4
 801105e:	e015      	b.n	801108c <rshift+0x68>
 8011060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011064:	f1c1 0820 	rsb	r8, r1, #32
 8011068:	40cf      	lsrs	r7, r1
 801106a:	f105 0e04 	add.w	lr, r5, #4
 801106e:	46a1      	mov	r9, r4
 8011070:	4576      	cmp	r6, lr
 8011072:	46f4      	mov	ip, lr
 8011074:	d815      	bhi.n	80110a2 <rshift+0x7e>
 8011076:	1a9b      	subs	r3, r3, r2
 8011078:	009a      	lsls	r2, r3, #2
 801107a:	3a04      	subs	r2, #4
 801107c:	3501      	adds	r5, #1
 801107e:	42ae      	cmp	r6, r5
 8011080:	bf38      	it	cc
 8011082:	2200      	movcc	r2, #0
 8011084:	18a3      	adds	r3, r4, r2
 8011086:	50a7      	str	r7, [r4, r2]
 8011088:	b107      	cbz	r7, 801108c <rshift+0x68>
 801108a:	3304      	adds	r3, #4
 801108c:	1b1a      	subs	r2, r3, r4
 801108e:	42a3      	cmp	r3, r4
 8011090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011094:	bf08      	it	eq
 8011096:	2300      	moveq	r3, #0
 8011098:	6102      	str	r2, [r0, #16]
 801109a:	bf08      	it	eq
 801109c:	6143      	streq	r3, [r0, #20]
 801109e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110a2:	f8dc c000 	ldr.w	ip, [ip]
 80110a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80110aa:	ea4c 0707 	orr.w	r7, ip, r7
 80110ae:	f849 7b04 	str.w	r7, [r9], #4
 80110b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80110b6:	40cf      	lsrs	r7, r1
 80110b8:	e7da      	b.n	8011070 <rshift+0x4c>
 80110ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80110be:	f847 cf04 	str.w	ip, [r7, #4]!
 80110c2:	e7c3      	b.n	801104c <rshift+0x28>
 80110c4:	4623      	mov	r3, r4
 80110c6:	e7e1      	b.n	801108c <rshift+0x68>

080110c8 <__hexdig_fun>:
 80110c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80110cc:	2b09      	cmp	r3, #9
 80110ce:	d802      	bhi.n	80110d6 <__hexdig_fun+0xe>
 80110d0:	3820      	subs	r0, #32
 80110d2:	b2c0      	uxtb	r0, r0
 80110d4:	4770      	bx	lr
 80110d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80110da:	2b05      	cmp	r3, #5
 80110dc:	d801      	bhi.n	80110e2 <__hexdig_fun+0x1a>
 80110de:	3847      	subs	r0, #71	; 0x47
 80110e0:	e7f7      	b.n	80110d2 <__hexdig_fun+0xa>
 80110e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80110e6:	2b05      	cmp	r3, #5
 80110e8:	d801      	bhi.n	80110ee <__hexdig_fun+0x26>
 80110ea:	3827      	subs	r0, #39	; 0x27
 80110ec:	e7f1      	b.n	80110d2 <__hexdig_fun+0xa>
 80110ee:	2000      	movs	r0, #0
 80110f0:	4770      	bx	lr
	...

080110f4 <__gethex>:
 80110f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f8:	ed2d 8b02 	vpush	{d8}
 80110fc:	b089      	sub	sp, #36	; 0x24
 80110fe:	ee08 0a10 	vmov	s16, r0
 8011102:	9304      	str	r3, [sp, #16]
 8011104:	4bbc      	ldr	r3, [pc, #752]	; (80113f8 <__gethex+0x304>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	4618      	mov	r0, r3
 801110c:	468b      	mov	fp, r1
 801110e:	4690      	mov	r8, r2
 8011110:	f7ef f868 	bl	80001e4 <strlen>
 8011114:	9b01      	ldr	r3, [sp, #4]
 8011116:	f8db 2000 	ldr.w	r2, [fp]
 801111a:	4403      	add	r3, r0
 801111c:	4682      	mov	sl, r0
 801111e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011122:	9305      	str	r3, [sp, #20]
 8011124:	1c93      	adds	r3, r2, #2
 8011126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801112a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801112e:	32fe      	adds	r2, #254	; 0xfe
 8011130:	18d1      	adds	r1, r2, r3
 8011132:	461f      	mov	r7, r3
 8011134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011138:	9100      	str	r1, [sp, #0]
 801113a:	2830      	cmp	r0, #48	; 0x30
 801113c:	d0f8      	beq.n	8011130 <__gethex+0x3c>
 801113e:	f7ff ffc3 	bl	80110c8 <__hexdig_fun>
 8011142:	4604      	mov	r4, r0
 8011144:	2800      	cmp	r0, #0
 8011146:	d13a      	bne.n	80111be <__gethex+0xca>
 8011148:	9901      	ldr	r1, [sp, #4]
 801114a:	4652      	mov	r2, sl
 801114c:	4638      	mov	r0, r7
 801114e:	f7fc fa72 	bl	800d636 <strncmp>
 8011152:	4605      	mov	r5, r0
 8011154:	2800      	cmp	r0, #0
 8011156:	d168      	bne.n	801122a <__gethex+0x136>
 8011158:	f817 000a 	ldrb.w	r0, [r7, sl]
 801115c:	eb07 060a 	add.w	r6, r7, sl
 8011160:	f7ff ffb2 	bl	80110c8 <__hexdig_fun>
 8011164:	2800      	cmp	r0, #0
 8011166:	d062      	beq.n	801122e <__gethex+0x13a>
 8011168:	4633      	mov	r3, r6
 801116a:	7818      	ldrb	r0, [r3, #0]
 801116c:	2830      	cmp	r0, #48	; 0x30
 801116e:	461f      	mov	r7, r3
 8011170:	f103 0301 	add.w	r3, r3, #1
 8011174:	d0f9      	beq.n	801116a <__gethex+0x76>
 8011176:	f7ff ffa7 	bl	80110c8 <__hexdig_fun>
 801117a:	2301      	movs	r3, #1
 801117c:	fab0 f480 	clz	r4, r0
 8011180:	0964      	lsrs	r4, r4, #5
 8011182:	4635      	mov	r5, r6
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	463a      	mov	r2, r7
 8011188:	4616      	mov	r6, r2
 801118a:	3201      	adds	r2, #1
 801118c:	7830      	ldrb	r0, [r6, #0]
 801118e:	f7ff ff9b 	bl	80110c8 <__hexdig_fun>
 8011192:	2800      	cmp	r0, #0
 8011194:	d1f8      	bne.n	8011188 <__gethex+0x94>
 8011196:	9901      	ldr	r1, [sp, #4]
 8011198:	4652      	mov	r2, sl
 801119a:	4630      	mov	r0, r6
 801119c:	f7fc fa4b 	bl	800d636 <strncmp>
 80111a0:	b980      	cbnz	r0, 80111c4 <__gethex+0xd0>
 80111a2:	b94d      	cbnz	r5, 80111b8 <__gethex+0xc4>
 80111a4:	eb06 050a 	add.w	r5, r6, sl
 80111a8:	462a      	mov	r2, r5
 80111aa:	4616      	mov	r6, r2
 80111ac:	3201      	adds	r2, #1
 80111ae:	7830      	ldrb	r0, [r6, #0]
 80111b0:	f7ff ff8a 	bl	80110c8 <__hexdig_fun>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d1f8      	bne.n	80111aa <__gethex+0xb6>
 80111b8:	1bad      	subs	r5, r5, r6
 80111ba:	00ad      	lsls	r5, r5, #2
 80111bc:	e004      	b.n	80111c8 <__gethex+0xd4>
 80111be:	2400      	movs	r4, #0
 80111c0:	4625      	mov	r5, r4
 80111c2:	e7e0      	b.n	8011186 <__gethex+0x92>
 80111c4:	2d00      	cmp	r5, #0
 80111c6:	d1f7      	bne.n	80111b8 <__gethex+0xc4>
 80111c8:	7833      	ldrb	r3, [r6, #0]
 80111ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80111ce:	2b50      	cmp	r3, #80	; 0x50
 80111d0:	d13b      	bne.n	801124a <__gethex+0x156>
 80111d2:	7873      	ldrb	r3, [r6, #1]
 80111d4:	2b2b      	cmp	r3, #43	; 0x2b
 80111d6:	d02c      	beq.n	8011232 <__gethex+0x13e>
 80111d8:	2b2d      	cmp	r3, #45	; 0x2d
 80111da:	d02e      	beq.n	801123a <__gethex+0x146>
 80111dc:	1c71      	adds	r1, r6, #1
 80111de:	f04f 0900 	mov.w	r9, #0
 80111e2:	7808      	ldrb	r0, [r1, #0]
 80111e4:	f7ff ff70 	bl	80110c8 <__hexdig_fun>
 80111e8:	1e43      	subs	r3, r0, #1
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	2b18      	cmp	r3, #24
 80111ee:	d82c      	bhi.n	801124a <__gethex+0x156>
 80111f0:	f1a0 0210 	sub.w	r2, r0, #16
 80111f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80111f8:	f7ff ff66 	bl	80110c8 <__hexdig_fun>
 80111fc:	1e43      	subs	r3, r0, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	2b18      	cmp	r3, #24
 8011202:	d91d      	bls.n	8011240 <__gethex+0x14c>
 8011204:	f1b9 0f00 	cmp.w	r9, #0
 8011208:	d000      	beq.n	801120c <__gethex+0x118>
 801120a:	4252      	negs	r2, r2
 801120c:	4415      	add	r5, r2
 801120e:	f8cb 1000 	str.w	r1, [fp]
 8011212:	b1e4      	cbz	r4, 801124e <__gethex+0x15a>
 8011214:	9b00      	ldr	r3, [sp, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	bf14      	ite	ne
 801121a:	2700      	movne	r7, #0
 801121c:	2706      	moveq	r7, #6
 801121e:	4638      	mov	r0, r7
 8011220:	b009      	add	sp, #36	; 0x24
 8011222:	ecbd 8b02 	vpop	{d8}
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	463e      	mov	r6, r7
 801122c:	4625      	mov	r5, r4
 801122e:	2401      	movs	r4, #1
 8011230:	e7ca      	b.n	80111c8 <__gethex+0xd4>
 8011232:	f04f 0900 	mov.w	r9, #0
 8011236:	1cb1      	adds	r1, r6, #2
 8011238:	e7d3      	b.n	80111e2 <__gethex+0xee>
 801123a:	f04f 0901 	mov.w	r9, #1
 801123e:	e7fa      	b.n	8011236 <__gethex+0x142>
 8011240:	230a      	movs	r3, #10
 8011242:	fb03 0202 	mla	r2, r3, r2, r0
 8011246:	3a10      	subs	r2, #16
 8011248:	e7d4      	b.n	80111f4 <__gethex+0x100>
 801124a:	4631      	mov	r1, r6
 801124c:	e7df      	b.n	801120e <__gethex+0x11a>
 801124e:	1bf3      	subs	r3, r6, r7
 8011250:	3b01      	subs	r3, #1
 8011252:	4621      	mov	r1, r4
 8011254:	2b07      	cmp	r3, #7
 8011256:	dc0b      	bgt.n	8011270 <__gethex+0x17c>
 8011258:	ee18 0a10 	vmov	r0, s16
 801125c:	f7fb fa12 	bl	800c684 <_Balloc>
 8011260:	4604      	mov	r4, r0
 8011262:	b940      	cbnz	r0, 8011276 <__gethex+0x182>
 8011264:	4b65      	ldr	r3, [pc, #404]	; (80113fc <__gethex+0x308>)
 8011266:	4602      	mov	r2, r0
 8011268:	21de      	movs	r1, #222	; 0xde
 801126a:	4865      	ldr	r0, [pc, #404]	; (8011400 <__gethex+0x30c>)
 801126c:	f7ff fd8a 	bl	8010d84 <__assert_func>
 8011270:	3101      	adds	r1, #1
 8011272:	105b      	asrs	r3, r3, #1
 8011274:	e7ee      	b.n	8011254 <__gethex+0x160>
 8011276:	f100 0914 	add.w	r9, r0, #20
 801127a:	f04f 0b00 	mov.w	fp, #0
 801127e:	f1ca 0301 	rsb	r3, sl, #1
 8011282:	f8cd 9008 	str.w	r9, [sp, #8]
 8011286:	f8cd b000 	str.w	fp, [sp]
 801128a:	9306      	str	r3, [sp, #24]
 801128c:	42b7      	cmp	r7, r6
 801128e:	d340      	bcc.n	8011312 <__gethex+0x21e>
 8011290:	9802      	ldr	r0, [sp, #8]
 8011292:	9b00      	ldr	r3, [sp, #0]
 8011294:	f840 3b04 	str.w	r3, [r0], #4
 8011298:	eba0 0009 	sub.w	r0, r0, r9
 801129c:	1080      	asrs	r0, r0, #2
 801129e:	0146      	lsls	r6, r0, #5
 80112a0:	6120      	str	r0, [r4, #16]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fb fab0 	bl	800c808 <__hi0bits>
 80112a8:	1a30      	subs	r0, r6, r0
 80112aa:	f8d8 6000 	ldr.w	r6, [r8]
 80112ae:	42b0      	cmp	r0, r6
 80112b0:	dd63      	ble.n	801137a <__gethex+0x286>
 80112b2:	1b87      	subs	r7, r0, r6
 80112b4:	4639      	mov	r1, r7
 80112b6:	4620      	mov	r0, r4
 80112b8:	f7fb fe30 	bl	800cf1c <__any_on>
 80112bc:	4682      	mov	sl, r0
 80112be:	b1a8      	cbz	r0, 80112ec <__gethex+0x1f8>
 80112c0:	1e7b      	subs	r3, r7, #1
 80112c2:	1159      	asrs	r1, r3, #5
 80112c4:	f003 021f 	and.w	r2, r3, #31
 80112c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80112cc:	f04f 0a01 	mov.w	sl, #1
 80112d0:	fa0a f202 	lsl.w	r2, sl, r2
 80112d4:	420a      	tst	r2, r1
 80112d6:	d009      	beq.n	80112ec <__gethex+0x1f8>
 80112d8:	4553      	cmp	r3, sl
 80112da:	dd05      	ble.n	80112e8 <__gethex+0x1f4>
 80112dc:	1eb9      	subs	r1, r7, #2
 80112de:	4620      	mov	r0, r4
 80112e0:	f7fb fe1c 	bl	800cf1c <__any_on>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d145      	bne.n	8011374 <__gethex+0x280>
 80112e8:	f04f 0a02 	mov.w	sl, #2
 80112ec:	4639      	mov	r1, r7
 80112ee:	4620      	mov	r0, r4
 80112f0:	f7ff fe98 	bl	8011024 <rshift>
 80112f4:	443d      	add	r5, r7
 80112f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112fa:	42ab      	cmp	r3, r5
 80112fc:	da4c      	bge.n	8011398 <__gethex+0x2a4>
 80112fe:	ee18 0a10 	vmov	r0, s16
 8011302:	4621      	mov	r1, r4
 8011304:	f7fb f9e3 	bl	800c6ce <_Bfree>
 8011308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801130a:	2300      	movs	r3, #0
 801130c:	6013      	str	r3, [r2, #0]
 801130e:	27a3      	movs	r7, #163	; 0xa3
 8011310:	e785      	b.n	801121e <__gethex+0x12a>
 8011312:	1e73      	subs	r3, r6, #1
 8011314:	9a05      	ldr	r2, [sp, #20]
 8011316:	9303      	str	r3, [sp, #12]
 8011318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801131c:	4293      	cmp	r3, r2
 801131e:	d019      	beq.n	8011354 <__gethex+0x260>
 8011320:	f1bb 0f20 	cmp.w	fp, #32
 8011324:	d107      	bne.n	8011336 <__gethex+0x242>
 8011326:	9b02      	ldr	r3, [sp, #8]
 8011328:	9a00      	ldr	r2, [sp, #0]
 801132a:	f843 2b04 	str.w	r2, [r3], #4
 801132e:	9302      	str	r3, [sp, #8]
 8011330:	2300      	movs	r3, #0
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	469b      	mov	fp, r3
 8011336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801133a:	f7ff fec5 	bl	80110c8 <__hexdig_fun>
 801133e:	9b00      	ldr	r3, [sp, #0]
 8011340:	f000 000f 	and.w	r0, r0, #15
 8011344:	fa00 f00b 	lsl.w	r0, r0, fp
 8011348:	4303      	orrs	r3, r0
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	f10b 0b04 	add.w	fp, fp, #4
 8011350:	9b03      	ldr	r3, [sp, #12]
 8011352:	e00d      	b.n	8011370 <__gethex+0x27c>
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	9a06      	ldr	r2, [sp, #24]
 8011358:	4413      	add	r3, r2
 801135a:	42bb      	cmp	r3, r7
 801135c:	d3e0      	bcc.n	8011320 <__gethex+0x22c>
 801135e:	4618      	mov	r0, r3
 8011360:	9901      	ldr	r1, [sp, #4]
 8011362:	9307      	str	r3, [sp, #28]
 8011364:	4652      	mov	r2, sl
 8011366:	f7fc f966 	bl	800d636 <strncmp>
 801136a:	9b07      	ldr	r3, [sp, #28]
 801136c:	2800      	cmp	r0, #0
 801136e:	d1d7      	bne.n	8011320 <__gethex+0x22c>
 8011370:	461e      	mov	r6, r3
 8011372:	e78b      	b.n	801128c <__gethex+0x198>
 8011374:	f04f 0a03 	mov.w	sl, #3
 8011378:	e7b8      	b.n	80112ec <__gethex+0x1f8>
 801137a:	da0a      	bge.n	8011392 <__gethex+0x29e>
 801137c:	1a37      	subs	r7, r6, r0
 801137e:	4621      	mov	r1, r4
 8011380:	ee18 0a10 	vmov	r0, s16
 8011384:	463a      	mov	r2, r7
 8011386:	f7fb fb8b 	bl	800caa0 <__lshift>
 801138a:	1bed      	subs	r5, r5, r7
 801138c:	4604      	mov	r4, r0
 801138e:	f100 0914 	add.w	r9, r0, #20
 8011392:	f04f 0a00 	mov.w	sl, #0
 8011396:	e7ae      	b.n	80112f6 <__gethex+0x202>
 8011398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801139c:	42a8      	cmp	r0, r5
 801139e:	dd72      	ble.n	8011486 <__gethex+0x392>
 80113a0:	1b45      	subs	r5, r0, r5
 80113a2:	42ae      	cmp	r6, r5
 80113a4:	dc36      	bgt.n	8011414 <__gethex+0x320>
 80113a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d02a      	beq.n	8011404 <__gethex+0x310>
 80113ae:	2b03      	cmp	r3, #3
 80113b0:	d02c      	beq.n	801140c <__gethex+0x318>
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d115      	bne.n	80113e2 <__gethex+0x2ee>
 80113b6:	42ae      	cmp	r6, r5
 80113b8:	d113      	bne.n	80113e2 <__gethex+0x2ee>
 80113ba:	2e01      	cmp	r6, #1
 80113bc:	d10b      	bne.n	80113d6 <__gethex+0x2e2>
 80113be:	9a04      	ldr	r2, [sp, #16]
 80113c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80113c4:	6013      	str	r3, [r2, #0]
 80113c6:	2301      	movs	r3, #1
 80113c8:	6123      	str	r3, [r4, #16]
 80113ca:	f8c9 3000 	str.w	r3, [r9]
 80113ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113d0:	2762      	movs	r7, #98	; 0x62
 80113d2:	601c      	str	r4, [r3, #0]
 80113d4:	e723      	b.n	801121e <__gethex+0x12a>
 80113d6:	1e71      	subs	r1, r6, #1
 80113d8:	4620      	mov	r0, r4
 80113da:	f7fb fd9f 	bl	800cf1c <__any_on>
 80113de:	2800      	cmp	r0, #0
 80113e0:	d1ed      	bne.n	80113be <__gethex+0x2ca>
 80113e2:	ee18 0a10 	vmov	r0, s16
 80113e6:	4621      	mov	r1, r4
 80113e8:	f7fb f971 	bl	800c6ce <_Bfree>
 80113ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113ee:	2300      	movs	r3, #0
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	2750      	movs	r7, #80	; 0x50
 80113f4:	e713      	b.n	801121e <__gethex+0x12a>
 80113f6:	bf00      	nop
 80113f8:	080121d8 	.word	0x080121d8
 80113fc:	08011e9f 	.word	0x08011e9f
 8011400:	0801216e 	.word	0x0801216e
 8011404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011406:	2b00      	cmp	r3, #0
 8011408:	d1eb      	bne.n	80113e2 <__gethex+0x2ee>
 801140a:	e7d8      	b.n	80113be <__gethex+0x2ca>
 801140c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1d5      	bne.n	80113be <__gethex+0x2ca>
 8011412:	e7e6      	b.n	80113e2 <__gethex+0x2ee>
 8011414:	1e6f      	subs	r7, r5, #1
 8011416:	f1ba 0f00 	cmp.w	sl, #0
 801141a:	d131      	bne.n	8011480 <__gethex+0x38c>
 801141c:	b127      	cbz	r7, 8011428 <__gethex+0x334>
 801141e:	4639      	mov	r1, r7
 8011420:	4620      	mov	r0, r4
 8011422:	f7fb fd7b 	bl	800cf1c <__any_on>
 8011426:	4682      	mov	sl, r0
 8011428:	117b      	asrs	r3, r7, #5
 801142a:	2101      	movs	r1, #1
 801142c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011430:	f007 071f 	and.w	r7, r7, #31
 8011434:	fa01 f707 	lsl.w	r7, r1, r7
 8011438:	421f      	tst	r7, r3
 801143a:	4629      	mov	r1, r5
 801143c:	4620      	mov	r0, r4
 801143e:	bf18      	it	ne
 8011440:	f04a 0a02 	orrne.w	sl, sl, #2
 8011444:	1b76      	subs	r6, r6, r5
 8011446:	f7ff fded 	bl	8011024 <rshift>
 801144a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801144e:	2702      	movs	r7, #2
 8011450:	f1ba 0f00 	cmp.w	sl, #0
 8011454:	d048      	beq.n	80114e8 <__gethex+0x3f4>
 8011456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801145a:	2b02      	cmp	r3, #2
 801145c:	d015      	beq.n	801148a <__gethex+0x396>
 801145e:	2b03      	cmp	r3, #3
 8011460:	d017      	beq.n	8011492 <__gethex+0x39e>
 8011462:	2b01      	cmp	r3, #1
 8011464:	d109      	bne.n	801147a <__gethex+0x386>
 8011466:	f01a 0f02 	tst.w	sl, #2
 801146a:	d006      	beq.n	801147a <__gethex+0x386>
 801146c:	f8d9 0000 	ldr.w	r0, [r9]
 8011470:	ea4a 0a00 	orr.w	sl, sl, r0
 8011474:	f01a 0f01 	tst.w	sl, #1
 8011478:	d10e      	bne.n	8011498 <__gethex+0x3a4>
 801147a:	f047 0710 	orr.w	r7, r7, #16
 801147e:	e033      	b.n	80114e8 <__gethex+0x3f4>
 8011480:	f04f 0a01 	mov.w	sl, #1
 8011484:	e7d0      	b.n	8011428 <__gethex+0x334>
 8011486:	2701      	movs	r7, #1
 8011488:	e7e2      	b.n	8011450 <__gethex+0x35c>
 801148a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801148c:	f1c3 0301 	rsb	r3, r3, #1
 8011490:	9315      	str	r3, [sp, #84]	; 0x54
 8011492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0f0      	beq.n	801147a <__gethex+0x386>
 8011498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801149c:	f104 0314 	add.w	r3, r4, #20
 80114a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80114a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80114a8:	f04f 0c00 	mov.w	ip, #0
 80114ac:	4618      	mov	r0, r3
 80114ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80114b6:	d01c      	beq.n	80114f2 <__gethex+0x3fe>
 80114b8:	3201      	adds	r2, #1
 80114ba:	6002      	str	r2, [r0, #0]
 80114bc:	2f02      	cmp	r7, #2
 80114be:	f104 0314 	add.w	r3, r4, #20
 80114c2:	d13f      	bne.n	8011544 <__gethex+0x450>
 80114c4:	f8d8 2000 	ldr.w	r2, [r8]
 80114c8:	3a01      	subs	r2, #1
 80114ca:	42b2      	cmp	r2, r6
 80114cc:	d10a      	bne.n	80114e4 <__gethex+0x3f0>
 80114ce:	1171      	asrs	r1, r6, #5
 80114d0:	2201      	movs	r2, #1
 80114d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80114d6:	f006 061f 	and.w	r6, r6, #31
 80114da:	fa02 f606 	lsl.w	r6, r2, r6
 80114de:	421e      	tst	r6, r3
 80114e0:	bf18      	it	ne
 80114e2:	4617      	movne	r7, r2
 80114e4:	f047 0720 	orr.w	r7, r7, #32
 80114e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114ea:	601c      	str	r4, [r3, #0]
 80114ec:	9b04      	ldr	r3, [sp, #16]
 80114ee:	601d      	str	r5, [r3, #0]
 80114f0:	e695      	b.n	801121e <__gethex+0x12a>
 80114f2:	4299      	cmp	r1, r3
 80114f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80114f8:	d8d8      	bhi.n	80114ac <__gethex+0x3b8>
 80114fa:	68a3      	ldr	r3, [r4, #8]
 80114fc:	459b      	cmp	fp, r3
 80114fe:	db19      	blt.n	8011534 <__gethex+0x440>
 8011500:	6861      	ldr	r1, [r4, #4]
 8011502:	ee18 0a10 	vmov	r0, s16
 8011506:	3101      	adds	r1, #1
 8011508:	f7fb f8bc 	bl	800c684 <_Balloc>
 801150c:	4681      	mov	r9, r0
 801150e:	b918      	cbnz	r0, 8011518 <__gethex+0x424>
 8011510:	4b1a      	ldr	r3, [pc, #104]	; (801157c <__gethex+0x488>)
 8011512:	4602      	mov	r2, r0
 8011514:	2184      	movs	r1, #132	; 0x84
 8011516:	e6a8      	b.n	801126a <__gethex+0x176>
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	3202      	adds	r2, #2
 801151c:	f104 010c 	add.w	r1, r4, #12
 8011520:	0092      	lsls	r2, r2, #2
 8011522:	300c      	adds	r0, #12
 8011524:	f7fb f886 	bl	800c634 <memcpy>
 8011528:	4621      	mov	r1, r4
 801152a:	ee18 0a10 	vmov	r0, s16
 801152e:	f7fb f8ce 	bl	800c6ce <_Bfree>
 8011532:	464c      	mov	r4, r9
 8011534:	6923      	ldr	r3, [r4, #16]
 8011536:	1c5a      	adds	r2, r3, #1
 8011538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801153c:	6122      	str	r2, [r4, #16]
 801153e:	2201      	movs	r2, #1
 8011540:	615a      	str	r2, [r3, #20]
 8011542:	e7bb      	b.n	80114bc <__gethex+0x3c8>
 8011544:	6922      	ldr	r2, [r4, #16]
 8011546:	455a      	cmp	r2, fp
 8011548:	dd0b      	ble.n	8011562 <__gethex+0x46e>
 801154a:	2101      	movs	r1, #1
 801154c:	4620      	mov	r0, r4
 801154e:	f7ff fd69 	bl	8011024 <rshift>
 8011552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011556:	3501      	adds	r5, #1
 8011558:	42ab      	cmp	r3, r5
 801155a:	f6ff aed0 	blt.w	80112fe <__gethex+0x20a>
 801155e:	2701      	movs	r7, #1
 8011560:	e7c0      	b.n	80114e4 <__gethex+0x3f0>
 8011562:	f016 061f 	ands.w	r6, r6, #31
 8011566:	d0fa      	beq.n	801155e <__gethex+0x46a>
 8011568:	449a      	add	sl, r3
 801156a:	f1c6 0620 	rsb	r6, r6, #32
 801156e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011572:	f7fb f949 	bl	800c808 <__hi0bits>
 8011576:	42b0      	cmp	r0, r6
 8011578:	dbe7      	blt.n	801154a <__gethex+0x456>
 801157a:	e7f0      	b.n	801155e <__gethex+0x46a>
 801157c:	08011e9f 	.word	0x08011e9f

08011580 <L_shift>:
 8011580:	f1c2 0208 	rsb	r2, r2, #8
 8011584:	0092      	lsls	r2, r2, #2
 8011586:	b570      	push	{r4, r5, r6, lr}
 8011588:	f1c2 0620 	rsb	r6, r2, #32
 801158c:	6843      	ldr	r3, [r0, #4]
 801158e:	6804      	ldr	r4, [r0, #0]
 8011590:	fa03 f506 	lsl.w	r5, r3, r6
 8011594:	432c      	orrs	r4, r5
 8011596:	40d3      	lsrs	r3, r2
 8011598:	6004      	str	r4, [r0, #0]
 801159a:	f840 3f04 	str.w	r3, [r0, #4]!
 801159e:	4288      	cmp	r0, r1
 80115a0:	d3f4      	bcc.n	801158c <L_shift+0xc>
 80115a2:	bd70      	pop	{r4, r5, r6, pc}

080115a4 <__match>:
 80115a4:	b530      	push	{r4, r5, lr}
 80115a6:	6803      	ldr	r3, [r0, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115ae:	b914      	cbnz	r4, 80115b6 <__match+0x12>
 80115b0:	6003      	str	r3, [r0, #0]
 80115b2:	2001      	movs	r0, #1
 80115b4:	bd30      	pop	{r4, r5, pc}
 80115b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80115be:	2d19      	cmp	r5, #25
 80115c0:	bf98      	it	ls
 80115c2:	3220      	addls	r2, #32
 80115c4:	42a2      	cmp	r2, r4
 80115c6:	d0f0      	beq.n	80115aa <__match+0x6>
 80115c8:	2000      	movs	r0, #0
 80115ca:	e7f3      	b.n	80115b4 <__match+0x10>

080115cc <__hexnan>:
 80115cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d0:	680b      	ldr	r3, [r1, #0]
 80115d2:	6801      	ldr	r1, [r0, #0]
 80115d4:	115e      	asrs	r6, r3, #5
 80115d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80115da:	f013 031f 	ands.w	r3, r3, #31
 80115de:	b087      	sub	sp, #28
 80115e0:	bf18      	it	ne
 80115e2:	3604      	addne	r6, #4
 80115e4:	2500      	movs	r5, #0
 80115e6:	1f37      	subs	r7, r6, #4
 80115e8:	4682      	mov	sl, r0
 80115ea:	4690      	mov	r8, r2
 80115ec:	9301      	str	r3, [sp, #4]
 80115ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80115f2:	46b9      	mov	r9, r7
 80115f4:	463c      	mov	r4, r7
 80115f6:	9502      	str	r5, [sp, #8]
 80115f8:	46ab      	mov	fp, r5
 80115fa:	784a      	ldrb	r2, [r1, #1]
 80115fc:	1c4b      	adds	r3, r1, #1
 80115fe:	9303      	str	r3, [sp, #12]
 8011600:	b342      	cbz	r2, 8011654 <__hexnan+0x88>
 8011602:	4610      	mov	r0, r2
 8011604:	9105      	str	r1, [sp, #20]
 8011606:	9204      	str	r2, [sp, #16]
 8011608:	f7ff fd5e 	bl	80110c8 <__hexdig_fun>
 801160c:	2800      	cmp	r0, #0
 801160e:	d14f      	bne.n	80116b0 <__hexnan+0xe4>
 8011610:	9a04      	ldr	r2, [sp, #16]
 8011612:	9905      	ldr	r1, [sp, #20]
 8011614:	2a20      	cmp	r2, #32
 8011616:	d818      	bhi.n	801164a <__hexnan+0x7e>
 8011618:	9b02      	ldr	r3, [sp, #8]
 801161a:	459b      	cmp	fp, r3
 801161c:	dd13      	ble.n	8011646 <__hexnan+0x7a>
 801161e:	454c      	cmp	r4, r9
 8011620:	d206      	bcs.n	8011630 <__hexnan+0x64>
 8011622:	2d07      	cmp	r5, #7
 8011624:	dc04      	bgt.n	8011630 <__hexnan+0x64>
 8011626:	462a      	mov	r2, r5
 8011628:	4649      	mov	r1, r9
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff ffa8 	bl	8011580 <L_shift>
 8011630:	4544      	cmp	r4, r8
 8011632:	d950      	bls.n	80116d6 <__hexnan+0x10a>
 8011634:	2300      	movs	r3, #0
 8011636:	f1a4 0904 	sub.w	r9, r4, #4
 801163a:	f844 3c04 	str.w	r3, [r4, #-4]
 801163e:	f8cd b008 	str.w	fp, [sp, #8]
 8011642:	464c      	mov	r4, r9
 8011644:	461d      	mov	r5, r3
 8011646:	9903      	ldr	r1, [sp, #12]
 8011648:	e7d7      	b.n	80115fa <__hexnan+0x2e>
 801164a:	2a29      	cmp	r2, #41	; 0x29
 801164c:	d156      	bne.n	80116fc <__hexnan+0x130>
 801164e:	3102      	adds	r1, #2
 8011650:	f8ca 1000 	str.w	r1, [sl]
 8011654:	f1bb 0f00 	cmp.w	fp, #0
 8011658:	d050      	beq.n	80116fc <__hexnan+0x130>
 801165a:	454c      	cmp	r4, r9
 801165c:	d206      	bcs.n	801166c <__hexnan+0xa0>
 801165e:	2d07      	cmp	r5, #7
 8011660:	dc04      	bgt.n	801166c <__hexnan+0xa0>
 8011662:	462a      	mov	r2, r5
 8011664:	4649      	mov	r1, r9
 8011666:	4620      	mov	r0, r4
 8011668:	f7ff ff8a 	bl	8011580 <L_shift>
 801166c:	4544      	cmp	r4, r8
 801166e:	d934      	bls.n	80116da <__hexnan+0x10e>
 8011670:	f1a8 0204 	sub.w	r2, r8, #4
 8011674:	4623      	mov	r3, r4
 8011676:	f853 1b04 	ldr.w	r1, [r3], #4
 801167a:	f842 1f04 	str.w	r1, [r2, #4]!
 801167e:	429f      	cmp	r7, r3
 8011680:	d2f9      	bcs.n	8011676 <__hexnan+0xaa>
 8011682:	1b3b      	subs	r3, r7, r4
 8011684:	f023 0303 	bic.w	r3, r3, #3
 8011688:	3304      	adds	r3, #4
 801168a:	3401      	adds	r4, #1
 801168c:	3e03      	subs	r6, #3
 801168e:	42b4      	cmp	r4, r6
 8011690:	bf88      	it	hi
 8011692:	2304      	movhi	r3, #4
 8011694:	4443      	add	r3, r8
 8011696:	2200      	movs	r2, #0
 8011698:	f843 2b04 	str.w	r2, [r3], #4
 801169c:	429f      	cmp	r7, r3
 801169e:	d2fb      	bcs.n	8011698 <__hexnan+0xcc>
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	b91b      	cbnz	r3, 80116ac <__hexnan+0xe0>
 80116a4:	4547      	cmp	r7, r8
 80116a6:	d127      	bne.n	80116f8 <__hexnan+0x12c>
 80116a8:	2301      	movs	r3, #1
 80116aa:	603b      	str	r3, [r7, #0]
 80116ac:	2005      	movs	r0, #5
 80116ae:	e026      	b.n	80116fe <__hexnan+0x132>
 80116b0:	3501      	adds	r5, #1
 80116b2:	2d08      	cmp	r5, #8
 80116b4:	f10b 0b01 	add.w	fp, fp, #1
 80116b8:	dd06      	ble.n	80116c8 <__hexnan+0xfc>
 80116ba:	4544      	cmp	r4, r8
 80116bc:	d9c3      	bls.n	8011646 <__hexnan+0x7a>
 80116be:	2300      	movs	r3, #0
 80116c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80116c4:	2501      	movs	r5, #1
 80116c6:	3c04      	subs	r4, #4
 80116c8:	6822      	ldr	r2, [r4, #0]
 80116ca:	f000 000f 	and.w	r0, r0, #15
 80116ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80116d2:	6022      	str	r2, [r4, #0]
 80116d4:	e7b7      	b.n	8011646 <__hexnan+0x7a>
 80116d6:	2508      	movs	r5, #8
 80116d8:	e7b5      	b.n	8011646 <__hexnan+0x7a>
 80116da:	9b01      	ldr	r3, [sp, #4]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d0df      	beq.n	80116a0 <__hexnan+0xd4>
 80116e0:	f04f 32ff 	mov.w	r2, #4294967295
 80116e4:	f1c3 0320 	rsb	r3, r3, #32
 80116e8:	fa22 f303 	lsr.w	r3, r2, r3
 80116ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80116f0:	401a      	ands	r2, r3
 80116f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80116f6:	e7d3      	b.n	80116a0 <__hexnan+0xd4>
 80116f8:	3f04      	subs	r7, #4
 80116fa:	e7d1      	b.n	80116a0 <__hexnan+0xd4>
 80116fc:	2004      	movs	r0, #4
 80116fe:	b007      	add	sp, #28
 8011700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011704 <_isatty_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4d06      	ldr	r5, [pc, #24]	; (8011720 <_isatty_r+0x1c>)
 8011708:	2300      	movs	r3, #0
 801170a:	4604      	mov	r4, r0
 801170c:	4608      	mov	r0, r1
 801170e:	602b      	str	r3, [r5, #0]
 8011710:	f7f1 f8b0 	bl	8002874 <_isatty>
 8011714:	1c43      	adds	r3, r0, #1
 8011716:	d102      	bne.n	801171e <_isatty_r+0x1a>
 8011718:	682b      	ldr	r3, [r5, #0]
 801171a:	b103      	cbz	r3, 801171e <_isatty_r+0x1a>
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	bd38      	pop	{r3, r4, r5, pc}
 8011720:	20000bb4 	.word	0x20000bb4

08011724 <_lseek_r>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	4d07      	ldr	r5, [pc, #28]	; (8011744 <_lseek_r+0x20>)
 8011728:	4604      	mov	r4, r0
 801172a:	4608      	mov	r0, r1
 801172c:	4611      	mov	r1, r2
 801172e:	2200      	movs	r2, #0
 8011730:	602a      	str	r2, [r5, #0]
 8011732:	461a      	mov	r2, r3
 8011734:	f7f1 f8a9 	bl	800288a <_lseek>
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	d102      	bne.n	8011742 <_lseek_r+0x1e>
 801173c:	682b      	ldr	r3, [r5, #0]
 801173e:	b103      	cbz	r3, 8011742 <_lseek_r+0x1e>
 8011740:	6023      	str	r3, [r4, #0]
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	20000bb4 	.word	0x20000bb4

08011748 <_read_r>:
 8011748:	b538      	push	{r3, r4, r5, lr}
 801174a:	4d07      	ldr	r5, [pc, #28]	; (8011768 <_read_r+0x20>)
 801174c:	4604      	mov	r4, r0
 801174e:	4608      	mov	r0, r1
 8011750:	4611      	mov	r1, r2
 8011752:	2200      	movs	r2, #0
 8011754:	602a      	str	r2, [r5, #0]
 8011756:	461a      	mov	r2, r3
 8011758:	f7f1 f830 	bl	80027bc <_read>
 801175c:	1c43      	adds	r3, r0, #1
 801175e:	d102      	bne.n	8011766 <_read_r+0x1e>
 8011760:	682b      	ldr	r3, [r5, #0]
 8011762:	b103      	cbz	r3, 8011766 <_read_r+0x1e>
 8011764:	6023      	str	r3, [r4, #0]
 8011766:	bd38      	pop	{r3, r4, r5, pc}
 8011768:	20000bb4 	.word	0x20000bb4
 801176c:	00000000 	.word	0x00000000

08011770 <nan>:
 8011770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011778 <nan+0x8>
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop
 8011778:	00000000 	.word	0x00000000
 801177c:	7ff80000 	.word	0x7ff80000

08011780 <__swbuf_r>:
 8011780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011782:	460e      	mov	r6, r1
 8011784:	4614      	mov	r4, r2
 8011786:	4605      	mov	r5, r0
 8011788:	b118      	cbz	r0, 8011792 <__swbuf_r+0x12>
 801178a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801178c:	b90b      	cbnz	r3, 8011792 <__swbuf_r+0x12>
 801178e:	f7fa fb6f 	bl	800be70 <__sinit>
 8011792:	69a3      	ldr	r3, [r4, #24]
 8011794:	60a3      	str	r3, [r4, #8]
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	0719      	lsls	r1, r3, #28
 801179a:	d529      	bpl.n	80117f0 <__swbuf_r+0x70>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	b33b      	cbz	r3, 80117f0 <__swbuf_r+0x70>
 80117a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117a4:	b2f6      	uxtb	r6, r6
 80117a6:	049a      	lsls	r2, r3, #18
 80117a8:	4637      	mov	r7, r6
 80117aa:	d52a      	bpl.n	8011802 <__swbuf_r+0x82>
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	6920      	ldr	r0, [r4, #16]
 80117b0:	1a18      	subs	r0, r3, r0
 80117b2:	6963      	ldr	r3, [r4, #20]
 80117b4:	4283      	cmp	r3, r0
 80117b6:	dc04      	bgt.n	80117c2 <__swbuf_r+0x42>
 80117b8:	4621      	mov	r1, r4
 80117ba:	4628      	mov	r0, r5
 80117bc:	f7fa fada 	bl	800bd74 <_fflush_r>
 80117c0:	b9e0      	cbnz	r0, 80117fc <__swbuf_r+0x7c>
 80117c2:	68a3      	ldr	r3, [r4, #8]
 80117c4:	3b01      	subs	r3, #1
 80117c6:	60a3      	str	r3, [r4, #8]
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	1c5a      	adds	r2, r3, #1
 80117cc:	6022      	str	r2, [r4, #0]
 80117ce:	701e      	strb	r6, [r3, #0]
 80117d0:	6962      	ldr	r2, [r4, #20]
 80117d2:	1c43      	adds	r3, r0, #1
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d004      	beq.n	80117e2 <__swbuf_r+0x62>
 80117d8:	89a3      	ldrh	r3, [r4, #12]
 80117da:	07db      	lsls	r3, r3, #31
 80117dc:	d506      	bpl.n	80117ec <__swbuf_r+0x6c>
 80117de:	2e0a      	cmp	r6, #10
 80117e0:	d104      	bne.n	80117ec <__swbuf_r+0x6c>
 80117e2:	4621      	mov	r1, r4
 80117e4:	4628      	mov	r0, r5
 80117e6:	f7fa fac5 	bl	800bd74 <_fflush_r>
 80117ea:	b938      	cbnz	r0, 80117fc <__swbuf_r+0x7c>
 80117ec:	4638      	mov	r0, r7
 80117ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117f0:	4621      	mov	r1, r4
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7f9 fb38 	bl	800ae68 <__swsetup_r>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d0d1      	beq.n	80117a0 <__swbuf_r+0x20>
 80117fc:	f04f 37ff 	mov.w	r7, #4294967295
 8011800:	e7f4      	b.n	80117ec <__swbuf_r+0x6c>
 8011802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801180a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801180e:	6663      	str	r3, [r4, #100]	; 0x64
 8011810:	e7cc      	b.n	80117ac <__swbuf_r+0x2c>
	...

08011814 <_wcrtomb_r>:
 8011814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011816:	4c09      	ldr	r4, [pc, #36]	; (801183c <_wcrtomb_r+0x28>)
 8011818:	b085      	sub	sp, #20
 801181a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801181e:	4605      	mov	r5, r0
 8011820:	461e      	mov	r6, r3
 8011822:	b909      	cbnz	r1, 8011828 <_wcrtomb_r+0x14>
 8011824:	460a      	mov	r2, r1
 8011826:	a901      	add	r1, sp, #4
 8011828:	47b8      	blx	r7
 801182a:	1c43      	adds	r3, r0, #1
 801182c:	bf01      	itttt	eq
 801182e:	2300      	moveq	r3, #0
 8011830:	6033      	streq	r3, [r6, #0]
 8011832:	238a      	moveq	r3, #138	; 0x8a
 8011834:	602b      	streq	r3, [r5, #0]
 8011836:	b005      	add	sp, #20
 8011838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801183a:	bf00      	nop
 801183c:	200008c0 	.word	0x200008c0

08011840 <abort>:
 8011840:	b508      	push	{r3, lr}
 8011842:	2006      	movs	r0, #6
 8011844:	f000 f82c 	bl	80118a0 <raise>
 8011848:	2001      	movs	r0, #1
 801184a:	f7f0 ffad 	bl	80027a8 <_exit>

0801184e <_raise_r>:
 801184e:	291f      	cmp	r1, #31
 8011850:	b538      	push	{r3, r4, r5, lr}
 8011852:	4604      	mov	r4, r0
 8011854:	460d      	mov	r5, r1
 8011856:	d904      	bls.n	8011862 <_raise_r+0x14>
 8011858:	2316      	movs	r3, #22
 801185a:	6003      	str	r3, [r0, #0]
 801185c:	f04f 30ff 	mov.w	r0, #4294967295
 8011860:	bd38      	pop	{r3, r4, r5, pc}
 8011862:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8011866:	b112      	cbz	r2, 801186e <_raise_r+0x20>
 8011868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801186c:	b94b      	cbnz	r3, 8011882 <_raise_r+0x34>
 801186e:	4620      	mov	r0, r4
 8011870:	f000 f830 	bl	80118d4 <_getpid_r>
 8011874:	462a      	mov	r2, r5
 8011876:	4601      	mov	r1, r0
 8011878:	4620      	mov	r0, r4
 801187a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801187e:	f000 b817 	b.w	80118b0 <_kill_r>
 8011882:	2b01      	cmp	r3, #1
 8011884:	d00a      	beq.n	801189c <_raise_r+0x4e>
 8011886:	1c59      	adds	r1, r3, #1
 8011888:	d103      	bne.n	8011892 <_raise_r+0x44>
 801188a:	2316      	movs	r3, #22
 801188c:	6003      	str	r3, [r0, #0]
 801188e:	2001      	movs	r0, #1
 8011890:	e7e6      	b.n	8011860 <_raise_r+0x12>
 8011892:	2400      	movs	r4, #0
 8011894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011898:	4628      	mov	r0, r5
 801189a:	4798      	blx	r3
 801189c:	2000      	movs	r0, #0
 801189e:	e7df      	b.n	8011860 <_raise_r+0x12>

080118a0 <raise>:
 80118a0:	4b02      	ldr	r3, [pc, #8]	; (80118ac <raise+0xc>)
 80118a2:	4601      	mov	r1, r0
 80118a4:	6818      	ldr	r0, [r3, #0]
 80118a6:	f7ff bfd2 	b.w	801184e <_raise_r>
 80118aa:	bf00      	nop
 80118ac:	2000001c 	.word	0x2000001c

080118b0 <_kill_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	4d07      	ldr	r5, [pc, #28]	; (80118d0 <_kill_r+0x20>)
 80118b4:	2300      	movs	r3, #0
 80118b6:	4604      	mov	r4, r0
 80118b8:	4608      	mov	r0, r1
 80118ba:	4611      	mov	r1, r2
 80118bc:	602b      	str	r3, [r5, #0]
 80118be:	f7f0 ff63 	bl	8002788 <_kill>
 80118c2:	1c43      	adds	r3, r0, #1
 80118c4:	d102      	bne.n	80118cc <_kill_r+0x1c>
 80118c6:	682b      	ldr	r3, [r5, #0]
 80118c8:	b103      	cbz	r3, 80118cc <_kill_r+0x1c>
 80118ca:	6023      	str	r3, [r4, #0]
 80118cc:	bd38      	pop	{r3, r4, r5, pc}
 80118ce:	bf00      	nop
 80118d0:	20000bb4 	.word	0x20000bb4

080118d4 <_getpid_r>:
 80118d4:	f7f0 bf50 	b.w	8002778 <_getpid>

080118d8 <_gettimeofday>:
 80118d8:	4b02      	ldr	r3, [pc, #8]	; (80118e4 <_gettimeofday+0xc>)
 80118da:	2258      	movs	r2, #88	; 0x58
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	f04f 30ff 	mov.w	r0, #4294967295
 80118e2:	4770      	bx	lr
 80118e4:	20000bb4 	.word	0x20000bb4

080118e8 <_init>:
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ea:	bf00      	nop
 80118ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ee:	bc08      	pop	{r3}
 80118f0:	469e      	mov	lr, r3
 80118f2:	4770      	bx	lr

080118f4 <_fini>:
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f6:	bf00      	nop
 80118f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118fa:	bc08      	pop	{r3}
 80118fc:	469e      	mov	lr, r3
 80118fe:	4770      	bx	lr
